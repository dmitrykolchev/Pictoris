using System;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using static Managed.Win32.ComOle.Methods;

namespace Managed.Win32.ComOle
{
    public enum tagREGCLS
    {
        REGCLS_SINGLEUSE = 0,
        REGCLS_MULTIPLEUSE = 1,
        REGCLS_MULTI_SEPARATE = 2,
        REGCLS_SUSPENDED = 4,
        REGCLS_SURROGATE = 8,
        REGCLS_AGILE = 0x10,
    }

    public enum tagCOINITBASE
    {
        COINITBASE_MULTITHREADED = 0x0,
    }

    [Guid("00000000-0000-0000-C000-000000000046")]
    public unsafe partial struct IUnknown : IUnknown.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IUnknown));

        public Vtbl<IUnknown>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IUnknown*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IUnknown*)Unsafe.AsPointer(ref this));
        }

        public interface Interface
        {
            [return: NativeTypeName("HRESULT")]
            int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject);

            [return: NativeTypeName("ULONG")]
            uint AddRef();

            [return: NativeTypeName("ULONG")]
            uint Release();
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;
        }
    }

    [Guid("000E0000-0000-0000-C000-000000000046")]
    [NativeTypeName("struct AsyncIUnknown : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct AsyncIUnknown : AsyncIUnknown.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_AsyncIUnknown));

        public Vtbl<AsyncIUnknown>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((AsyncIUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((AsyncIUnknown*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((AsyncIUnknown*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Begin_QueryInterface([NativeTypeName("const IID &")] Guid* riid)
        {
            return lpVtbl->Begin_QueryInterface((AsyncIUnknown*)Unsafe.AsPointer(ref this), riid);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Finish_QueryInterface(void** ppvObject)
        {
            return lpVtbl->Finish_QueryInterface((AsyncIUnknown*)Unsafe.AsPointer(ref this), ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Begin_AddRef()
        {
            return lpVtbl->Begin_AddRef((AsyncIUnknown*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Finish_AddRef()
        {
            return lpVtbl->Finish_AddRef((AsyncIUnknown*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Begin_Release()
        {
            return lpVtbl->Begin_Release((AsyncIUnknown*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Finish_Release()
        {
            return lpVtbl->Finish_Release((AsyncIUnknown*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Begin_QueryInterface([NativeTypeName("const IID &")] Guid* riid);

            [return: NativeTypeName("HRESULT")]
            int Finish_QueryInterface(void** ppvObject);

            [return: NativeTypeName("HRESULT")]
            int Begin_AddRef();

            [return: NativeTypeName("ULONG")]
            uint Finish_AddRef();

            [return: NativeTypeName("HRESULT")]
            int Begin_Release();

            [return: NativeTypeName("ULONG")]
            uint Finish_Release();
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (const IID &) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, int> Begin_QueryInterface;

            [NativeTypeName("HRESULT (void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void**, int> Finish_QueryInterface;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> Begin_AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Finish_AddRef;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> Begin_Release;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Finish_Release;
        }
    }

    [Guid("00000001-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IClassFactory : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IClassFactory : IClassFactory.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IClassFactory));

        public Vtbl<IClassFactory>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IClassFactory*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IClassFactory*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IClassFactory*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int CreateInstance(IUnknown* pUnkOuter, [NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->CreateInstance((IClassFactory*)Unsafe.AsPointer(ref this), pUnkOuter, riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int LockServer([NativeTypeName("BOOL")] int fLock)
        {
            return lpVtbl->LockServer((IClassFactory*)Unsafe.AsPointer(ref this), fLock);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int CreateInstance(IUnknown* pUnkOuter, [NativeTypeName("const IID &")] Guid* riid, void** ppvObject);

            [return: NativeTypeName("HRESULT")]
            int LockServer([NativeTypeName("BOOL")] int fLock);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (IUnknown *, const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IUnknown*, Guid*, void**, int> CreateInstance;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> LockServer;
        }
    }

    public unsafe partial struct _COSERVERINFO
    {
        [NativeTypeName("DWORD")]
        public uint dwReserved1;

        [NativeTypeName("LPWSTR")]
        public char* pwszName;

        [NativeTypeName("COAUTHINFO *")]
        public _COAUTHINFO* pAuthInfo;

        [NativeTypeName("DWORD")]
        public uint dwReserved2;
    }

    [Guid("00000003-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IMarshal : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IMarshal : IMarshal.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IMarshal));

        public Vtbl<IMarshal>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IMarshal*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IMarshal*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IMarshal*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetUnmarshalClass([NativeTypeName("const IID &")] Guid* riid, void* pv, [NativeTypeName("DWORD")] uint dwDestContext, void* pvDestContext, [NativeTypeName("DWORD")] uint mshlflags, [NativeTypeName("CLSID *")] Guid* pCid)
        {
            return lpVtbl->GetUnmarshalClass((IMarshal*)Unsafe.AsPointer(ref this), riid, pv, dwDestContext, pvDestContext, mshlflags, pCid);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetMarshalSizeMax([NativeTypeName("const IID &")] Guid* riid, void* pv, [NativeTypeName("DWORD")] uint dwDestContext, void* pvDestContext, [NativeTypeName("DWORD")] uint mshlflags, [NativeTypeName("DWORD *")] uint* pSize)
        {
            return lpVtbl->GetMarshalSizeMax((IMarshal*)Unsafe.AsPointer(ref this), riid, pv, dwDestContext, pvDestContext, mshlflags, pSize);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int MarshalInterface(IStream* pStm, [NativeTypeName("const IID &")] Guid* riid, void* pv, [NativeTypeName("DWORD")] uint dwDestContext, void* pvDestContext, [NativeTypeName("DWORD")] uint mshlflags)
        {
            return lpVtbl->MarshalInterface((IMarshal*)Unsafe.AsPointer(ref this), pStm, riid, pv, dwDestContext, pvDestContext, mshlflags);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int UnmarshalInterface(IStream* pStm, [NativeTypeName("const IID &")] Guid* riid, void** ppv)
        {
            return lpVtbl->UnmarshalInterface((IMarshal*)Unsafe.AsPointer(ref this), pStm, riid, ppv);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ReleaseMarshalData(IStream* pStm)
        {
            return lpVtbl->ReleaseMarshalData((IMarshal*)Unsafe.AsPointer(ref this), pStm);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int DisconnectObject([NativeTypeName("DWORD")] uint dwReserved)
        {
            return lpVtbl->DisconnectObject((IMarshal*)Unsafe.AsPointer(ref this), dwReserved);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int GetUnmarshalClass([NativeTypeName("const IID &")] Guid* riid, void* pv, [NativeTypeName("DWORD")] uint dwDestContext, void* pvDestContext, [NativeTypeName("DWORD")] uint mshlflags, [NativeTypeName("CLSID *")] Guid* pCid);

            [return: NativeTypeName("HRESULT")]
            int GetMarshalSizeMax([NativeTypeName("const IID &")] Guid* riid, void* pv, [NativeTypeName("DWORD")] uint dwDestContext, void* pvDestContext, [NativeTypeName("DWORD")] uint mshlflags, [NativeTypeName("DWORD *")] uint* pSize);

            [return: NativeTypeName("HRESULT")]
            int MarshalInterface(IStream* pStm, [NativeTypeName("const IID &")] Guid* riid, void* pv, [NativeTypeName("DWORD")] uint dwDestContext, void* pvDestContext, [NativeTypeName("DWORD")] uint mshlflags);

            [return: NativeTypeName("HRESULT")]
            int UnmarshalInterface(IStream* pStm, [NativeTypeName("const IID &")] Guid* riid, void** ppv);

            [return: NativeTypeName("HRESULT")]
            int ReleaseMarshalData(IStream* pStm);

            [return: NativeTypeName("HRESULT")]
            int DisconnectObject([NativeTypeName("DWORD")] uint dwReserved);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (const IID &, void *, DWORD, void *, DWORD, CLSID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void*, uint, void*, uint, Guid*, int> GetUnmarshalClass;

            [NativeTypeName("HRESULT (const IID &, void *, DWORD, void *, DWORD, DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void*, uint, void*, uint, uint*, int> GetMarshalSizeMax;

            [NativeTypeName("HRESULT (IStream *, const IID &, void *, DWORD, void *, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IStream*, Guid*, void*, uint, void*, uint, int> MarshalInterface;

            [NativeTypeName("HRESULT (IStream *, const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IStream*, Guid*, void**, int> UnmarshalInterface;

            [NativeTypeName("HRESULT (IStream *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IStream*, int> ReleaseMarshalData;

            [NativeTypeName("HRESULT (DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> DisconnectObject;
        }
    }

    [Guid("ECC8691B-C1DB-4DC0-855E-65F6C551AF49")]
    [NativeTypeName("struct INoMarshal : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct INoMarshal : INoMarshal.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_INoMarshal));

        public Vtbl<INoMarshal>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((INoMarshal*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((INoMarshal*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((INoMarshal*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IUnknown.Interface
        {
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;
        }
    }

    [Guid("94EA2B94-E9CC-49E0-C0FF-EE64CA8F5B90")]
    [NativeTypeName("struct IAgileObject : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IAgileObject : IAgileObject.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IAgileObject));

        public Vtbl<IAgileObject>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IAgileObject*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IAgileObject*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IAgileObject*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IUnknown.Interface
        {
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;
        }
    }

    public enum tagACTIVATIONTYPE
    {
        ACTIVATIONTYPE_UNCATEGORIZED = 0,
        ACTIVATIONTYPE_FROM_MONIKER = 0x1,
        ACTIVATIONTYPE_FROM_DATA = 0x2,
        ACTIVATIONTYPE_FROM_STORAGE = 0x4,
        ACTIVATIONTYPE_FROM_STREAM = 0x8,
        ACTIVATIONTYPE_FROM_FILE = 0x10,
    }

    [Guid("00000017-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IActivationFilter : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IActivationFilter : IActivationFilter.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IActivationFilter));

        public Vtbl<IActivationFilter>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IActivationFilter*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IActivationFilter*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IActivationFilter*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int HandleActivation([NativeTypeName("DWORD")] uint dwActivationType, [NativeTypeName("const IID &")] Guid* rclsid, [NativeTypeName("CLSID *")] Guid* pReplacementClsId)
        {
            return lpVtbl->HandleActivation((IActivationFilter*)Unsafe.AsPointer(ref this), dwActivationType, rclsid, pReplacementClsId);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int HandleActivation([NativeTypeName("DWORD")] uint dwActivationType, [NativeTypeName("const IID &")] Guid* rclsid, [NativeTypeName("CLSID *")] Guid* pReplacementClsId);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (DWORD, const IID &, CLSID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, Guid*, Guid*, int> HandleActivation;
        }
    }

    [Guid("000001CF-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IMarshal2 : IMarshal")]
    [NativeInheritance("IMarshal")]
    public unsafe partial struct IMarshal2 : IMarshal2.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IMarshal2));

        public Vtbl<IMarshal2>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IMarshal2*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IMarshal2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IMarshal2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetUnmarshalClass([NativeTypeName("const IID &")] Guid* riid, void* pv, [NativeTypeName("DWORD")] uint dwDestContext, void* pvDestContext, [NativeTypeName("DWORD")] uint mshlflags, [NativeTypeName("CLSID *")] Guid* pCid)
        {
            return lpVtbl->GetUnmarshalClass((IMarshal2*)Unsafe.AsPointer(ref this), riid, pv, dwDestContext, pvDestContext, mshlflags, pCid);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetMarshalSizeMax([NativeTypeName("const IID &")] Guid* riid, void* pv, [NativeTypeName("DWORD")] uint dwDestContext, void* pvDestContext, [NativeTypeName("DWORD")] uint mshlflags, [NativeTypeName("DWORD *")] uint* pSize)
        {
            return lpVtbl->GetMarshalSizeMax((IMarshal2*)Unsafe.AsPointer(ref this), riid, pv, dwDestContext, pvDestContext, mshlflags, pSize);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int MarshalInterface(IStream* pStm, [NativeTypeName("const IID &")] Guid* riid, void* pv, [NativeTypeName("DWORD")] uint dwDestContext, void* pvDestContext, [NativeTypeName("DWORD")] uint mshlflags)
        {
            return lpVtbl->MarshalInterface((IMarshal2*)Unsafe.AsPointer(ref this), pStm, riid, pv, dwDestContext, pvDestContext, mshlflags);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int UnmarshalInterface(IStream* pStm, [NativeTypeName("const IID &")] Guid* riid, void** ppv)
        {
            return lpVtbl->UnmarshalInterface((IMarshal2*)Unsafe.AsPointer(ref this), pStm, riid, ppv);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ReleaseMarshalData(IStream* pStm)
        {
            return lpVtbl->ReleaseMarshalData((IMarshal2*)Unsafe.AsPointer(ref this), pStm);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int DisconnectObject([NativeTypeName("DWORD")] uint dwReserved)
        {
            return lpVtbl->DisconnectObject((IMarshal2*)Unsafe.AsPointer(ref this), dwReserved);
        }

        public interface Interface : IMarshal.Interface
        {
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (const IID &, void *, DWORD, void *, DWORD, CLSID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void*, uint, void*, uint, Guid*, int> GetUnmarshalClass;

            [NativeTypeName("HRESULT (const IID &, void *, DWORD, void *, DWORD, DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void*, uint, void*, uint, uint*, int> GetMarshalSizeMax;

            [NativeTypeName("HRESULT (IStream *, const IID &, void *, DWORD, void *, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IStream*, Guid*, void*, uint, void*, uint, int> MarshalInterface;

            [NativeTypeName("HRESULT (IStream *, const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IStream*, Guid*, void**, int> UnmarshalInterface;

            [NativeTypeName("HRESULT (IStream *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IStream*, int> ReleaseMarshalData;

            [NativeTypeName("HRESULT (DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> DisconnectObject;
        }
    }

    [Guid("00000002-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IMalloc : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IMalloc : IMalloc.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IMalloc));

        public Vtbl<IMalloc>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IMalloc*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IMalloc*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IMalloc*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void* Alloc([NativeTypeName("SIZE_T")] ulong cb)
        {
            return lpVtbl->Alloc((IMalloc*)Unsafe.AsPointer(ref this), cb);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void* Realloc(void* pv, [NativeTypeName("SIZE_T")] ulong cb)
        {
            return lpVtbl->Realloc((IMalloc*)Unsafe.AsPointer(ref this), pv, cb);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Free(void* pv)
        {
            lpVtbl->Free((IMalloc*)Unsafe.AsPointer(ref this), pv);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("SIZE_T")]
        public ulong GetSize(void* pv)
        {
            return lpVtbl->GetSize((IMalloc*)Unsafe.AsPointer(ref this), pv);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int DidAlloc(void* pv)
        {
            return lpVtbl->DidAlloc((IMalloc*)Unsafe.AsPointer(ref this), pv);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void HeapMinimize()
        {
            lpVtbl->HeapMinimize((IMalloc*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IUnknown.Interface
        {
            void* Alloc([NativeTypeName("SIZE_T")] ulong cb);

            void* Realloc(void* pv, [NativeTypeName("SIZE_T")] ulong cb);

            void Free(void* pv);

            [return: NativeTypeName("SIZE_T")]
            ulong GetSize(void* pv);

            int DidAlloc(void* pv);

            void HeapMinimize();
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("void *(SIZE_T) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ulong, void*> Alloc;

            [NativeTypeName("void *(void *, SIZE_T) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*, ulong, void*> Realloc;

            [NativeTypeName("void (void *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*, void> Free;

            [NativeTypeName("SIZE_T (void *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*, ulong> GetSize;

            [NativeTypeName("int (void *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*, int> DidAlloc;

            [NativeTypeName("void () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void> HeapMinimize;
        }
    }

    [Guid("00000018-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IStdMarshalInfo : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IStdMarshalInfo : IStdMarshalInfo.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IStdMarshalInfo));

        public Vtbl<IStdMarshalInfo>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IStdMarshalInfo*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IStdMarshalInfo*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IStdMarshalInfo*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetClassForHandler([NativeTypeName("DWORD")] uint dwDestContext, void* pvDestContext, [NativeTypeName("CLSID *")] Guid* pClsid)
        {
            return lpVtbl->GetClassForHandler((IStdMarshalInfo*)Unsafe.AsPointer(ref this), dwDestContext, pvDestContext, pClsid);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int GetClassForHandler([NativeTypeName("DWORD")] uint dwDestContext, void* pvDestContext, [NativeTypeName("CLSID *")] Guid* pClsid);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (DWORD, void *, CLSID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, void*, Guid*, int> GetClassForHandler;
        }
    }

    public enum tagEXTCONN
    {
        EXTCONN_STRONG = 0x1,
        EXTCONN_WEAK = 0x2,
        EXTCONN_CALLABLE = 0x4,
    }

    [Guid("00000019-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IExternalConnection : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IExternalConnection : IExternalConnection.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IExternalConnection));

        public Vtbl<IExternalConnection>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IExternalConnection*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IExternalConnection*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IExternalConnection*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("DWORD")]
        public uint AddConnection([NativeTypeName("DWORD")] uint extconn, [NativeTypeName("DWORD")] uint reserved)
        {
            return lpVtbl->AddConnection((IExternalConnection*)Unsafe.AsPointer(ref this), extconn, reserved);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("DWORD")]
        public uint ReleaseConnection([NativeTypeName("DWORD")] uint extconn, [NativeTypeName("DWORD")] uint reserved, [NativeTypeName("BOOL")] int fLastReleaseCloses)
        {
            return lpVtbl->ReleaseConnection((IExternalConnection*)Unsafe.AsPointer(ref this), extconn, reserved, fLastReleaseCloses);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("DWORD")]
            uint AddConnection([NativeTypeName("DWORD")] uint extconn, [NativeTypeName("DWORD")] uint reserved);

            [return: NativeTypeName("DWORD")]
            uint ReleaseConnection([NativeTypeName("DWORD")] uint extconn, [NativeTypeName("DWORD")] uint reserved, [NativeTypeName("BOOL")] int fLastReleaseCloses);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("DWORD (DWORD, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint, uint> AddConnection;

            [NativeTypeName("DWORD (DWORD, DWORD, BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint, int, uint> ReleaseConnection;
        }
    }

    public unsafe partial struct tagMULTI_QI
    {
        [NativeTypeName("const IID *")]
        public Guid* pIID;

        public IUnknown* pItf;

        [NativeTypeName("HRESULT")]
        public int hr;
    }

    [Guid("00000020-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IMultiQI : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IMultiQI : IMultiQI.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IMultiQI));

        public Vtbl<IMultiQI>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IMultiQI*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IMultiQI*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IMultiQI*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryMultipleInterfaces([NativeTypeName("ULONG")] uint cMQIs, [NativeTypeName("MULTI_QI *")] tagMULTI_QI* pMQIs)
        {
            return lpVtbl->QueryMultipleInterfaces((IMultiQI*)Unsafe.AsPointer(ref this), cMQIs, pMQIs);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int QueryMultipleInterfaces([NativeTypeName("ULONG")] uint cMQIs, [NativeTypeName("MULTI_QI *")] tagMULTI_QI* pMQIs);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (ULONG, MULTI_QI *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, tagMULTI_QI*, int> QueryMultipleInterfaces;
        }
    }

    [Guid("000E0020-0000-0000-C000-000000000046")]
    [NativeTypeName("struct AsyncIMultiQI : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct AsyncIMultiQI : AsyncIMultiQI.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_AsyncIMultiQI));

        public Vtbl<AsyncIMultiQI>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((AsyncIMultiQI*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((AsyncIMultiQI*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((AsyncIMultiQI*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Begin_QueryMultipleInterfaces([NativeTypeName("ULONG")] uint cMQIs, [NativeTypeName("MULTI_QI *")] tagMULTI_QI* pMQIs)
        {
            return lpVtbl->Begin_QueryMultipleInterfaces((AsyncIMultiQI*)Unsafe.AsPointer(ref this), cMQIs, pMQIs);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Finish_QueryMultipleInterfaces([NativeTypeName("MULTI_QI *")] tagMULTI_QI* pMQIs)
        {
            return lpVtbl->Finish_QueryMultipleInterfaces((AsyncIMultiQI*)Unsafe.AsPointer(ref this), pMQIs);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Begin_QueryMultipleInterfaces([NativeTypeName("ULONG")] uint cMQIs, [NativeTypeName("MULTI_QI *")] tagMULTI_QI* pMQIs);

            [return: NativeTypeName("HRESULT")]
            int Finish_QueryMultipleInterfaces([NativeTypeName("MULTI_QI *")] tagMULTI_QI* pMQIs);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (ULONG, MULTI_QI *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, tagMULTI_QI*, int> Begin_QueryMultipleInterfaces;

            [NativeTypeName("HRESULT (MULTI_QI *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagMULTI_QI*, int> Finish_QueryMultipleInterfaces;
        }
    }

    [Guid("00000021-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IInternalUnknown : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IInternalUnknown : IInternalUnknown.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IInternalUnknown));

        public Vtbl<IInternalUnknown>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IInternalUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IInternalUnknown*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IInternalUnknown*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInternalInterface([NativeTypeName("const IID &")] Guid* riid, void** ppv)
        {
            return lpVtbl->QueryInternalInterface((IInternalUnknown*)Unsafe.AsPointer(ref this), riid, ppv);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int QueryInternalInterface([NativeTypeName("const IID &")] Guid* riid, void** ppv);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInternalInterface;
        }
    }

    [Guid("00000100-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IEnumUnknown : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IEnumUnknown : IEnumUnknown.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IEnumUnknown));

        public Vtbl<IEnumUnknown>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IEnumUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IEnumUnknown*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IEnumUnknown*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Next([NativeTypeName("ULONG")] uint celt, IUnknown** rgelt, [NativeTypeName("ULONG *")] uint* pceltFetched)
        {
            return lpVtbl->Next((IEnumUnknown*)Unsafe.AsPointer(ref this), celt, rgelt, pceltFetched);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Skip([NativeTypeName("ULONG")] uint celt)
        {
            return lpVtbl->Skip((IEnumUnknown*)Unsafe.AsPointer(ref this), celt);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Reset()
        {
            return lpVtbl->Reset((IEnumUnknown*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Clone(IEnumUnknown** ppenum)
        {
            return lpVtbl->Clone((IEnumUnknown*)Unsafe.AsPointer(ref this), ppenum);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Next([NativeTypeName("ULONG")] uint celt, IUnknown** rgelt, [NativeTypeName("ULONG *")] uint* pceltFetched);

            [return: NativeTypeName("HRESULT")]
            int Skip([NativeTypeName("ULONG")] uint celt);

            [return: NativeTypeName("HRESULT")]
            int Reset();

            [return: NativeTypeName("HRESULT")]
            int Clone(IEnumUnknown** ppenum);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (ULONG, IUnknown **, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, IUnknown**, uint*, int> Next;

            [NativeTypeName("HRESULT (ULONG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> Skip;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> Reset;

            [NativeTypeName("HRESULT (IEnumUnknown **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IEnumUnknown**, int> Clone;
        }
    }

    [Guid("00000101-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IEnumString : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IEnumString : IEnumString.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IEnumString));

        public Vtbl<IEnumString>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IEnumString*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IEnumString*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IEnumString*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Next([NativeTypeName("ULONG")] uint celt, [NativeTypeName("LPOLESTR *")] char** rgelt, [NativeTypeName("ULONG *")] uint* pceltFetched)
        {
            return lpVtbl->Next((IEnumString*)Unsafe.AsPointer(ref this), celt, rgelt, pceltFetched);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Skip([NativeTypeName("ULONG")] uint celt)
        {
            return lpVtbl->Skip((IEnumString*)Unsafe.AsPointer(ref this), celt);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Reset()
        {
            return lpVtbl->Reset((IEnumString*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Clone(IEnumString** ppenum)
        {
            return lpVtbl->Clone((IEnumString*)Unsafe.AsPointer(ref this), ppenum);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Next([NativeTypeName("ULONG")] uint celt, [NativeTypeName("LPOLESTR *")] char** rgelt, [NativeTypeName("ULONG *")] uint* pceltFetched);

            [return: NativeTypeName("HRESULT")]
            int Skip([NativeTypeName("ULONG")] uint celt);

            [return: NativeTypeName("HRESULT")]
            int Reset();

            [return: NativeTypeName("HRESULT")]
            int Clone(IEnumString** ppenum);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (ULONG, LPOLESTR *, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, char**, uint*, int> Next;

            [NativeTypeName("HRESULT (ULONG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> Skip;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> Reset;

            [NativeTypeName("HRESULT (IEnumString **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IEnumString**, int> Clone;
        }
    }

    [Guid("0C733A30-2A1C-11CE-ADE5-00AA0044773D")]
    [NativeTypeName("struct ISequentialStream : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ISequentialStream : ISequentialStream.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ISequentialStream));

        public Vtbl<ISequentialStream>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((ISequentialStream*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((ISequentialStream*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((ISequentialStream*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Read(void* pv, [NativeTypeName("ULONG")] uint cb, [NativeTypeName("ULONG *")] uint* pcbRead)
        {
            return lpVtbl->Read((ISequentialStream*)Unsafe.AsPointer(ref this), pv, cb, pcbRead);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Write([NativeTypeName("const void *")] void* pv, [NativeTypeName("ULONG")] uint cb, [NativeTypeName("ULONG *")] uint* pcbWritten)
        {
            return lpVtbl->Write((ISequentialStream*)Unsafe.AsPointer(ref this), pv, cb, pcbWritten);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Read(void* pv, [NativeTypeName("ULONG")] uint cb, [NativeTypeName("ULONG *")] uint* pcbRead);

            [return: NativeTypeName("HRESULT")]
            int Write([NativeTypeName("const void *")] void* pv, [NativeTypeName("ULONG")] uint cb, [NativeTypeName("ULONG *")] uint* pcbWritten);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (void *, ULONG, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*, uint, uint*, int> Read;

            [NativeTypeName("HRESULT (const void *, ULONG, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*, uint, uint*, int> Write;
        }
    }

    public unsafe partial struct tagSTATSTG
    {
        [NativeTypeName("LPOLESTR")]
        public char* pwcsName;

        [NativeTypeName("DWORD")]
        public uint type;

        [NativeTypeName("ULARGE_INTEGER")]
        public ulong cbSize;

        public FILETIME mtime;

        public FILETIME ctime;

        public FILETIME atime;

        [NativeTypeName("DWORD")]
        public uint grfMode;

        [NativeTypeName("DWORD")]
        public uint grfLocksSupported;

        [NativeTypeName("CLSID")]
        public Guid clsid;

        [NativeTypeName("DWORD")]
        public uint grfStateBits;

        [NativeTypeName("DWORD")]
        public uint reserved;
    }

    public enum tagSTGTY
    {
        STGTY_STORAGE = 1,
        STGTY_STREAM = 2,
        STGTY_LOCKBYTES = 3,
        STGTY_PROPERTY = 4,
    }

    public enum tagSTREAM_SEEK
    {
        STREAM_SEEK_SET = 0,
        STREAM_SEEK_CUR = 1,
        STREAM_SEEK_END = 2,
    }

    public enum tagLOCKTYPE
    {
        LOCK_WRITE = 1,
        LOCK_EXCLUSIVE = 2,
        LOCK_ONLYONCE = 4,
    }

    [Guid("0000000C-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IStream : ISequentialStream")]
    [NativeInheritance("ISequentialStream")]
    public unsafe partial struct IStream : IStream.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IStream));

        public Vtbl<IStream>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IStream*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IStream*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IStream*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Read(void* pv, [NativeTypeName("ULONG")] uint cb, [NativeTypeName("ULONG *")] uint* pcbRead)
        {
            return lpVtbl->Read((IStream*)Unsafe.AsPointer(ref this), pv, cb, pcbRead);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Write([NativeTypeName("const void *")] void* pv, [NativeTypeName("ULONG")] uint cb, [NativeTypeName("ULONG *")] uint* pcbWritten)
        {
            return lpVtbl->Write((IStream*)Unsafe.AsPointer(ref this), pv, cb, pcbWritten);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Seek([NativeTypeName("LARGE_INTEGER")] long dlibMove, [NativeTypeName("DWORD")] uint dwOrigin, [NativeTypeName("ULARGE_INTEGER *")] ulong* plibNewPosition)
        {
            return lpVtbl->Seek((IStream*)Unsafe.AsPointer(ref this), dlibMove, dwOrigin, plibNewPosition);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetSize([NativeTypeName("ULARGE_INTEGER")] ulong libNewSize)
        {
            return lpVtbl->SetSize((IStream*)Unsafe.AsPointer(ref this), libNewSize);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int CopyTo(IStream* pstm, [NativeTypeName("ULARGE_INTEGER")] ulong cb, [NativeTypeName("ULARGE_INTEGER *")] ulong* pcbRead, [NativeTypeName("ULARGE_INTEGER *")] ulong* pcbWritten)
        {
            return lpVtbl->CopyTo((IStream*)Unsafe.AsPointer(ref this), pstm, cb, pcbRead, pcbWritten);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Commit([NativeTypeName("DWORD")] uint grfCommitFlags)
        {
            return lpVtbl->Commit((IStream*)Unsafe.AsPointer(ref this), grfCommitFlags);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Revert()
        {
            return lpVtbl->Revert((IStream*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int LockRegion([NativeTypeName("ULARGE_INTEGER")] ulong libOffset, [NativeTypeName("ULARGE_INTEGER")] ulong cb, [NativeTypeName("DWORD")] uint dwLockType)
        {
            return lpVtbl->LockRegion((IStream*)Unsafe.AsPointer(ref this), libOffset, cb, dwLockType);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int UnlockRegion([NativeTypeName("ULARGE_INTEGER")] ulong libOffset, [NativeTypeName("ULARGE_INTEGER")] ulong cb, [NativeTypeName("DWORD")] uint dwLockType)
        {
            return lpVtbl->UnlockRegion((IStream*)Unsafe.AsPointer(ref this), libOffset, cb, dwLockType);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Stat([NativeTypeName("STATSTG *")] tagSTATSTG* pstatstg, [NativeTypeName("DWORD")] uint grfStatFlag)
        {
            return lpVtbl->Stat((IStream*)Unsafe.AsPointer(ref this), pstatstg, grfStatFlag);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Clone(IStream** ppstm)
        {
            return lpVtbl->Clone((IStream*)Unsafe.AsPointer(ref this), ppstm);
        }

        public interface Interface : ISequentialStream.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Seek([NativeTypeName("LARGE_INTEGER")] long dlibMove, [NativeTypeName("DWORD")] uint dwOrigin, [NativeTypeName("ULARGE_INTEGER *")] ulong* plibNewPosition);

            [return: NativeTypeName("HRESULT")]
            int SetSize([NativeTypeName("ULARGE_INTEGER")] ulong libNewSize);

            [return: NativeTypeName("HRESULT")]
            int CopyTo(IStream* pstm, [NativeTypeName("ULARGE_INTEGER")] ulong cb, [NativeTypeName("ULARGE_INTEGER *")] ulong* pcbRead, [NativeTypeName("ULARGE_INTEGER *")] ulong* pcbWritten);

            [return: NativeTypeName("HRESULT")]
            int Commit([NativeTypeName("DWORD")] uint grfCommitFlags);

            [return: NativeTypeName("HRESULT")]
            int Revert();

            [return: NativeTypeName("HRESULT")]
            int LockRegion([NativeTypeName("ULARGE_INTEGER")] ulong libOffset, [NativeTypeName("ULARGE_INTEGER")] ulong cb, [NativeTypeName("DWORD")] uint dwLockType);

            [return: NativeTypeName("HRESULT")]
            int UnlockRegion([NativeTypeName("ULARGE_INTEGER")] ulong libOffset, [NativeTypeName("ULARGE_INTEGER")] ulong cb, [NativeTypeName("DWORD")] uint dwLockType);

            [return: NativeTypeName("HRESULT")]
            int Stat([NativeTypeName("STATSTG *")] tagSTATSTG* pstatstg, [NativeTypeName("DWORD")] uint grfStatFlag);

            [return: NativeTypeName("HRESULT")]
            int Clone(IStream** ppstm);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (void *, ULONG, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*, uint, uint*, int> Read;

            [NativeTypeName("HRESULT (const void *, ULONG, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*, uint, uint*, int> Write;

            [NativeTypeName("HRESULT (LARGE_INTEGER, DWORD, ULARGE_INTEGER *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, long, uint, ulong*, int> Seek;

            [NativeTypeName("HRESULT (ULARGE_INTEGER) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ulong, int> SetSize;

            [NativeTypeName("HRESULT (IStream *, ULARGE_INTEGER, ULARGE_INTEGER *, ULARGE_INTEGER *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IStream*, ulong, ulong*, ulong*, int> CopyTo;

            [NativeTypeName("HRESULT (DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> Commit;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> Revert;

            [NativeTypeName("HRESULT (ULARGE_INTEGER, ULARGE_INTEGER, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ulong, ulong, uint, int> LockRegion;

            [NativeTypeName("HRESULT (ULARGE_INTEGER, ULARGE_INTEGER, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ulong, ulong, uint, int> UnlockRegion;

            [NativeTypeName("HRESULT (STATSTG *, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagSTATSTG*, uint, int> Stat;

            [NativeTypeName("HRESULT (IStream **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IStream**, int> Clone;
        }
    }

    public unsafe partial struct tagRPCOLEMESSAGE
    {
        public void* reserved1;

        [NativeTypeName("RPCOLEDATAREP")]
        public uint dataRepresentation;

        public void* Buffer;

        [NativeTypeName("ULONG")]
        public uint cbBuffer;

        [NativeTypeName("ULONG")]
        public uint iMethod;

        [NativeTypeName("void *[5]")]
        public _reserved2_e__FixedBuffer reserved2;

        [NativeTypeName("ULONG")]
        public uint rpcFlags;

        public unsafe partial struct _reserved2_e__FixedBuffer
        {
            public void* e0;
            public void* e1;
            public void* e2;
            public void* e3;
            public void* e4;

            public ref void* this[int index]
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get
                {
                    fixed (void** pThis = &e0)
                    {
                        return ref pThis[index];
                    }
                }
            }
        }
    }

    [Guid("D5F56B60-593B-101A-B569-08002B2DBF7A")]
    [NativeTypeName("struct IRpcChannelBuffer : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IRpcChannelBuffer : IRpcChannelBuffer.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IRpcChannelBuffer));

        public Vtbl<IRpcChannelBuffer>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IRpcChannelBuffer*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IRpcChannelBuffer*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IRpcChannelBuffer*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetBuffer([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMessage, [NativeTypeName("const IID &")] Guid* riid)
        {
            return lpVtbl->GetBuffer((IRpcChannelBuffer*)Unsafe.AsPointer(ref this), pMessage, riid);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SendReceive([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMessage, [NativeTypeName("ULONG *")] uint* pStatus)
        {
            return lpVtbl->SendReceive((IRpcChannelBuffer*)Unsafe.AsPointer(ref this), pMessage, pStatus);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int FreeBuffer([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMessage)
        {
            return lpVtbl->FreeBuffer((IRpcChannelBuffer*)Unsafe.AsPointer(ref this), pMessage);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetDestCtx([NativeTypeName("DWORD *")] uint* pdwDestContext, void** ppvDestContext)
        {
            return lpVtbl->GetDestCtx((IRpcChannelBuffer*)Unsafe.AsPointer(ref this), pdwDestContext, ppvDestContext);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int IsConnected()
        {
            return lpVtbl->IsConnected((IRpcChannelBuffer*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int GetBuffer([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMessage, [NativeTypeName("const IID &")] Guid* riid);

            [return: NativeTypeName("HRESULT")]
            int SendReceive([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMessage, [NativeTypeName("ULONG *")] uint* pStatus);

            [return: NativeTypeName("HRESULT")]
            int FreeBuffer([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMessage);

            [return: NativeTypeName("HRESULT")]
            int GetDestCtx([NativeTypeName("DWORD *")] uint* pdwDestContext, void** ppvDestContext);

            [return: NativeTypeName("HRESULT")]
            int IsConnected();
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (RPCOLEMESSAGE *, const IID &) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagRPCOLEMESSAGE*, Guid*, int> GetBuffer;

            [NativeTypeName("HRESULT (RPCOLEMESSAGE *, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagRPCOLEMESSAGE*, uint*, int> SendReceive;

            [NativeTypeName("HRESULT (RPCOLEMESSAGE *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagRPCOLEMESSAGE*, int> FreeBuffer;

            [NativeTypeName("HRESULT (DWORD *, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, void**, int> GetDestCtx;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> IsConnected;
        }
    }

    [Guid("594F31D0-7F19-11D0-B194-00A0C90DC8BF")]
    [NativeTypeName("struct IRpcChannelBuffer2 : IRpcChannelBuffer")]
    [NativeInheritance("IRpcChannelBuffer")]
    public unsafe partial struct IRpcChannelBuffer2 : IRpcChannelBuffer2.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IRpcChannelBuffer2));

        public Vtbl<IRpcChannelBuffer2>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IRpcChannelBuffer2*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IRpcChannelBuffer2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IRpcChannelBuffer2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetBuffer([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMessage, [NativeTypeName("const IID &")] Guid* riid)
        {
            return lpVtbl->GetBuffer((IRpcChannelBuffer2*)Unsafe.AsPointer(ref this), pMessage, riid);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SendReceive([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMessage, [NativeTypeName("ULONG *")] uint* pStatus)
        {
            return lpVtbl->SendReceive((IRpcChannelBuffer2*)Unsafe.AsPointer(ref this), pMessage, pStatus);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int FreeBuffer([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMessage)
        {
            return lpVtbl->FreeBuffer((IRpcChannelBuffer2*)Unsafe.AsPointer(ref this), pMessage);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetDestCtx([NativeTypeName("DWORD *")] uint* pdwDestContext, void** ppvDestContext)
        {
            return lpVtbl->GetDestCtx((IRpcChannelBuffer2*)Unsafe.AsPointer(ref this), pdwDestContext, ppvDestContext);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int IsConnected()
        {
            return lpVtbl->IsConnected((IRpcChannelBuffer2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetProtocolVersion([NativeTypeName("DWORD *")] uint* pdwVersion)
        {
            return lpVtbl->GetProtocolVersion((IRpcChannelBuffer2*)Unsafe.AsPointer(ref this), pdwVersion);
        }

        public interface Interface : IRpcChannelBuffer.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int GetProtocolVersion([NativeTypeName("DWORD *")] uint* pdwVersion);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (RPCOLEMESSAGE *, const IID &) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagRPCOLEMESSAGE*, Guid*, int> GetBuffer;

            [NativeTypeName("HRESULT (RPCOLEMESSAGE *, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagRPCOLEMESSAGE*, uint*, int> SendReceive;

            [NativeTypeName("HRESULT (RPCOLEMESSAGE *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagRPCOLEMESSAGE*, int> FreeBuffer;

            [NativeTypeName("HRESULT (DWORD *, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, void**, int> GetDestCtx;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> IsConnected;

            [NativeTypeName("HRESULT (DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, int> GetProtocolVersion;
        }
    }

    [Guid("A5029FB6-3C34-11D1-9C99-00C04FB998AA")]
    [NativeTypeName("struct IAsyncRpcChannelBuffer : IRpcChannelBuffer2")]
    [NativeInheritance("IRpcChannelBuffer2")]
    public unsafe partial struct IAsyncRpcChannelBuffer : IAsyncRpcChannelBuffer.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IAsyncRpcChannelBuffer));

        public Vtbl<IAsyncRpcChannelBuffer>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IAsyncRpcChannelBuffer*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IAsyncRpcChannelBuffer*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IAsyncRpcChannelBuffer*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetBuffer([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMessage, [NativeTypeName("const IID &")] Guid* riid)
        {
            return lpVtbl->GetBuffer((IAsyncRpcChannelBuffer*)Unsafe.AsPointer(ref this), pMessage, riid);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SendReceive([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMessage, [NativeTypeName("ULONG *")] uint* pStatus)
        {
            return lpVtbl->SendReceive((IAsyncRpcChannelBuffer*)Unsafe.AsPointer(ref this), pMessage, pStatus);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int FreeBuffer([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMessage)
        {
            return lpVtbl->FreeBuffer((IAsyncRpcChannelBuffer*)Unsafe.AsPointer(ref this), pMessage);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetDestCtx([NativeTypeName("DWORD *")] uint* pdwDestContext, void** ppvDestContext)
        {
            return lpVtbl->GetDestCtx((IAsyncRpcChannelBuffer*)Unsafe.AsPointer(ref this), pdwDestContext, ppvDestContext);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int IsConnected()
        {
            return lpVtbl->IsConnected((IAsyncRpcChannelBuffer*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetProtocolVersion([NativeTypeName("DWORD *")] uint* pdwVersion)
        {
            return lpVtbl->GetProtocolVersion((IAsyncRpcChannelBuffer*)Unsafe.AsPointer(ref this), pdwVersion);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Send([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMsg, ISynchronize* pSync, [NativeTypeName("ULONG *")] uint* pulStatus)
        {
            return lpVtbl->Send((IAsyncRpcChannelBuffer*)Unsafe.AsPointer(ref this), pMsg, pSync, pulStatus);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Receive([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMsg, [NativeTypeName("ULONG *")] uint* pulStatus)
        {
            return lpVtbl->Receive((IAsyncRpcChannelBuffer*)Unsafe.AsPointer(ref this), pMsg, pulStatus);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetDestCtxEx([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMsg, [NativeTypeName("DWORD *")] uint* pdwDestContext, void** ppvDestContext)
        {
            return lpVtbl->GetDestCtxEx((IAsyncRpcChannelBuffer*)Unsafe.AsPointer(ref this), pMsg, pdwDestContext, ppvDestContext);
        }

        public interface Interface : IRpcChannelBuffer2.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Send([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMsg, ISynchronize* pSync, [NativeTypeName("ULONG *")] uint* pulStatus);

            [return: NativeTypeName("HRESULT")]
            int Receive([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMsg, [NativeTypeName("ULONG *")] uint* pulStatus);

            [return: NativeTypeName("HRESULT")]
            int GetDestCtxEx([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMsg, [NativeTypeName("DWORD *")] uint* pdwDestContext, void** ppvDestContext);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (RPCOLEMESSAGE *, const IID &) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagRPCOLEMESSAGE*, Guid*, int> GetBuffer;

            [NativeTypeName("HRESULT (RPCOLEMESSAGE *, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagRPCOLEMESSAGE*, uint*, int> SendReceive;

            [NativeTypeName("HRESULT (RPCOLEMESSAGE *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagRPCOLEMESSAGE*, int> FreeBuffer;

            [NativeTypeName("HRESULT (DWORD *, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, void**, int> GetDestCtx;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> IsConnected;

            [NativeTypeName("HRESULT (DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, int> GetProtocolVersion;

            [NativeTypeName("HRESULT (RPCOLEMESSAGE *, ISynchronize *, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagRPCOLEMESSAGE*, ISynchronize*, uint*, int> Send;

            [NativeTypeName("HRESULT (RPCOLEMESSAGE *, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagRPCOLEMESSAGE*, uint*, int> Receive;

            [NativeTypeName("HRESULT (RPCOLEMESSAGE *, DWORD *, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagRPCOLEMESSAGE*, uint*, void**, int> GetDestCtxEx;
        }
    }

    [Guid("25B15600-0115-11D0-BF0D-00AA00B8DFD2")]
    [NativeTypeName("struct IRpcChannelBuffer3 : IRpcChannelBuffer2")]
    [NativeInheritance("IRpcChannelBuffer2")]
    public unsafe partial struct IRpcChannelBuffer3 : IRpcChannelBuffer3.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IRpcChannelBuffer3));

        public Vtbl<IRpcChannelBuffer3>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IRpcChannelBuffer3*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IRpcChannelBuffer3*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IRpcChannelBuffer3*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetBuffer([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMessage, [NativeTypeName("const IID &")] Guid* riid)
        {
            return lpVtbl->GetBuffer((IRpcChannelBuffer3*)Unsafe.AsPointer(ref this), pMessage, riid);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SendReceive([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMessage, [NativeTypeName("ULONG *")] uint* pStatus)
        {
            return lpVtbl->SendReceive((IRpcChannelBuffer3*)Unsafe.AsPointer(ref this), pMessage, pStatus);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int FreeBuffer([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMessage)
        {
            return lpVtbl->FreeBuffer((IRpcChannelBuffer3*)Unsafe.AsPointer(ref this), pMessage);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetDestCtx([NativeTypeName("DWORD *")] uint* pdwDestContext, void** ppvDestContext)
        {
            return lpVtbl->GetDestCtx((IRpcChannelBuffer3*)Unsafe.AsPointer(ref this), pdwDestContext, ppvDestContext);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int IsConnected()
        {
            return lpVtbl->IsConnected((IRpcChannelBuffer3*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetProtocolVersion([NativeTypeName("DWORD *")] uint* pdwVersion)
        {
            return lpVtbl->GetProtocolVersion((IRpcChannelBuffer3*)Unsafe.AsPointer(ref this), pdwVersion);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Send([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMsg, [NativeTypeName("ULONG *")] uint* pulStatus)
        {
            return lpVtbl->Send((IRpcChannelBuffer3*)Unsafe.AsPointer(ref this), pMsg, pulStatus);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Receive([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMsg, [NativeTypeName("ULONG")] uint ulSize, [NativeTypeName("ULONG *")] uint* pulStatus)
        {
            return lpVtbl->Receive((IRpcChannelBuffer3*)Unsafe.AsPointer(ref this), pMsg, ulSize, pulStatus);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Cancel([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMsg)
        {
            return lpVtbl->Cancel((IRpcChannelBuffer3*)Unsafe.AsPointer(ref this), pMsg);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetCallContext([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMsg, [NativeTypeName("const IID &")] Guid* riid, void** pInterface)
        {
            return lpVtbl->GetCallContext((IRpcChannelBuffer3*)Unsafe.AsPointer(ref this), pMsg, riid, pInterface);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetDestCtxEx([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMsg, [NativeTypeName("DWORD *")] uint* pdwDestContext, void** ppvDestContext)
        {
            return lpVtbl->GetDestCtxEx((IRpcChannelBuffer3*)Unsafe.AsPointer(ref this), pMsg, pdwDestContext, ppvDestContext);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetState([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMsg, [NativeTypeName("DWORD *")] uint* pState)
        {
            return lpVtbl->GetState((IRpcChannelBuffer3*)Unsafe.AsPointer(ref this), pMsg, pState);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int RegisterAsync([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMsg, IAsyncManager* pAsyncMgr)
        {
            return lpVtbl->RegisterAsync((IRpcChannelBuffer3*)Unsafe.AsPointer(ref this), pMsg, pAsyncMgr);
        }

        public interface Interface : IRpcChannelBuffer2.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Send([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMsg, [NativeTypeName("ULONG *")] uint* pulStatus);

            [return: NativeTypeName("HRESULT")]
            int Receive([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMsg, [NativeTypeName("ULONG")] uint ulSize, [NativeTypeName("ULONG *")] uint* pulStatus);

            [return: NativeTypeName("HRESULT")]
            int Cancel([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMsg);

            [return: NativeTypeName("HRESULT")]
            int GetCallContext([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMsg, [NativeTypeName("const IID &")] Guid* riid, void** pInterface);

            [return: NativeTypeName("HRESULT")]
            int GetDestCtxEx([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMsg, [NativeTypeName("DWORD *")] uint* pdwDestContext, void** ppvDestContext);

            [return: NativeTypeName("HRESULT")]
            int GetState([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMsg, [NativeTypeName("DWORD *")] uint* pState);

            [return: NativeTypeName("HRESULT")]
            int RegisterAsync([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMsg, IAsyncManager* pAsyncMgr);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (RPCOLEMESSAGE *, const IID &) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagRPCOLEMESSAGE*, Guid*, int> GetBuffer;

            [NativeTypeName("HRESULT (RPCOLEMESSAGE *, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagRPCOLEMESSAGE*, uint*, int> SendReceive;

            [NativeTypeName("HRESULT (RPCOLEMESSAGE *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagRPCOLEMESSAGE*, int> FreeBuffer;

            [NativeTypeName("HRESULT (DWORD *, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, void**, int> GetDestCtx;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> IsConnected;

            [NativeTypeName("HRESULT (DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, int> GetProtocolVersion;

            [NativeTypeName("HRESULT (RPCOLEMESSAGE *, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagRPCOLEMESSAGE*, uint*, int> Send;

            [NativeTypeName("HRESULT (RPCOLEMESSAGE *, ULONG, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagRPCOLEMESSAGE*, uint, uint*, int> Receive;

            [NativeTypeName("HRESULT (RPCOLEMESSAGE *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagRPCOLEMESSAGE*, int> Cancel;

            [NativeTypeName("HRESULT (RPCOLEMESSAGE *, const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagRPCOLEMESSAGE*, Guid*, void**, int> GetCallContext;

            [NativeTypeName("HRESULT (RPCOLEMESSAGE *, DWORD *, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagRPCOLEMESSAGE*, uint*, void**, int> GetDestCtxEx;

            [NativeTypeName("HRESULT (RPCOLEMESSAGE *, DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagRPCOLEMESSAGE*, uint*, int> GetState;

            [NativeTypeName("HRESULT (RPCOLEMESSAGE *, IAsyncManager *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagRPCOLEMESSAGE*, IAsyncManager*, int> RegisterAsync;
        }
    }

    [Guid("58A08519-24C8-4935-B482-3FD823333A4F")]
    [NativeTypeName("struct IRpcSyntaxNegotiate : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IRpcSyntaxNegotiate : IRpcSyntaxNegotiate.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IRpcSyntaxNegotiate));

        public Vtbl<IRpcSyntaxNegotiate>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IRpcSyntaxNegotiate*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IRpcSyntaxNegotiate*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IRpcSyntaxNegotiate*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int NegotiateSyntax([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMsg)
        {
            return lpVtbl->NegotiateSyntax((IRpcSyntaxNegotiate*)Unsafe.AsPointer(ref this), pMsg);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int NegotiateSyntax([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMsg);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (RPCOLEMESSAGE *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagRPCOLEMESSAGE*, int> NegotiateSyntax;
        }
    }

    [Guid("D5F56A34-593B-101A-B569-08002B2DBF7A")]
    [NativeTypeName("struct IRpcProxyBuffer : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IRpcProxyBuffer : IRpcProxyBuffer.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IRpcProxyBuffer));

        public Vtbl<IRpcProxyBuffer>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IRpcProxyBuffer*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IRpcProxyBuffer*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IRpcProxyBuffer*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Connect(IRpcChannelBuffer* pRpcChannelBuffer)
        {
            return lpVtbl->Connect((IRpcProxyBuffer*)Unsafe.AsPointer(ref this), pRpcChannelBuffer);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Disconnect()
        {
            lpVtbl->Disconnect((IRpcProxyBuffer*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Connect(IRpcChannelBuffer* pRpcChannelBuffer);

            void Disconnect();
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (IRpcChannelBuffer *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IRpcChannelBuffer*, int> Connect;

            [NativeTypeName("void () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void> Disconnect;
        }
    }

    [Guid("D5F56AFC-593B-101A-B569-08002B2DBF7A")]
    [NativeTypeName("struct IRpcStubBuffer : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IRpcStubBuffer : IRpcStubBuffer.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IRpcStubBuffer));

        public Vtbl<IRpcStubBuffer>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IRpcStubBuffer*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IRpcStubBuffer*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IRpcStubBuffer*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Connect(IUnknown* pUnkServer)
        {
            return lpVtbl->Connect((IRpcStubBuffer*)Unsafe.AsPointer(ref this), pUnkServer);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Disconnect()
        {
            lpVtbl->Disconnect((IRpcStubBuffer*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Invoke([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* _prpcmsg, IRpcChannelBuffer* _pRpcChannelBuffer)
        {
            return lpVtbl->Invoke((IRpcStubBuffer*)Unsafe.AsPointer(ref this), _prpcmsg, _pRpcChannelBuffer);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IRpcStubBuffer* IsIIDSupported([NativeTypeName("const IID &")] Guid* riid)
        {
            return lpVtbl->IsIIDSupported((IRpcStubBuffer*)Unsafe.AsPointer(ref this), riid);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint CountRefs()
        {
            return lpVtbl->CountRefs((IRpcStubBuffer*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int DebugServerQueryInterface(void** ppv)
        {
            return lpVtbl->DebugServerQueryInterface((IRpcStubBuffer*)Unsafe.AsPointer(ref this), ppv);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void DebugServerRelease(void* pv)
        {
            lpVtbl->DebugServerRelease((IRpcStubBuffer*)Unsafe.AsPointer(ref this), pv);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Connect(IUnknown* pUnkServer);

            void Disconnect();

            [return: NativeTypeName("HRESULT")]
            int Invoke([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* _prpcmsg, IRpcChannelBuffer* _pRpcChannelBuffer);

            IRpcStubBuffer* IsIIDSupported([NativeTypeName("const IID &")] Guid* riid);

            [return: NativeTypeName("ULONG")]
            uint CountRefs();

            [return: NativeTypeName("HRESULT")]
            int DebugServerQueryInterface(void** ppv);

            void DebugServerRelease(void* pv);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (IUnknown *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IUnknown*, int> Connect;

            [NativeTypeName("void () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void> Disconnect;

            [NativeTypeName("HRESULT (RPCOLEMESSAGE *, IRpcChannelBuffer *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagRPCOLEMESSAGE*, IRpcChannelBuffer*, int> Invoke;

            [NativeTypeName("IRpcStubBuffer *(const IID &) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, IRpcStubBuffer*> IsIIDSupported;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> CountRefs;

            [NativeTypeName("HRESULT (void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void**, int> DebugServerQueryInterface;

            [NativeTypeName("void (void *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*, void> DebugServerRelease;
        }
    }

    [Guid("D5F569D0-593B-101A-B569-08002B2DBF7A")]
    [NativeTypeName("struct IPSFactoryBuffer : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IPSFactoryBuffer : IPSFactoryBuffer.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IPSFactoryBuffer));

        public Vtbl<IPSFactoryBuffer>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IPSFactoryBuffer*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IPSFactoryBuffer*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IPSFactoryBuffer*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int CreateProxy(IUnknown* pUnkOuter, [NativeTypeName("const IID &")] Guid* riid, IRpcProxyBuffer** ppProxy, void** ppv)
        {
            return lpVtbl->CreateProxy((IPSFactoryBuffer*)Unsafe.AsPointer(ref this), pUnkOuter, riid, ppProxy, ppv);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int CreateStub([NativeTypeName("const IID &")] Guid* riid, IUnknown* pUnkServer, IRpcStubBuffer** ppStub)
        {
            return lpVtbl->CreateStub((IPSFactoryBuffer*)Unsafe.AsPointer(ref this), riid, pUnkServer, ppStub);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int CreateProxy(IUnknown* pUnkOuter, [NativeTypeName("const IID &")] Guid* riid, IRpcProxyBuffer** ppProxy, void** ppv);

            [return: NativeTypeName("HRESULT")]
            int CreateStub([NativeTypeName("const IID &")] Guid* riid, IUnknown* pUnkServer, IRpcStubBuffer** ppStub);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (IUnknown *, const IID &, IRpcProxyBuffer **, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IUnknown*, Guid*, IRpcProxyBuffer**, void**, int> CreateProxy;

            [NativeTypeName("HRESULT (const IID &, IUnknown *, IRpcStubBuffer **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, IUnknown*, IRpcStubBuffer**, int> CreateStub;
        }
    }

    public unsafe partial struct SChannelHookCallInfo
    {
        [NativeTypeName("IID")]
        public Guid iid;

        [NativeTypeName("DWORD")]
        public uint cbSize;

        public Guid uCausality;

        [NativeTypeName("DWORD")]
        public uint dwServerPid;

        [NativeTypeName("DWORD")]
        public uint iMethod;

        public void* pObject;
    }

    [Guid("1008C4A0-7613-11CF-9AF1-0020AF6E72F4")]
    [NativeTypeName("struct IChannelHook : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IChannelHook : IChannelHook.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IChannelHook));

        public Vtbl<IChannelHook>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IChannelHook*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IChannelHook*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IChannelHook*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ClientGetSize([NativeTypeName("const GUID &")] Guid* uExtent, [NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("ULONG *")] uint* pDataSize)
        {
            lpVtbl->ClientGetSize((IChannelHook*)Unsafe.AsPointer(ref this), uExtent, riid, pDataSize);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ClientFillBuffer([NativeTypeName("const GUID &")] Guid* uExtent, [NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("ULONG *")] uint* pDataSize, void* pDataBuffer)
        {
            lpVtbl->ClientFillBuffer((IChannelHook*)Unsafe.AsPointer(ref this), uExtent, riid, pDataSize, pDataBuffer);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ClientNotify([NativeTypeName("const GUID &")] Guid* uExtent, [NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("ULONG")] uint cbDataSize, void* pDataBuffer, [NativeTypeName("DWORD")] uint lDataRep, [NativeTypeName("HRESULT")] int hrFault)
        {
            lpVtbl->ClientNotify((IChannelHook*)Unsafe.AsPointer(ref this), uExtent, riid, cbDataSize, pDataBuffer, lDataRep, hrFault);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ServerNotify([NativeTypeName("const GUID &")] Guid* uExtent, [NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("ULONG")] uint cbDataSize, void* pDataBuffer, [NativeTypeName("DWORD")] uint lDataRep)
        {
            lpVtbl->ServerNotify((IChannelHook*)Unsafe.AsPointer(ref this), uExtent, riid, cbDataSize, pDataBuffer, lDataRep);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ServerGetSize([NativeTypeName("const GUID &")] Guid* uExtent, [NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("HRESULT")] int hrFault, [NativeTypeName("ULONG *")] uint* pDataSize)
        {
            lpVtbl->ServerGetSize((IChannelHook*)Unsafe.AsPointer(ref this), uExtent, riid, hrFault, pDataSize);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ServerFillBuffer([NativeTypeName("const GUID &")] Guid* uExtent, [NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("ULONG *")] uint* pDataSize, void* pDataBuffer, [NativeTypeName("HRESULT")] int hrFault)
        {
            lpVtbl->ServerFillBuffer((IChannelHook*)Unsafe.AsPointer(ref this), uExtent, riid, pDataSize, pDataBuffer, hrFault);
        }

        public interface Interface : IUnknown.Interface
        {
            void ClientGetSize([NativeTypeName("const GUID &")] Guid* uExtent, [NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("ULONG *")] uint* pDataSize);

            void ClientFillBuffer([NativeTypeName("const GUID &")] Guid* uExtent, [NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("ULONG *")] uint* pDataSize, void* pDataBuffer);

            void ClientNotify([NativeTypeName("const GUID &")] Guid* uExtent, [NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("ULONG")] uint cbDataSize, void* pDataBuffer, [NativeTypeName("DWORD")] uint lDataRep, [NativeTypeName("HRESULT")] int hrFault);

            void ServerNotify([NativeTypeName("const GUID &")] Guid* uExtent, [NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("ULONG")] uint cbDataSize, void* pDataBuffer, [NativeTypeName("DWORD")] uint lDataRep);

            void ServerGetSize([NativeTypeName("const GUID &")] Guid* uExtent, [NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("HRESULT")] int hrFault, [NativeTypeName("ULONG *")] uint* pDataSize);

            void ServerFillBuffer([NativeTypeName("const GUID &")] Guid* uExtent, [NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("ULONG *")] uint* pDataSize, void* pDataBuffer, [NativeTypeName("HRESULT")] int hrFault);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("void (const GUID &, const IID &, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, Guid*, uint*, void> ClientGetSize;

            [NativeTypeName("void (const GUID &, const IID &, ULONG *, void *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, Guid*, uint*, void*, void> ClientFillBuffer;

            [NativeTypeName("void (const GUID &, const IID &, ULONG, void *, DWORD, HRESULT) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, Guid*, uint, void*, uint, int, void> ClientNotify;

            [NativeTypeName("void (const GUID &, const IID &, ULONG, void *, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, Guid*, uint, void*, uint, void> ServerNotify;

            [NativeTypeName("void (const GUID &, const IID &, HRESULT, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, Guid*, int, uint*, void> ServerGetSize;

            [NativeTypeName("void (const GUID &, const IID &, ULONG *, void *, HRESULT) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, Guid*, uint*, void*, int, void> ServerFillBuffer;
        }
    }

    public unsafe partial struct tagSOLE_AUTHENTICATION_SERVICE
    {
        [NativeTypeName("DWORD")]
        public uint dwAuthnSvc;

        [NativeTypeName("DWORD")]
        public uint dwAuthzSvc;

        [NativeTypeName("OLECHAR *")]
        public char* pPrincipalName;

        [NativeTypeName("HRESULT")]
        public int hr;
    }

    public enum tagEOLE_AUTHENTICATION_CAPABILITIES
    {
        EOAC_NONE = 0,
        EOAC_MUTUAL_AUTH = 0x1,
        EOAC_STATIC_CLOAKING = 0x20,
        EOAC_DYNAMIC_CLOAKING = 0x40,
        EOAC_ANY_AUTHORITY = 0x80,
        EOAC_MAKE_FULLSIC = 0x100,
        EOAC_DEFAULT = 0x800,
        EOAC_SECURE_REFS = 0x2,
        EOAC_ACCESS_CONTROL = 0x4,
        EOAC_APPID = 0x8,
        EOAC_DYNAMIC = 0x10,
        EOAC_REQUIRE_FULLSIC = 0x200,
        EOAC_AUTO_IMPERSONATE = 0x400,
        EOAC_DISABLE_AAA = 0x1000,
        EOAC_NO_CUSTOM_MARSHAL = 0x2000,
        EOAC_RESERVED1 = 0x4000,
    }

    public unsafe partial struct tagSOLE_AUTHENTICATION_INFO
    {
        [NativeTypeName("DWORD")]
        public uint dwAuthnSvc;

        [NativeTypeName("DWORD")]
        public uint dwAuthzSvc;

        public void* pAuthInfo;
    }

    public unsafe partial struct tagSOLE_AUTHENTICATION_LIST
    {
        [NativeTypeName("DWORD")]
        public uint cAuthInfo;

        [NativeTypeName("SOLE_AUTHENTICATION_INFO *")]
        public tagSOLE_AUTHENTICATION_INFO* aAuthInfo;
    }

    [Guid("0000013D-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IClientSecurity : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IClientSecurity : IClientSecurity.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IClientSecurity));

        public Vtbl<IClientSecurity>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IClientSecurity*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IClientSecurity*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IClientSecurity*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryBlanket(IUnknown* pProxy, [NativeTypeName("DWORD *")] uint* pAuthnSvc, [NativeTypeName("DWORD *")] uint* pAuthzSvc, [NativeTypeName("OLECHAR **")] char** pServerPrincName, [NativeTypeName("DWORD *")] uint* pAuthnLevel, [NativeTypeName("DWORD *")] uint* pImpLevel, void** pAuthInfo, [NativeTypeName("DWORD *")] uint* pCapabilites)
        {
            return lpVtbl->QueryBlanket((IClientSecurity*)Unsafe.AsPointer(ref this), pProxy, pAuthnSvc, pAuthzSvc, pServerPrincName, pAuthnLevel, pImpLevel, pAuthInfo, pCapabilites);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetBlanket(IUnknown* pProxy, [NativeTypeName("DWORD")] uint dwAuthnSvc, [NativeTypeName("DWORD")] uint dwAuthzSvc, [NativeTypeName("OLECHAR *")] char* pServerPrincName, [NativeTypeName("DWORD")] uint dwAuthnLevel, [NativeTypeName("DWORD")] uint dwImpLevel, void* pAuthInfo, [NativeTypeName("DWORD")] uint dwCapabilities)
        {
            return lpVtbl->SetBlanket((IClientSecurity*)Unsafe.AsPointer(ref this), pProxy, dwAuthnSvc, dwAuthzSvc, pServerPrincName, dwAuthnLevel, dwImpLevel, pAuthInfo, dwCapabilities);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int CopyProxy(IUnknown* pProxy, IUnknown** ppCopy)
        {
            return lpVtbl->CopyProxy((IClientSecurity*)Unsafe.AsPointer(ref this), pProxy, ppCopy);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int QueryBlanket(IUnknown* pProxy, [NativeTypeName("DWORD *")] uint* pAuthnSvc, [NativeTypeName("DWORD *")] uint* pAuthzSvc, [NativeTypeName("OLECHAR **")] char** pServerPrincName, [NativeTypeName("DWORD *")] uint* pAuthnLevel, [NativeTypeName("DWORD *")] uint* pImpLevel, void** pAuthInfo, [NativeTypeName("DWORD *")] uint* pCapabilites);

            [return: NativeTypeName("HRESULT")]
            int SetBlanket(IUnknown* pProxy, [NativeTypeName("DWORD")] uint dwAuthnSvc, [NativeTypeName("DWORD")] uint dwAuthzSvc, [NativeTypeName("OLECHAR *")] char* pServerPrincName, [NativeTypeName("DWORD")] uint dwAuthnLevel, [NativeTypeName("DWORD")] uint dwImpLevel, void* pAuthInfo, [NativeTypeName("DWORD")] uint dwCapabilities);

            [return: NativeTypeName("HRESULT")]
            int CopyProxy(IUnknown* pProxy, IUnknown** ppCopy);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (IUnknown *, DWORD *, DWORD *, OLECHAR **, DWORD *, DWORD *, void **, DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IUnknown*, uint*, uint*, char**, uint*, uint*, void**, uint*, int> QueryBlanket;

            [NativeTypeName("HRESULT (IUnknown *, DWORD, DWORD, OLECHAR *, DWORD, DWORD, void *, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IUnknown*, uint, uint, char*, uint, uint, void*, uint, int> SetBlanket;

            [NativeTypeName("HRESULT (IUnknown *, IUnknown **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IUnknown*, IUnknown**, int> CopyProxy;
        }
    }

    [Guid("0000013E-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IServerSecurity : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IServerSecurity : IServerSecurity.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IServerSecurity));

        public Vtbl<IServerSecurity>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IServerSecurity*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IServerSecurity*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IServerSecurity*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryBlanket([NativeTypeName("DWORD *")] uint* pAuthnSvc, [NativeTypeName("DWORD *")] uint* pAuthzSvc, [NativeTypeName("OLECHAR **")] char** pServerPrincName, [NativeTypeName("DWORD *")] uint* pAuthnLevel, [NativeTypeName("DWORD *")] uint* pImpLevel, void** pPrivs, [NativeTypeName("DWORD *")] uint* pCapabilities)
        {
            return lpVtbl->QueryBlanket((IServerSecurity*)Unsafe.AsPointer(ref this), pAuthnSvc, pAuthzSvc, pServerPrincName, pAuthnLevel, pImpLevel, pPrivs, pCapabilities);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ImpersonateClient()
        {
            return lpVtbl->ImpersonateClient((IServerSecurity*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int RevertToSelf()
        {
            return lpVtbl->RevertToSelf((IServerSecurity*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("BOOL")]
        public int IsImpersonating()
        {
            return lpVtbl->IsImpersonating((IServerSecurity*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int QueryBlanket([NativeTypeName("DWORD *")] uint* pAuthnSvc, [NativeTypeName("DWORD *")] uint* pAuthzSvc, [NativeTypeName("OLECHAR **")] char** pServerPrincName, [NativeTypeName("DWORD *")] uint* pAuthnLevel, [NativeTypeName("DWORD *")] uint* pImpLevel, void** pPrivs, [NativeTypeName("DWORD *")] uint* pCapabilities);

            [return: NativeTypeName("HRESULT")]
            int ImpersonateClient();

            [return: NativeTypeName("HRESULT")]
            int RevertToSelf();

            [return: NativeTypeName("BOOL")]
            int IsImpersonating();
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (DWORD *, DWORD *, OLECHAR **, DWORD *, DWORD *, void **, DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, uint*, char**, uint*, uint*, void**, uint*, int> QueryBlanket;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> ImpersonateClient;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> RevertToSelf;

            [NativeTypeName("BOOL () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> IsImpersonating;
        }
    }

    public enum tagRPCOPT_PROPERTIES
    {
        COMBND_RPCTIMEOUT = 0x1,
        COMBND_SERVER_LOCALITY = 0x2,
        COMBND_RESERVED1 = 0x4,
        COMBND_RESERVED2 = 0x5,
        COMBND_RESERVED3 = 0x8,
        COMBND_RESERVED4 = 0x10,
    }

    public enum tagRPCOPT_SERVER_LOCALITY_VALUES
    {
        SERVER_LOCALITY_PROCESS_LOCAL = 0,
        SERVER_LOCALITY_MACHINE_LOCAL = 1,
        SERVER_LOCALITY_REMOTE = 2,
    }

    [Guid("00000144-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IRpcOptions : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IRpcOptions : IRpcOptions.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IRpcOptions));

        public Vtbl<IRpcOptions>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IRpcOptions*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IRpcOptions*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IRpcOptions*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Set(IUnknown* pPrx, [NativeTypeName("RPCOPT_PROPERTIES")] tagRPCOPT_PROPERTIES dwProperty, [NativeTypeName("ULONG_PTR")] ulong dwValue)
        {
            return lpVtbl->Set((IRpcOptions*)Unsafe.AsPointer(ref this), pPrx, dwProperty, dwValue);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Query(IUnknown* pPrx, [NativeTypeName("RPCOPT_PROPERTIES")] tagRPCOPT_PROPERTIES dwProperty, [NativeTypeName("ULONG_PTR *")] ulong* pdwValue)
        {
            return lpVtbl->Query((IRpcOptions*)Unsafe.AsPointer(ref this), pPrx, dwProperty, pdwValue);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Set(IUnknown* pPrx, [NativeTypeName("RPCOPT_PROPERTIES")] tagRPCOPT_PROPERTIES dwProperty, [NativeTypeName("ULONG_PTR")] ulong dwValue);

            [return: NativeTypeName("HRESULT")]
            int Query(IUnknown* pPrx, [NativeTypeName("RPCOPT_PROPERTIES")] tagRPCOPT_PROPERTIES dwProperty, [NativeTypeName("ULONG_PTR *")] ulong* pdwValue);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (IUnknown *, RPCOPT_PROPERTIES, ULONG_PTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IUnknown*, tagRPCOPT_PROPERTIES, ulong, int> Set;

            [NativeTypeName("HRESULT (IUnknown *, RPCOPT_PROPERTIES, ULONG_PTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IUnknown*, tagRPCOPT_PROPERTIES, ulong*, int> Query;
        }
    }

    public enum tagGLOBALOPT_PROPERTIES
    {
        COMGLB_EXCEPTION_HANDLING = 1,
        COMGLB_APPID = 2,
        COMGLB_RPC_THREADPOOL_SETTING = 3,
        COMGLB_RO_SETTINGS = 4,
        COMGLB_UNMARSHALING_POLICY = 5,
        COMGLB_PROPERTIES_RESERVED1 = 6,
        COMGLB_PROPERTIES_RESERVED2 = 7,
        COMGLB_PROPERTIES_RESERVED3 = 8,
    }

    public enum tagGLOBALOPT_EH_VALUES
    {
        COMGLB_EXCEPTION_HANDLE = 0,
        COMGLB_EXCEPTION_DONOT_HANDLE_FATAL = 1,
        COMGLB_EXCEPTION_DONOT_HANDLE = COMGLB_EXCEPTION_DONOT_HANDLE_FATAL,
        COMGLB_EXCEPTION_DONOT_HANDLE_ANY = 2,
    }

    public enum tagGLOBALOPT_RPCTP_VALUES
    {
        COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL = 0,
        COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL = 1,
    }

    public enum tagGLOBALOPT_RO_FLAGS
    {
        COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES = 0x1,
        COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES = 0x2,
        COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES = 0x4,
        COMGLB_FAST_RUNDOWN = 0x8,
        COMGLB_RESERVED1 = 0x10,
        COMGLB_RESERVED2 = 0x20,
        COMGLB_RESERVED3 = 0x40,
        COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES = 0x80,
        COMGLB_RESERVED4 = 0x100,
        COMGLB_RESERVED5 = 0x200,
        COMGLB_RESERVED6 = 0x400,
    }

    public enum tagGLOBALOPT_UNMARSHALING_POLICY_VALUES
    {
        COMGLB_UNMARSHALING_POLICY_NORMAL = 0,
        COMGLB_UNMARSHALING_POLICY_STRONG = 1,
        COMGLB_UNMARSHALING_POLICY_HYBRID = 2,
    }

    [Guid("0000015B-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IGlobalOptions : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IGlobalOptions : IGlobalOptions.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IGlobalOptions));

        public Vtbl<IGlobalOptions>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IGlobalOptions*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IGlobalOptions*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IGlobalOptions*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Set([NativeTypeName("GLOBALOPT_PROPERTIES")] tagGLOBALOPT_PROPERTIES dwProperty, [NativeTypeName("ULONG_PTR")] ulong dwValue)
        {
            return lpVtbl->Set((IGlobalOptions*)Unsafe.AsPointer(ref this), dwProperty, dwValue);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Query([NativeTypeName("GLOBALOPT_PROPERTIES")] tagGLOBALOPT_PROPERTIES dwProperty, [NativeTypeName("ULONG_PTR *")] ulong* pdwValue)
        {
            return lpVtbl->Query((IGlobalOptions*)Unsafe.AsPointer(ref this), dwProperty, pdwValue);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Set([NativeTypeName("GLOBALOPT_PROPERTIES")] tagGLOBALOPT_PROPERTIES dwProperty, [NativeTypeName("ULONG_PTR")] ulong dwValue);

            [return: NativeTypeName("HRESULT")]
            int Query([NativeTypeName("GLOBALOPT_PROPERTIES")] tagGLOBALOPT_PROPERTIES dwProperty, [NativeTypeName("ULONG_PTR *")] ulong* pdwValue);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (GLOBALOPT_PROPERTIES, ULONG_PTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagGLOBALOPT_PROPERTIES, ulong, int> Set;

            [NativeTypeName("HRESULT (GLOBALOPT_PROPERTIES, ULONG_PTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagGLOBALOPT_PROPERTIES, ulong*, int> Query;
        }
    }

    [Guid("00000022-0000-0000-C000-000000000046")]
    [NativeTypeName("struct ISurrogate : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ISurrogate : ISurrogate.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ISurrogate));

        public Vtbl<ISurrogate>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((ISurrogate*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((ISurrogate*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((ISurrogate*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int LoadDllServer([NativeTypeName("const IID &")] Guid* Clsid)
        {
            return lpVtbl->LoadDllServer((ISurrogate*)Unsafe.AsPointer(ref this), Clsid);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int FreeSurrogate()
        {
            return lpVtbl->FreeSurrogate((ISurrogate*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int LoadDllServer([NativeTypeName("const IID &")] Guid* Clsid);

            [return: NativeTypeName("HRESULT")]
            int FreeSurrogate();
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (const IID &) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, int> LoadDllServer;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> FreeSurrogate;
        }
    }

    [Guid("00000146-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IGlobalInterfaceTable : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IGlobalInterfaceTable : IGlobalInterfaceTable.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IGlobalInterfaceTable));

        public Vtbl<IGlobalInterfaceTable>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IGlobalInterfaceTable*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IGlobalInterfaceTable*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IGlobalInterfaceTable*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int RegisterInterfaceInGlobal(IUnknown* pUnk, [NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("DWORD *")] uint* pdwCookie)
        {
            return lpVtbl->RegisterInterfaceInGlobal((IGlobalInterfaceTable*)Unsafe.AsPointer(ref this), pUnk, riid, pdwCookie);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int RevokeInterfaceFromGlobal([NativeTypeName("DWORD")] uint dwCookie)
        {
            return lpVtbl->RevokeInterfaceFromGlobal((IGlobalInterfaceTable*)Unsafe.AsPointer(ref this), dwCookie);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetInterfaceFromGlobal([NativeTypeName("DWORD")] uint dwCookie, [NativeTypeName("const IID &")] Guid* riid, void** ppv)
        {
            return lpVtbl->GetInterfaceFromGlobal((IGlobalInterfaceTable*)Unsafe.AsPointer(ref this), dwCookie, riid, ppv);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int RegisterInterfaceInGlobal(IUnknown* pUnk, [NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("DWORD *")] uint* pdwCookie);

            [return: NativeTypeName("HRESULT")]
            int RevokeInterfaceFromGlobal([NativeTypeName("DWORD")] uint dwCookie);

            [return: NativeTypeName("HRESULT")]
            int GetInterfaceFromGlobal([NativeTypeName("DWORD")] uint dwCookie, [NativeTypeName("const IID &")] Guid* riid, void** ppv);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (IUnknown *, const IID &, DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IUnknown*, Guid*, uint*, int> RegisterInterfaceInGlobal;

            [NativeTypeName("HRESULT (DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> RevokeInterfaceFromGlobal;

            [NativeTypeName("HRESULT (DWORD, const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, Guid*, void**, int> GetInterfaceFromGlobal;
        }
    }

    [Guid("00000030-0000-0000-C000-000000000046")]
    [NativeTypeName("struct ISynchronize : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ISynchronize : ISynchronize.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ISynchronize));

        public Vtbl<ISynchronize>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((ISynchronize*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((ISynchronize*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((ISynchronize*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Wait([NativeTypeName("DWORD")] uint dwFlags, [NativeTypeName("DWORD")] uint dwMilliseconds)
        {
            return lpVtbl->Wait((ISynchronize*)Unsafe.AsPointer(ref this), dwFlags, dwMilliseconds);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Signal()
        {
            return lpVtbl->Signal((ISynchronize*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Reset()
        {
            return lpVtbl->Reset((ISynchronize*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Wait([NativeTypeName("DWORD")] uint dwFlags, [NativeTypeName("DWORD")] uint dwMilliseconds);

            [return: NativeTypeName("HRESULT")]
            int Signal();

            [return: NativeTypeName("HRESULT")]
            int Reset();
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (DWORD, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint, int> Wait;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> Signal;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> Reset;
        }
    }

    [Guid("00000031-0000-0000-C000-000000000046")]
    [NativeTypeName("struct ISynchronizeHandle : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ISynchronizeHandle : ISynchronizeHandle.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ISynchronizeHandle));

        public Vtbl<ISynchronizeHandle>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((ISynchronizeHandle*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((ISynchronizeHandle*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((ISynchronizeHandle*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetHandle([NativeTypeName("HANDLE *")] void** ph)
        {
            return lpVtbl->GetHandle((ISynchronizeHandle*)Unsafe.AsPointer(ref this), ph);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int GetHandle([NativeTypeName("HANDLE *")] void** ph);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (HANDLE *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void**, int> GetHandle;
        }
    }

    [Guid("00000032-0000-0000-C000-000000000046")]
    [NativeTypeName("struct ISynchronizeEvent : ISynchronizeHandle")]
    [NativeInheritance("ISynchronizeHandle")]
    public unsafe partial struct ISynchronizeEvent : ISynchronizeEvent.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ISynchronizeEvent));

        public Vtbl<ISynchronizeEvent>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((ISynchronizeEvent*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((ISynchronizeEvent*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((ISynchronizeEvent*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetHandle([NativeTypeName("HANDLE *")] void** ph)
        {
            return lpVtbl->GetHandle((ISynchronizeEvent*)Unsafe.AsPointer(ref this), ph);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetEventHandle([NativeTypeName("HANDLE *")] void** ph)
        {
            return lpVtbl->SetEventHandle((ISynchronizeEvent*)Unsafe.AsPointer(ref this), ph);
        }

        public interface Interface : ISynchronizeHandle.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int SetEventHandle([NativeTypeName("HANDLE *")] void** ph);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (HANDLE *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void**, int> GetHandle;

            [NativeTypeName("HRESULT (HANDLE *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void**, int> SetEventHandle;
        }
    }

    [Guid("00000033-0000-0000-C000-000000000046")]
    [NativeTypeName("struct ISynchronizeContainer : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ISynchronizeContainer : ISynchronizeContainer.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ISynchronizeContainer));

        public Vtbl<ISynchronizeContainer>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((ISynchronizeContainer*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((ISynchronizeContainer*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((ISynchronizeContainer*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int AddSynchronize(ISynchronize* pSync)
        {
            return lpVtbl->AddSynchronize((ISynchronizeContainer*)Unsafe.AsPointer(ref this), pSync);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int WaitMultiple([NativeTypeName("DWORD")] uint dwFlags, [NativeTypeName("DWORD")] uint dwTimeOut, ISynchronize** ppSync)
        {
            return lpVtbl->WaitMultiple((ISynchronizeContainer*)Unsafe.AsPointer(ref this), dwFlags, dwTimeOut, ppSync);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int AddSynchronize(ISynchronize* pSync);

            [return: NativeTypeName("HRESULT")]
            int WaitMultiple([NativeTypeName("DWORD")] uint dwFlags, [NativeTypeName("DWORD")] uint dwTimeOut, ISynchronize** ppSync);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (ISynchronize *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ISynchronize*, int> AddSynchronize;

            [NativeTypeName("HRESULT (DWORD, DWORD, ISynchronize **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint, ISynchronize**, int> WaitMultiple;
        }
    }

    [Guid("00000025-0000-0000-C000-000000000046")]
    [NativeTypeName("struct ISynchronizeMutex : ISynchronize")]
    [NativeInheritance("ISynchronize")]
    public unsafe partial struct ISynchronizeMutex : ISynchronizeMutex.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ISynchronizeMutex));

        public Vtbl<ISynchronizeMutex>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((ISynchronizeMutex*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((ISynchronizeMutex*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((ISynchronizeMutex*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Wait([NativeTypeName("DWORD")] uint dwFlags, [NativeTypeName("DWORD")] uint dwMilliseconds)
        {
            return lpVtbl->Wait((ISynchronizeMutex*)Unsafe.AsPointer(ref this), dwFlags, dwMilliseconds);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Signal()
        {
            return lpVtbl->Signal((ISynchronizeMutex*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Reset()
        {
            return lpVtbl->Reset((ISynchronizeMutex*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ReleaseMutex()
        {
            return lpVtbl->ReleaseMutex((ISynchronizeMutex*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : ISynchronize.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int ReleaseMutex();
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (DWORD, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint, int> Wait;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> Signal;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> Reset;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> ReleaseMutex;
        }
    }

    [Guid("00000029-0000-0000-C000-000000000046")]
    [NativeTypeName("struct ICancelMethodCalls : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ICancelMethodCalls : ICancelMethodCalls.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ICancelMethodCalls));

        public Vtbl<ICancelMethodCalls>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((ICancelMethodCalls*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((ICancelMethodCalls*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((ICancelMethodCalls*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Cancel([NativeTypeName("ULONG")] uint ulSeconds)
        {
            return lpVtbl->Cancel((ICancelMethodCalls*)Unsafe.AsPointer(ref this), ulSeconds);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int TestCancel()
        {
            return lpVtbl->TestCancel((ICancelMethodCalls*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Cancel([NativeTypeName("ULONG")] uint ulSeconds);

            [return: NativeTypeName("HRESULT")]
            int TestCancel();
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (ULONG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> Cancel;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> TestCancel;
        }
    }

    public enum tagDCOM_CALL_STATE
    {
        DCOM_NONE = 0,
        DCOM_CALL_COMPLETE = 0x1,
        DCOM_CALL_CANCELED = 0x2,
    }

    [Guid("0000002A-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IAsyncManager : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IAsyncManager : IAsyncManager.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IAsyncManager));

        public Vtbl<IAsyncManager>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IAsyncManager*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IAsyncManager*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IAsyncManager*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int CompleteCall([NativeTypeName("HRESULT")] int Result)
        {
            return lpVtbl->CompleteCall((IAsyncManager*)Unsafe.AsPointer(ref this), Result);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetCallContext([NativeTypeName("const IID &")] Guid* riid, void** pInterface)
        {
            return lpVtbl->GetCallContext((IAsyncManager*)Unsafe.AsPointer(ref this), riid, pInterface);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetState([NativeTypeName("ULONG *")] uint* pulStateFlags)
        {
            return lpVtbl->GetState((IAsyncManager*)Unsafe.AsPointer(ref this), pulStateFlags);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int CompleteCall([NativeTypeName("HRESULT")] int Result);

            [return: NativeTypeName("HRESULT")]
            int GetCallContext([NativeTypeName("const IID &")] Guid* riid, void** pInterface);

            [return: NativeTypeName("HRESULT")]
            int GetState([NativeTypeName("ULONG *")] uint* pulStateFlags);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (HRESULT) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> CompleteCall;

            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> GetCallContext;

            [NativeTypeName("HRESULT (ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, int> GetState;
        }
    }

    [Guid("1C733A30-2A1C-11CE-ADE5-00AA0044773D")]
    [NativeTypeName("struct ICallFactory : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ICallFactory : ICallFactory.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ICallFactory));

        public Vtbl<ICallFactory>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((ICallFactory*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((ICallFactory*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((ICallFactory*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int CreateCall([NativeTypeName("const IID &")] Guid* riid, IUnknown* pCtrlUnk, [NativeTypeName("const IID &")] Guid* riid2, IUnknown** ppv)
        {
            return lpVtbl->CreateCall((ICallFactory*)Unsafe.AsPointer(ref this), riid, pCtrlUnk, riid2, ppv);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int CreateCall([NativeTypeName("const IID &")] Guid* riid, IUnknown* pCtrlUnk, [NativeTypeName("const IID &")] Guid* riid2, IUnknown** ppv);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (const IID &, IUnknown *, const IID &, IUnknown **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, IUnknown*, Guid*, IUnknown**, int> CreateCall;
        }
    }

    [Guid("00000149-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IRpcHelper : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IRpcHelper : IRpcHelper.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IRpcHelper));

        public Vtbl<IRpcHelper>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IRpcHelper*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IRpcHelper*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IRpcHelper*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetDCOMProtocolVersion([NativeTypeName("DWORD *")] uint* pComVersion)
        {
            return lpVtbl->GetDCOMProtocolVersion((IRpcHelper*)Unsafe.AsPointer(ref this), pComVersion);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetIIDFromOBJREF(void* pObjRef, [NativeTypeName("IID **")] Guid** piid)
        {
            return lpVtbl->GetIIDFromOBJREF((IRpcHelper*)Unsafe.AsPointer(ref this), pObjRef, piid);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int GetDCOMProtocolVersion([NativeTypeName("DWORD *")] uint* pComVersion);

            [return: NativeTypeName("HRESULT")]
            int GetIIDFromOBJREF(void* pObjRef, [NativeTypeName("IID **")] Guid** piid);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, int> GetDCOMProtocolVersion;

            [NativeTypeName("HRESULT (void *, IID **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*, Guid**, int> GetIIDFromOBJREF;
        }
    }

    [Guid("EB0CB9E8-7996-11D2-872E-0000F8080859")]
    [NativeTypeName("struct IReleaseMarshalBuffers : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IReleaseMarshalBuffers : IReleaseMarshalBuffers.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IReleaseMarshalBuffers));

        public Vtbl<IReleaseMarshalBuffers>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IReleaseMarshalBuffers*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IReleaseMarshalBuffers*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IReleaseMarshalBuffers*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ReleaseMarshalBuffer([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMsg, [NativeTypeName("DWORD")] uint dwFlags, IUnknown* pChnl)
        {
            return lpVtbl->ReleaseMarshalBuffer((IReleaseMarshalBuffers*)Unsafe.AsPointer(ref this), pMsg, dwFlags, pChnl);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int ReleaseMarshalBuffer([NativeTypeName("RPCOLEMESSAGE *")] tagRPCOLEMESSAGE* pMsg, [NativeTypeName("DWORD")] uint dwFlags, IUnknown* pChnl);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (RPCOLEMESSAGE *, DWORD, IUnknown *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagRPCOLEMESSAGE*, uint, IUnknown*, int> ReleaseMarshalBuffer;
        }
    }

    [Guid("0000002B-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IWaitMultiple : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IWaitMultiple : IWaitMultiple.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWaitMultiple));

        public Vtbl<IWaitMultiple>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IWaitMultiple*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IWaitMultiple*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IWaitMultiple*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int WaitMultiple([NativeTypeName("DWORD")] uint timeout, ISynchronize** pSync)
        {
            return lpVtbl->WaitMultiple((IWaitMultiple*)Unsafe.AsPointer(ref this), timeout, pSync);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int AddSynchronize(ISynchronize* pSync)
        {
            return lpVtbl->AddSynchronize((IWaitMultiple*)Unsafe.AsPointer(ref this), pSync);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int WaitMultiple([NativeTypeName("DWORD")] uint timeout, ISynchronize** pSync);

            [return: NativeTypeName("HRESULT")]
            int AddSynchronize(ISynchronize* pSync);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (DWORD, ISynchronize **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, ISynchronize**, int> WaitMultiple;

            [NativeTypeName("HRESULT (ISynchronize *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ISynchronize*, int> AddSynchronize;
        }
    }

    [Guid("00000147-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IAddrTrackingControl : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IAddrTrackingControl : IAddrTrackingControl.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IAddrTrackingControl));

        public Vtbl<IAddrTrackingControl>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IAddrTrackingControl*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IAddrTrackingControl*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IAddrTrackingControl*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int EnableCOMDynamicAddrTracking()
        {
            return lpVtbl->EnableCOMDynamicAddrTracking((IAddrTrackingControl*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int DisableCOMDynamicAddrTracking()
        {
            return lpVtbl->DisableCOMDynamicAddrTracking((IAddrTrackingControl*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int EnableCOMDynamicAddrTracking();

            [return: NativeTypeName("HRESULT")]
            int DisableCOMDynamicAddrTracking();
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> EnableCOMDynamicAddrTracking;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> DisableCOMDynamicAddrTracking;
        }
    }

    [Guid("00000148-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IAddrExclusionControl : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IAddrExclusionControl : IAddrExclusionControl.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IAddrExclusionControl));

        public Vtbl<IAddrExclusionControl>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IAddrExclusionControl*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IAddrExclusionControl*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IAddrExclusionControl*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetCurrentAddrExclusionList([NativeTypeName("const IID &")] Guid* riid, void** ppEnumerator)
        {
            return lpVtbl->GetCurrentAddrExclusionList((IAddrExclusionControl*)Unsafe.AsPointer(ref this), riid, ppEnumerator);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int UpdateAddrExclusionList(IUnknown* pEnumerator)
        {
            return lpVtbl->UpdateAddrExclusionList((IAddrExclusionControl*)Unsafe.AsPointer(ref this), pEnumerator);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int GetCurrentAddrExclusionList([NativeTypeName("const IID &")] Guid* riid, void** ppEnumerator);

            [return: NativeTypeName("HRESULT")]
            int UpdateAddrExclusionList(IUnknown* pEnumerator);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> GetCurrentAddrExclusionList;

            [NativeTypeName("HRESULT (IUnknown *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IUnknown*, int> UpdateAddrExclusionList;
        }
    }

    [Guid("DB2F3ACA-2F86-11D1-8E04-00C04FB9989A")]
    [NativeTypeName("struct IPipeByte : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IPipeByte : IPipeByte.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IPipeByte));

        public Vtbl<IPipeByte>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IPipeByte*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IPipeByte*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IPipeByte*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Pull(byte* buf, [NativeTypeName("ULONG")] uint cRequest, [NativeTypeName("ULONG *")] uint* pcReturned)
        {
            return lpVtbl->Pull((IPipeByte*)Unsafe.AsPointer(ref this), buf, cRequest, pcReturned);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Push(byte* buf, [NativeTypeName("ULONG")] uint cSent)
        {
            return lpVtbl->Push((IPipeByte*)Unsafe.AsPointer(ref this), buf, cSent);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Pull(byte* buf, [NativeTypeName("ULONG")] uint cRequest, [NativeTypeName("ULONG *")] uint* pcReturned);

            [return: NativeTypeName("HRESULT")]
            int Push(byte* buf, [NativeTypeName("ULONG")] uint cSent);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (BYTE *, ULONG, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, byte*, uint, uint*, int> Pull;

            [NativeTypeName("HRESULT (BYTE *, ULONG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, byte*, uint, int> Push;
        }
    }

    [Guid("DB2F3ACB-2F86-11D1-8E04-00C04FB9989A")]
    [NativeTypeName("struct AsyncIPipeByte : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct AsyncIPipeByte : AsyncIPipeByte.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_AsyncIPipeByte));

        public Vtbl<AsyncIPipeByte>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((AsyncIPipeByte*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((AsyncIPipeByte*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((AsyncIPipeByte*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Begin_Pull([NativeTypeName("ULONG")] uint cRequest)
        {
            return lpVtbl->Begin_Pull((AsyncIPipeByte*)Unsafe.AsPointer(ref this), cRequest);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Finish_Pull(byte* buf, [NativeTypeName("ULONG *")] uint* pcReturned)
        {
            return lpVtbl->Finish_Pull((AsyncIPipeByte*)Unsafe.AsPointer(ref this), buf, pcReturned);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Begin_Push(byte* buf, [NativeTypeName("ULONG")] uint cSent)
        {
            return lpVtbl->Begin_Push((AsyncIPipeByte*)Unsafe.AsPointer(ref this), buf, cSent);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Finish_Push()
        {
            return lpVtbl->Finish_Push((AsyncIPipeByte*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Begin_Pull([NativeTypeName("ULONG")] uint cRequest);

            [return: NativeTypeName("HRESULT")]
            int Finish_Pull(byte* buf, [NativeTypeName("ULONG *")] uint* pcReturned);

            [return: NativeTypeName("HRESULT")]
            int Begin_Push(byte* buf, [NativeTypeName("ULONG")] uint cSent);

            [return: NativeTypeName("HRESULT")]
            int Finish_Push();
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (ULONG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> Begin_Pull;

            [NativeTypeName("HRESULT (BYTE *, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, byte*, uint*, int> Finish_Pull;

            [NativeTypeName("HRESULT (BYTE *, ULONG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, byte*, uint, int> Begin_Push;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> Finish_Push;
        }
    }

    [Guid("DB2F3ACC-2F86-11D1-8E04-00C04FB9989A")]
    [NativeTypeName("struct IPipeLong : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IPipeLong : IPipeLong.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IPipeLong));

        public Vtbl<IPipeLong>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IPipeLong*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IPipeLong*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IPipeLong*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Pull([NativeTypeName("LONG *")] int* buf, [NativeTypeName("ULONG")] uint cRequest, [NativeTypeName("ULONG *")] uint* pcReturned)
        {
            return lpVtbl->Pull((IPipeLong*)Unsafe.AsPointer(ref this), buf, cRequest, pcReturned);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Push([NativeTypeName("LONG *")] int* buf, [NativeTypeName("ULONG")] uint cSent)
        {
            return lpVtbl->Push((IPipeLong*)Unsafe.AsPointer(ref this), buf, cSent);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Pull([NativeTypeName("LONG *")] int* buf, [NativeTypeName("ULONG")] uint cRequest, [NativeTypeName("ULONG *")] uint* pcReturned);

            [return: NativeTypeName("HRESULT")]
            int Push([NativeTypeName("LONG *")] int* buf, [NativeTypeName("ULONG")] uint cSent);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (LONG *, ULONG, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int*, uint, uint*, int> Pull;

            [NativeTypeName("HRESULT (LONG *, ULONG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int*, uint, int> Push;
        }
    }

    [Guid("DB2F3ACD-2F86-11D1-8E04-00C04FB9989A")]
    [NativeTypeName("struct AsyncIPipeLong : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct AsyncIPipeLong : AsyncIPipeLong.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_AsyncIPipeLong));

        public Vtbl<AsyncIPipeLong>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((AsyncIPipeLong*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((AsyncIPipeLong*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((AsyncIPipeLong*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Begin_Pull([NativeTypeName("ULONG")] uint cRequest)
        {
            return lpVtbl->Begin_Pull((AsyncIPipeLong*)Unsafe.AsPointer(ref this), cRequest);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Finish_Pull([NativeTypeName("LONG *")] int* buf, [NativeTypeName("ULONG *")] uint* pcReturned)
        {
            return lpVtbl->Finish_Pull((AsyncIPipeLong*)Unsafe.AsPointer(ref this), buf, pcReturned);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Begin_Push([NativeTypeName("LONG *")] int* buf, [NativeTypeName("ULONG")] uint cSent)
        {
            return lpVtbl->Begin_Push((AsyncIPipeLong*)Unsafe.AsPointer(ref this), buf, cSent);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Finish_Push()
        {
            return lpVtbl->Finish_Push((AsyncIPipeLong*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Begin_Pull([NativeTypeName("ULONG")] uint cRequest);

            [return: NativeTypeName("HRESULT")]
            int Finish_Pull([NativeTypeName("LONG *")] int* buf, [NativeTypeName("ULONG *")] uint* pcReturned);

            [return: NativeTypeName("HRESULT")]
            int Begin_Push([NativeTypeName("LONG *")] int* buf, [NativeTypeName("ULONG")] uint cSent);

            [return: NativeTypeName("HRESULT")]
            int Finish_Push();
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (ULONG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> Begin_Pull;

            [NativeTypeName("HRESULT (LONG *, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int*, uint*, int> Finish_Pull;

            [NativeTypeName("HRESULT (LONG *, ULONG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int*, uint, int> Begin_Push;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> Finish_Push;
        }
    }

    [Guid("DB2F3ACE-2F86-11D1-8E04-00C04FB9989A")]
    [NativeTypeName("struct IPipeDouble : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IPipeDouble : IPipeDouble.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IPipeDouble));

        public Vtbl<IPipeDouble>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IPipeDouble*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IPipeDouble*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IPipeDouble*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Pull(double* buf, [NativeTypeName("ULONG")] uint cRequest, [NativeTypeName("ULONG *")] uint* pcReturned)
        {
            return lpVtbl->Pull((IPipeDouble*)Unsafe.AsPointer(ref this), buf, cRequest, pcReturned);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Push(double* buf, [NativeTypeName("ULONG")] uint cSent)
        {
            return lpVtbl->Push((IPipeDouble*)Unsafe.AsPointer(ref this), buf, cSent);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Pull(double* buf, [NativeTypeName("ULONG")] uint cRequest, [NativeTypeName("ULONG *")] uint* pcReturned);

            [return: NativeTypeName("HRESULT")]
            int Push(double* buf, [NativeTypeName("ULONG")] uint cSent);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (DOUBLE *, ULONG, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, double*, uint, uint*, int> Pull;

            [NativeTypeName("HRESULT (DOUBLE *, ULONG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, double*, uint, int> Push;
        }
    }

    [Guid("DB2F3ACF-2F86-11D1-8E04-00C04FB9989A")]
    [NativeTypeName("struct AsyncIPipeDouble : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct AsyncIPipeDouble : AsyncIPipeDouble.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_AsyncIPipeDouble));

        public Vtbl<AsyncIPipeDouble>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((AsyncIPipeDouble*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((AsyncIPipeDouble*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((AsyncIPipeDouble*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Begin_Pull([NativeTypeName("ULONG")] uint cRequest)
        {
            return lpVtbl->Begin_Pull((AsyncIPipeDouble*)Unsafe.AsPointer(ref this), cRequest);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Finish_Pull(double* buf, [NativeTypeName("ULONG *")] uint* pcReturned)
        {
            return lpVtbl->Finish_Pull((AsyncIPipeDouble*)Unsafe.AsPointer(ref this), buf, pcReturned);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Begin_Push(double* buf, [NativeTypeName("ULONG")] uint cSent)
        {
            return lpVtbl->Begin_Push((AsyncIPipeDouble*)Unsafe.AsPointer(ref this), buf, cSent);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Finish_Push()
        {
            return lpVtbl->Finish_Push((AsyncIPipeDouble*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Begin_Pull([NativeTypeName("ULONG")] uint cRequest);

            [return: NativeTypeName("HRESULT")]
            int Finish_Pull(double* buf, [NativeTypeName("ULONG *")] uint* pcReturned);

            [return: NativeTypeName("HRESULT")]
            int Begin_Push(double* buf, [NativeTypeName("ULONG")] uint cSent);

            [return: NativeTypeName("HRESULT")]
            int Finish_Push();
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (ULONG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> Begin_Pull;

            [NativeTypeName("HRESULT (DOUBLE *, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, double*, uint*, int> Finish_Pull;

            [NativeTypeName("HRESULT (DOUBLE *, ULONG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, double*, uint, int> Begin_Push;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> Finish_Push;
        }
    }

    public enum _APTTYPEQUALIFIER
    {
        APTTYPEQUALIFIER_NONE = 0,
        APTTYPEQUALIFIER_IMPLICIT_MTA = 1,
        APTTYPEQUALIFIER_NA_ON_MTA = 2,
        APTTYPEQUALIFIER_NA_ON_STA = 3,
        APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA = 4,
        APTTYPEQUALIFIER_NA_ON_MAINSTA = 5,
        APTTYPEQUALIFIER_APPLICATION_STA = 6,
        APTTYPEQUALIFIER_RESERVED_1 = 7,
    }

    public enum _APTTYPE
    {
        APTTYPE_CURRENT = -1,
        APTTYPE_STA = 0,
        APTTYPE_MTA = 1,
        APTTYPE_NA = 2,
        APTTYPE_MAINSTA = 3,
    }

    public enum _THDTYPE
    {
        THDTYPE_BLOCKMESSAGES = 0,
        THDTYPE_PROCESSMESSAGES = 1,
    }

    [Guid("000001CE-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IComThreadingInfo : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IComThreadingInfo : IComThreadingInfo.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IComThreadingInfo));

        public Vtbl<IComThreadingInfo>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IComThreadingInfo*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IComThreadingInfo*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IComThreadingInfo*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetCurrentApartmentType([NativeTypeName("APTTYPE *")] _APTTYPE* pAptType)
        {
            return lpVtbl->GetCurrentApartmentType((IComThreadingInfo*)Unsafe.AsPointer(ref this), pAptType);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetCurrentThreadType([NativeTypeName("THDTYPE *")] _THDTYPE* pThreadType)
        {
            return lpVtbl->GetCurrentThreadType((IComThreadingInfo*)Unsafe.AsPointer(ref this), pThreadType);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetCurrentLogicalThreadId(Guid* pguidLogicalThreadId)
        {
            return lpVtbl->GetCurrentLogicalThreadId((IComThreadingInfo*)Unsafe.AsPointer(ref this), pguidLogicalThreadId);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetCurrentLogicalThreadId([NativeTypeName("const GUID &")] Guid* rguid)
        {
            return lpVtbl->SetCurrentLogicalThreadId((IComThreadingInfo*)Unsafe.AsPointer(ref this), rguid);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int GetCurrentApartmentType([NativeTypeName("APTTYPE *")] _APTTYPE* pAptType);

            [return: NativeTypeName("HRESULT")]
            int GetCurrentThreadType([NativeTypeName("THDTYPE *")] _THDTYPE* pThreadType);

            [return: NativeTypeName("HRESULT")]
            int GetCurrentLogicalThreadId(Guid* pguidLogicalThreadId);

            [return: NativeTypeName("HRESULT")]
            int SetCurrentLogicalThreadId([NativeTypeName("const GUID &")] Guid* rguid);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (APTTYPE *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, _APTTYPE*, int> GetCurrentApartmentType;

            [NativeTypeName("HRESULT (THDTYPE *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, _THDTYPE*, int> GetCurrentThreadType;

            [NativeTypeName("HRESULT (GUID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, int> GetCurrentLogicalThreadId;

            [NativeTypeName("HRESULT (const GUID &) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, int> SetCurrentLogicalThreadId;
        }
    }

    [Guid("72380D55-8D2B-43A3-8513-2B6EF31434E9")]
    [NativeTypeName("struct IProcessInitControl : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IProcessInitControl : IProcessInitControl.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IProcessInitControl));

        public Vtbl<IProcessInitControl>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IProcessInitControl*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IProcessInitControl*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IProcessInitControl*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ResetInitializerTimeout([NativeTypeName("DWORD")] uint dwSecondsRemaining)
        {
            return lpVtbl->ResetInitializerTimeout((IProcessInitControl*)Unsafe.AsPointer(ref this), dwSecondsRemaining);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int ResetInitializerTimeout([NativeTypeName("DWORD")] uint dwSecondsRemaining);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> ResetInitializerTimeout;
        }
    }

    [Guid("00000040-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IFastRundown : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IFastRundown : IFastRundown.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IFastRundown));

        public Vtbl<IFastRundown>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IFastRundown*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IFastRundown*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IFastRundown*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IUnknown.Interface
        {
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;
        }
    }

    public enum CO_MARSHALING_CONTEXT_ATTRIBUTES
    {
        CO_MARSHALING_SOURCE_IS_APP_CONTAINER = 0,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_1 = unchecked((int)(0x80000000)),
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_2 = unchecked((int)(0x80000001)),
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_3 = unchecked((int)(0x80000002)),
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_4 = unchecked((int)(0x80000003)),
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_5 = unchecked((int)(0x80000004)),
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_6 = unchecked((int)(0x80000005)),
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_7 = unchecked((int)(0x80000006)),
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_8 = unchecked((int)(0x80000007)),
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_9 = unchecked((int)(0x80000008)),
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_10 = unchecked((int)(0x80000009)),
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_11 = unchecked((int)(0x8000000a)),
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_12 = unchecked((int)(0x8000000b)),
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_13 = unchecked((int)(0x8000000c)),
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_14 = unchecked((int)(0x8000000d)),
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_15 = unchecked((int)(0x8000000e)),
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_16 = unchecked((int)(0x8000000f)),
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_17 = unchecked((int)(0x80000010)),
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_18 = unchecked((int)(0x80000011)),
    }

    [Guid("D8F2F5E6-6102-4863-9F26-389A4676EFDE")]
    [NativeTypeName("struct IMarshalingStream : IStream")]
    [NativeInheritance("IStream")]
    public unsafe partial struct IMarshalingStream : IMarshalingStream.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IMarshalingStream));

        public Vtbl<IMarshalingStream>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IMarshalingStream*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IMarshalingStream*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IMarshalingStream*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Read(void* pv, [NativeTypeName("ULONG")] uint cb, [NativeTypeName("ULONG *")] uint* pcbRead)
        {
            return lpVtbl->Read((IMarshalingStream*)Unsafe.AsPointer(ref this), pv, cb, pcbRead);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Write([NativeTypeName("const void *")] void* pv, [NativeTypeName("ULONG")] uint cb, [NativeTypeName("ULONG *")] uint* pcbWritten)
        {
            return lpVtbl->Write((IMarshalingStream*)Unsafe.AsPointer(ref this), pv, cb, pcbWritten);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Seek([NativeTypeName("LARGE_INTEGER")] long dlibMove, [NativeTypeName("DWORD")] uint dwOrigin, [NativeTypeName("ULARGE_INTEGER *")] ulong* plibNewPosition)
        {
            return lpVtbl->Seek((IMarshalingStream*)Unsafe.AsPointer(ref this), dlibMove, dwOrigin, plibNewPosition);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetSize([NativeTypeName("ULARGE_INTEGER")] ulong libNewSize)
        {
            return lpVtbl->SetSize((IMarshalingStream*)Unsafe.AsPointer(ref this), libNewSize);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int CopyTo(IStream* pstm, [NativeTypeName("ULARGE_INTEGER")] ulong cb, [NativeTypeName("ULARGE_INTEGER *")] ulong* pcbRead, [NativeTypeName("ULARGE_INTEGER *")] ulong* pcbWritten)
        {
            return lpVtbl->CopyTo((IMarshalingStream*)Unsafe.AsPointer(ref this), pstm, cb, pcbRead, pcbWritten);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Commit([NativeTypeName("DWORD")] uint grfCommitFlags)
        {
            return lpVtbl->Commit((IMarshalingStream*)Unsafe.AsPointer(ref this), grfCommitFlags);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Revert()
        {
            return lpVtbl->Revert((IMarshalingStream*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int LockRegion([NativeTypeName("ULARGE_INTEGER")] ulong libOffset, [NativeTypeName("ULARGE_INTEGER")] ulong cb, [NativeTypeName("DWORD")] uint dwLockType)
        {
            return lpVtbl->LockRegion((IMarshalingStream*)Unsafe.AsPointer(ref this), libOffset, cb, dwLockType);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int UnlockRegion([NativeTypeName("ULARGE_INTEGER")] ulong libOffset, [NativeTypeName("ULARGE_INTEGER")] ulong cb, [NativeTypeName("DWORD")] uint dwLockType)
        {
            return lpVtbl->UnlockRegion((IMarshalingStream*)Unsafe.AsPointer(ref this), libOffset, cb, dwLockType);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Stat([NativeTypeName("STATSTG *")] tagSTATSTG* pstatstg, [NativeTypeName("DWORD")] uint grfStatFlag)
        {
            return lpVtbl->Stat((IMarshalingStream*)Unsafe.AsPointer(ref this), pstatstg, grfStatFlag);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Clone(IStream** ppstm)
        {
            return lpVtbl->Clone((IMarshalingStream*)Unsafe.AsPointer(ref this), ppstm);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetMarshalingContextAttribute(CO_MARSHALING_CONTEXT_ATTRIBUTES attribute, [NativeTypeName("ULONG_PTR *")] ulong* pAttributeValue)
        {
            return lpVtbl->GetMarshalingContextAttribute((IMarshalingStream*)Unsafe.AsPointer(ref this), attribute, pAttributeValue);
        }

        public interface Interface : IStream.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int GetMarshalingContextAttribute(CO_MARSHALING_CONTEXT_ATTRIBUTES attribute, [NativeTypeName("ULONG_PTR *")] ulong* pAttributeValue);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (void *, ULONG, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*, uint, uint*, int> Read;

            [NativeTypeName("HRESULT (const void *, ULONG, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*, uint, uint*, int> Write;

            [NativeTypeName("HRESULT (LARGE_INTEGER, DWORD, ULARGE_INTEGER *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, long, uint, ulong*, int> Seek;

            [NativeTypeName("HRESULT (ULARGE_INTEGER) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ulong, int> SetSize;

            [NativeTypeName("HRESULT (IStream *, ULARGE_INTEGER, ULARGE_INTEGER *, ULARGE_INTEGER *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IStream*, ulong, ulong*, ulong*, int> CopyTo;

            [NativeTypeName("HRESULT (DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> Commit;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> Revert;

            [NativeTypeName("HRESULT (ULARGE_INTEGER, ULARGE_INTEGER, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ulong, ulong, uint, int> LockRegion;

            [NativeTypeName("HRESULT (ULARGE_INTEGER, ULARGE_INTEGER, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ulong, ulong, uint, int> UnlockRegion;

            [NativeTypeName("HRESULT (STATSTG *, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagSTATSTG*, uint, int> Stat;

            [NativeTypeName("HRESULT (IStream **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IStream**, int> Clone;

            [NativeTypeName("HRESULT (CO_MARSHALING_CONTEXT_ATTRIBUTES, ULONG_PTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, CO_MARSHALING_CONTEXT_ATTRIBUTES, ulong*, int> GetMarshalingContextAttribute;
        }
    }

    [Guid("C03F6A43-65A4-9818-987E-E0B810D2A6F2")]
    [NativeTypeName("struct IAgileReference : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IAgileReference : IAgileReference.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IAgileReference));

        public Vtbl<IAgileReference>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IAgileReference*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IAgileReference*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IAgileReference*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Resolve([NativeTypeName("const IID &")] Guid* riid, void** ppvObjectReference)
        {
            return lpVtbl->Resolve((IAgileReference*)Unsafe.AsPointer(ref this), riid, ppvObjectReference);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Resolve([NativeTypeName("const IID &")] Guid* riid, void** ppvObjectReference);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> Resolve;
        }
    }

    [Guid("26D709AC-F70B-4421-A96F-D2878FAFB00D")]
    [NativeTypeName("struct IMachineGlobalObjectTable : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IMachineGlobalObjectTable : IMachineGlobalObjectTable.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IMachineGlobalObjectTable));

        public Vtbl<IMachineGlobalObjectTable>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IMachineGlobalObjectTable*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IMachineGlobalObjectTable*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IMachineGlobalObjectTable*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int RegisterObject([NativeTypeName("const IID &")] Guid* clsid, [NativeTypeName("LPCWSTR")] char* identifier, IUnknown* @object, [NativeTypeName("MachineGlobalObjectTableRegistrationToken *")] MachineGlobalObjectTableRegistrationToken** token)
        {
            return lpVtbl->RegisterObject((IMachineGlobalObjectTable*)Unsafe.AsPointer(ref this), clsid, identifier, @object, token);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetObjectA([NativeTypeName("const IID &")] Guid* clsid, [NativeTypeName("LPCWSTR")] char* identifier, [NativeTypeName("const IID &")] Guid* riid, void** ppv)
        {
            return lpVtbl->GetObjectA((IMachineGlobalObjectTable*)Unsafe.AsPointer(ref this), clsid, identifier, riid, ppv);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int RevokeObject([NativeTypeName("MachineGlobalObjectTableRegistrationToken")] MachineGlobalObjectTableRegistrationToken* token)
        {
            return lpVtbl->RevokeObject((IMachineGlobalObjectTable*)Unsafe.AsPointer(ref this), token);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int RegisterObject([NativeTypeName("const IID &")] Guid* clsid, [NativeTypeName("LPCWSTR")] char* identifier, IUnknown* @object, [NativeTypeName("MachineGlobalObjectTableRegistrationToken *")] MachineGlobalObjectTableRegistrationToken** token);

            [return: NativeTypeName("HRESULT")]
            int GetObjectA([NativeTypeName("const IID &")] Guid* clsid, [NativeTypeName("LPCWSTR")] char* identifier, [NativeTypeName("const IID &")] Guid* riid, void** ppv);

            [return: NativeTypeName("HRESULT")]
            int RevokeObject([NativeTypeName("MachineGlobalObjectTableRegistrationToken")] MachineGlobalObjectTableRegistrationToken* token);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (const IID &, LPCWSTR, IUnknown *, MachineGlobalObjectTableRegistrationToken *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, char*, IUnknown*, MachineGlobalObjectTableRegistrationToken**, int> RegisterObject;

            [NativeTypeName("HRESULT (const IID &, LPCWSTR, const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, char*, Guid*, void**, int> GetObjectA;

            [NativeTypeName("HRESULT (MachineGlobalObjectTableRegistrationToken) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, MachineGlobalObjectTableRegistrationToken*, int> RevokeObject;
        }
    }

    [Guid("E9956EF2-3828-4B4B-8FA9-7DB61DEE4954")]
    [NativeTypeName("struct ISupportAllowLowerTrustActivation : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ISupportAllowLowerTrustActivation : ISupportAllowLowerTrustActivation.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ISupportAllowLowerTrustActivation));

        public Vtbl<ISupportAllowLowerTrustActivation>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((ISupportAllowLowerTrustActivation*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((ISupportAllowLowerTrustActivation*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((ISupportAllowLowerTrustActivation*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IUnknown.Interface
        {
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;
        }
    }

    public partial struct tagServerInformation
    {
        [NativeTypeName("DWORD")]
        public uint dwServerPid;

        [NativeTypeName("DWORD")]
        public uint dwServerTid;

        [NativeTypeName("UINT64")]
        public ulong ui64ServerAddress;
    }

    public enum tagSTDMSHLFLAGS
    {
        SMEXF_SERVER = 0x01,
        SMEXF_HANDLER = 0x02,
    }

    public enum tagCOWAIT_FLAGS
    {
        COWAIT_DEFAULT = 0,
        COWAIT_WAITALL = 1,
        COWAIT_ALERTABLE = 2,
        COWAIT_INPUTAVAILABLE = 4,
        COWAIT_DISPATCH_CALLS = 8,
        COWAIT_DISPATCH_WINDOW_MESSAGES = 0x10,
    }

    public enum CWMO_FLAGS
    {
        CWMO_DEFAULT = 0,
        CWMO_DISPATCH_CALLS = 1,
        CWMO_DISPATCH_WINDOW_MESSAGES = 2,
    }

    public enum AgileReferenceOptions
    {
        AGILEREFERENCE_DEFAULT = 0,
        AGILEREFERENCE_DELAYEDMARSHAL = 1,
    }

    [Guid("0000001D-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IMallocSpy : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IMallocSpy : IMallocSpy.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IMallocSpy));

        public Vtbl<IMallocSpy>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IMallocSpy*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IMallocSpy*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IMallocSpy*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("SIZE_T")]
        public ulong PreAlloc([NativeTypeName("SIZE_T")] ulong cbRequest)
        {
            return lpVtbl->PreAlloc((IMallocSpy*)Unsafe.AsPointer(ref this), cbRequest);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void* PostAlloc(void* pActual)
        {
            return lpVtbl->PostAlloc((IMallocSpy*)Unsafe.AsPointer(ref this), pActual);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void* PreFree(void* pRequest, [NativeTypeName("BOOL")] int fSpyed)
        {
            return lpVtbl->PreFree((IMallocSpy*)Unsafe.AsPointer(ref this), pRequest, fSpyed);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void PostFree([NativeTypeName("BOOL")] int fSpyed)
        {
            lpVtbl->PostFree((IMallocSpy*)Unsafe.AsPointer(ref this), fSpyed);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("SIZE_T")]
        public ulong PreRealloc(void* pRequest, [NativeTypeName("SIZE_T")] ulong cbRequest, void** ppNewRequest, [NativeTypeName("BOOL")] int fSpyed)
        {
            return lpVtbl->PreRealloc((IMallocSpy*)Unsafe.AsPointer(ref this), pRequest, cbRequest, ppNewRequest, fSpyed);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void* PostRealloc(void* pActual, [NativeTypeName("BOOL")] int fSpyed)
        {
            return lpVtbl->PostRealloc((IMallocSpy*)Unsafe.AsPointer(ref this), pActual, fSpyed);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void* PreGetSize(void* pRequest, [NativeTypeName("BOOL")] int fSpyed)
        {
            return lpVtbl->PreGetSize((IMallocSpy*)Unsafe.AsPointer(ref this), pRequest, fSpyed);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("SIZE_T")]
        public ulong PostGetSize([NativeTypeName("SIZE_T")] ulong cbActual, [NativeTypeName("BOOL")] int fSpyed)
        {
            return lpVtbl->PostGetSize((IMallocSpy*)Unsafe.AsPointer(ref this), cbActual, fSpyed);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void* PreDidAlloc(void* pRequest, [NativeTypeName("BOOL")] int fSpyed)
        {
            return lpVtbl->PreDidAlloc((IMallocSpy*)Unsafe.AsPointer(ref this), pRequest, fSpyed);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int PostDidAlloc(void* pRequest, [NativeTypeName("BOOL")] int fSpyed, int fActual)
        {
            return lpVtbl->PostDidAlloc((IMallocSpy*)Unsafe.AsPointer(ref this), pRequest, fSpyed, fActual);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void PreHeapMinimize()
        {
            lpVtbl->PreHeapMinimize((IMallocSpy*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void PostHeapMinimize()
        {
            lpVtbl->PostHeapMinimize((IMallocSpy*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("SIZE_T")]
            ulong PreAlloc([NativeTypeName("SIZE_T")] ulong cbRequest);

            void* PostAlloc(void* pActual);

            void* PreFree(void* pRequest, [NativeTypeName("BOOL")] int fSpyed);

            void PostFree([NativeTypeName("BOOL")] int fSpyed);

            [return: NativeTypeName("SIZE_T")]
            ulong PreRealloc(void* pRequest, [NativeTypeName("SIZE_T")] ulong cbRequest, void** ppNewRequest, [NativeTypeName("BOOL")] int fSpyed);

            void* PostRealloc(void* pActual, [NativeTypeName("BOOL")] int fSpyed);

            void* PreGetSize(void* pRequest, [NativeTypeName("BOOL")] int fSpyed);

            [return: NativeTypeName("SIZE_T")]
            ulong PostGetSize([NativeTypeName("SIZE_T")] ulong cbActual, [NativeTypeName("BOOL")] int fSpyed);

            void* PreDidAlloc(void* pRequest, [NativeTypeName("BOOL")] int fSpyed);

            int PostDidAlloc(void* pRequest, [NativeTypeName("BOOL")] int fSpyed, int fActual);

            void PreHeapMinimize();

            void PostHeapMinimize();
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("SIZE_T (SIZE_T) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ulong, ulong> PreAlloc;

            [NativeTypeName("void *(void *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*, void*> PostAlloc;

            [NativeTypeName("void *(void *, BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*, int, void*> PreFree;

            [NativeTypeName("void (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, void> PostFree;

            [NativeTypeName("SIZE_T (void *, SIZE_T, void **, BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*, ulong, void**, int, ulong> PreRealloc;

            [NativeTypeName("void *(void *, BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*, int, void*> PostRealloc;

            [NativeTypeName("void *(void *, BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*, int, void*> PreGetSize;

            [NativeTypeName("SIZE_T (SIZE_T, BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ulong, int, ulong> PostGetSize;

            [NativeTypeName("void *(void *, BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*, int, void*> PreDidAlloc;

            [NativeTypeName("int (void *, BOOL, int) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*, int, int, int> PostDidAlloc;

            [NativeTypeName("void () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void> PreHeapMinimize;

            [NativeTypeName("void () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void> PostHeapMinimize;
        }
    }

    public partial struct tagBIND_OPTS
    {
        [NativeTypeName("DWORD")]
        public uint cbStruct;

        [NativeTypeName("DWORD")]
        public uint grfFlags;

        [NativeTypeName("DWORD")]
        public uint grfMode;

        [NativeTypeName("DWORD")]
        public uint dwTickCountDeadline;
    }

    [NativeTypeName("struct tagBIND_OPTS2 : tagBIND_OPTS")]
    [NativeInheritance("tagBIND_OPTS")]
    public unsafe partial struct tagBIND_OPTS2
    {
        public tagBIND_OPTS Base;

        [NativeTypeName("DWORD")]
        public uint dwTrackFlags;

        [NativeTypeName("DWORD")]
        public uint dwClassContext;

        [NativeTypeName("LCID")]
        public uint locale;

        [NativeTypeName("COSERVERINFO *")]
        public _COSERVERINFO* pServerInfo;
    }

    [NativeTypeName("struct tagBIND_OPTS3 : tagBIND_OPTS2")]
    [NativeInheritance("tagBIND_OPTS2")]
    public unsafe partial struct tagBIND_OPTS3
    {
        public tagBIND_OPTS2 Base;

        [NativeTypeName("HWND")]
        public nint* hwnd;
    }

    public enum tagBIND_FLAGS
    {
        BIND_MAYBOTHERUSER = 1,
        BIND_JUSTTESTEXISTENCE = 2,
    }

    [Guid("0000000E-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IBindCtx : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IBindCtx : IBindCtx.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IBindCtx));

        public Vtbl<IBindCtx>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IBindCtx*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IBindCtx*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IBindCtx*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int RegisterObjectBound(IUnknown* punk)
        {
            return lpVtbl->RegisterObjectBound((IBindCtx*)Unsafe.AsPointer(ref this), punk);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int RevokeObjectBound(IUnknown* punk)
        {
            return lpVtbl->RevokeObjectBound((IBindCtx*)Unsafe.AsPointer(ref this), punk);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ReleaseBoundObjects()
        {
            return lpVtbl->ReleaseBoundObjects((IBindCtx*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetBindOptions([NativeTypeName("BIND_OPTS *")] tagBIND_OPTS* pbindopts)
        {
            return lpVtbl->SetBindOptions((IBindCtx*)Unsafe.AsPointer(ref this), pbindopts);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetBindOptions([NativeTypeName("BIND_OPTS *")] tagBIND_OPTS* pbindopts)
        {
            return lpVtbl->GetBindOptions((IBindCtx*)Unsafe.AsPointer(ref this), pbindopts);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetRunningObjectTable(IRunningObjectTable** pprot)
        {
            return lpVtbl->GetRunningObjectTable((IBindCtx*)Unsafe.AsPointer(ref this), pprot);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int RegisterObjectParam([NativeTypeName("LPOLESTR")] char* pszKey, IUnknown* punk)
        {
            return lpVtbl->RegisterObjectParam((IBindCtx*)Unsafe.AsPointer(ref this), pszKey, punk);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetObjectParam([NativeTypeName("LPOLESTR")] char* pszKey, IUnknown** ppunk)
        {
            return lpVtbl->GetObjectParam((IBindCtx*)Unsafe.AsPointer(ref this), pszKey, ppunk);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int EnumObjectParam(IEnumString** ppenum)
        {
            return lpVtbl->EnumObjectParam((IBindCtx*)Unsafe.AsPointer(ref this), ppenum);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int RevokeObjectParam([NativeTypeName("LPOLESTR")] char* pszKey)
        {
            return lpVtbl->RevokeObjectParam((IBindCtx*)Unsafe.AsPointer(ref this), pszKey);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int RegisterObjectBound(IUnknown* punk);

            [return: NativeTypeName("HRESULT")]
            int RevokeObjectBound(IUnknown* punk);

            [return: NativeTypeName("HRESULT")]
            int ReleaseBoundObjects();

            [return: NativeTypeName("HRESULT")]
            int SetBindOptions([NativeTypeName("BIND_OPTS *")] tagBIND_OPTS* pbindopts);

            [return: NativeTypeName("HRESULT")]
            int GetBindOptions([NativeTypeName("BIND_OPTS *")] tagBIND_OPTS* pbindopts);

            [return: NativeTypeName("HRESULT")]
            int GetRunningObjectTable(IRunningObjectTable** pprot);

            [return: NativeTypeName("HRESULT")]
            int RegisterObjectParam([NativeTypeName("LPOLESTR")] char* pszKey, IUnknown* punk);

            [return: NativeTypeName("HRESULT")]
            int GetObjectParam([NativeTypeName("LPOLESTR")] char* pszKey, IUnknown** ppunk);

            [return: NativeTypeName("HRESULT")]
            int EnumObjectParam(IEnumString** ppenum);

            [return: NativeTypeName("HRESULT")]
            int RevokeObjectParam([NativeTypeName("LPOLESTR")] char* pszKey);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (IUnknown *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IUnknown*, int> RegisterObjectBound;

            [NativeTypeName("HRESULT (IUnknown *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IUnknown*, int> RevokeObjectBound;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> ReleaseBoundObjects;

            [NativeTypeName("HRESULT (BIND_OPTS *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagBIND_OPTS*, int> SetBindOptions;

            [NativeTypeName("HRESULT (BIND_OPTS *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagBIND_OPTS*, int> GetBindOptions;

            [NativeTypeName("HRESULT (IRunningObjectTable **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IRunningObjectTable**, int> GetRunningObjectTable;

            [NativeTypeName("HRESULT (LPOLESTR, IUnknown *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, IUnknown*, int> RegisterObjectParam;

            [NativeTypeName("HRESULT (LPOLESTR, IUnknown **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, IUnknown**, int> GetObjectParam;

            [NativeTypeName("HRESULT (IEnumString **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IEnumString**, int> EnumObjectParam;

            [NativeTypeName("HRESULT (LPOLESTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, int> RevokeObjectParam;
        }
    }

    [Guid("00000102-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IEnumMoniker : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IEnumMoniker : IEnumMoniker.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IEnumMoniker));

        public Vtbl<IEnumMoniker>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IEnumMoniker*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IEnumMoniker*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IEnumMoniker*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Next([NativeTypeName("ULONG")] uint celt, IMoniker** rgelt, [NativeTypeName("ULONG *")] uint* pceltFetched)
        {
            return lpVtbl->Next((IEnumMoniker*)Unsafe.AsPointer(ref this), celt, rgelt, pceltFetched);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Skip([NativeTypeName("ULONG")] uint celt)
        {
            return lpVtbl->Skip((IEnumMoniker*)Unsafe.AsPointer(ref this), celt);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Reset()
        {
            return lpVtbl->Reset((IEnumMoniker*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Clone(IEnumMoniker** ppenum)
        {
            return lpVtbl->Clone((IEnumMoniker*)Unsafe.AsPointer(ref this), ppenum);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Next([NativeTypeName("ULONG")] uint celt, IMoniker** rgelt, [NativeTypeName("ULONG *")] uint* pceltFetched);

            [return: NativeTypeName("HRESULT")]
            int Skip([NativeTypeName("ULONG")] uint celt);

            [return: NativeTypeName("HRESULT")]
            int Reset();

            [return: NativeTypeName("HRESULT")]
            int Clone(IEnumMoniker** ppenum);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (ULONG, IMoniker **, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, IMoniker**, uint*, int> Next;

            [NativeTypeName("HRESULT (ULONG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> Skip;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> Reset;

            [NativeTypeName("HRESULT (IEnumMoniker **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IEnumMoniker**, int> Clone;
        }
    }

    [Guid("00000126-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IRunnableObject : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IRunnableObject : IRunnableObject.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IRunnableObject));

        public Vtbl<IRunnableObject>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IRunnableObject*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IRunnableObject*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IRunnableObject*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetRunningClass([NativeTypeName("LPCLSID")] Guid* lpClsid)
        {
            return lpVtbl->GetRunningClass((IRunnableObject*)Unsafe.AsPointer(ref this), lpClsid);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Run([NativeTypeName("LPBINDCTX")] IBindCtx* pbc)
        {
            return lpVtbl->Run((IRunnableObject*)Unsafe.AsPointer(ref this), pbc);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("BOOL")]
        public int IsRunning()
        {
            return lpVtbl->IsRunning((IRunnableObject*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int LockRunning([NativeTypeName("BOOL")] int fLock, [NativeTypeName("BOOL")] int fLastUnlockCloses)
        {
            return lpVtbl->LockRunning((IRunnableObject*)Unsafe.AsPointer(ref this), fLock, fLastUnlockCloses);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetContainedObject([NativeTypeName("BOOL")] int fContained)
        {
            return lpVtbl->SetContainedObject((IRunnableObject*)Unsafe.AsPointer(ref this), fContained);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int GetRunningClass([NativeTypeName("LPCLSID")] Guid* lpClsid);

            [return: NativeTypeName("HRESULT")]
            int Run([NativeTypeName("LPBINDCTX")] IBindCtx* pbc);

            [return: NativeTypeName("BOOL")]
            int IsRunning();

            [return: NativeTypeName("HRESULT")]
            int LockRunning([NativeTypeName("BOOL")] int fLock, [NativeTypeName("BOOL")] int fLastUnlockCloses);

            [return: NativeTypeName("HRESULT")]
            int SetContainedObject([NativeTypeName("BOOL")] int fContained);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (LPCLSID) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, int> GetRunningClass;

            [NativeTypeName("HRESULT (LPBINDCTX) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IBindCtx*, int> Run;

            [NativeTypeName("BOOL () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> IsRunning;

            [NativeTypeName("HRESULT (BOOL, BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int, int> LockRunning;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> SetContainedObject;
        }
    }

    [Guid("00000010-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IRunningObjectTable : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IRunningObjectTable : IRunningObjectTable.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IRunningObjectTable));

        public Vtbl<IRunningObjectTable>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IRunningObjectTable*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IRunningObjectTable*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IRunningObjectTable*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Register([NativeTypeName("DWORD")] uint grfFlags, IUnknown* punkObject, IMoniker* pmkObjectName, [NativeTypeName("DWORD *")] uint* pdwRegister)
        {
            return lpVtbl->Register((IRunningObjectTable*)Unsafe.AsPointer(ref this), grfFlags, punkObject, pmkObjectName, pdwRegister);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Revoke([NativeTypeName("DWORD")] uint dwRegister)
        {
            return lpVtbl->Revoke((IRunningObjectTable*)Unsafe.AsPointer(ref this), dwRegister);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int IsRunning(IMoniker* pmkObjectName)
        {
            return lpVtbl->IsRunning((IRunningObjectTable*)Unsafe.AsPointer(ref this), pmkObjectName);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetObjectA(IMoniker* pmkObjectName, IUnknown** ppunkObject)
        {
            return lpVtbl->GetObjectA((IRunningObjectTable*)Unsafe.AsPointer(ref this), pmkObjectName, ppunkObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int NoteChangeTime([NativeTypeName("DWORD")] uint dwRegister, FILETIME* pfiletime)
        {
            return lpVtbl->NoteChangeTime((IRunningObjectTable*)Unsafe.AsPointer(ref this), dwRegister, pfiletime);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetTimeOfLastChange(IMoniker* pmkObjectName, FILETIME* pfiletime)
        {
            return lpVtbl->GetTimeOfLastChange((IRunningObjectTable*)Unsafe.AsPointer(ref this), pmkObjectName, pfiletime);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int EnumRunning(IEnumMoniker** ppenumMoniker)
        {
            return lpVtbl->EnumRunning((IRunningObjectTable*)Unsafe.AsPointer(ref this), ppenumMoniker);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Register([NativeTypeName("DWORD")] uint grfFlags, IUnknown* punkObject, IMoniker* pmkObjectName, [NativeTypeName("DWORD *")] uint* pdwRegister);

            [return: NativeTypeName("HRESULT")]
            int Revoke([NativeTypeName("DWORD")] uint dwRegister);

            [return: NativeTypeName("HRESULT")]
            int IsRunning(IMoniker* pmkObjectName);

            [return: NativeTypeName("HRESULT")]
            int GetObjectA(IMoniker* pmkObjectName, IUnknown** ppunkObject);

            [return: NativeTypeName("HRESULT")]
            int NoteChangeTime([NativeTypeName("DWORD")] uint dwRegister, FILETIME* pfiletime);

            [return: NativeTypeName("HRESULT")]
            int GetTimeOfLastChange(IMoniker* pmkObjectName, FILETIME* pfiletime);

            [return: NativeTypeName("HRESULT")]
            int EnumRunning(IEnumMoniker** ppenumMoniker);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (DWORD, IUnknown *, IMoniker *, DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, IUnknown*, IMoniker*, uint*, int> Register;

            [NativeTypeName("HRESULT (DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> Revoke;

            [NativeTypeName("HRESULT (IMoniker *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IMoniker*, int> IsRunning;

            [NativeTypeName("HRESULT (IMoniker *, IUnknown **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IMoniker*, IUnknown**, int> GetObjectA;

            [NativeTypeName("HRESULT (DWORD, FILETIME *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, FILETIME*, int> NoteChangeTime;

            [NativeTypeName("HRESULT (IMoniker *, FILETIME *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IMoniker*, FILETIME*, int> GetTimeOfLastChange;

            [NativeTypeName("HRESULT (IEnumMoniker **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IEnumMoniker**, int> EnumRunning;
        }
    }

    [Guid("0000010C-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IPersist : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IPersist : IPersist.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IPersist));

        public Vtbl<IPersist>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IPersist*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IPersist*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IPersist*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetClassID([NativeTypeName("CLSID *")] Guid* pClassID)
        {
            return lpVtbl->GetClassID((IPersist*)Unsafe.AsPointer(ref this), pClassID);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int GetClassID([NativeTypeName("CLSID *")] Guid* pClassID);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (CLSID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, int> GetClassID;
        }
    }

    [Guid("00000109-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IPersistStream : IPersist")]
    [NativeInheritance("IPersist")]
    public unsafe partial struct IPersistStream : IPersistStream.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IPersistStream));

        public Vtbl<IPersistStream>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IPersistStream*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IPersistStream*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IPersistStream*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetClassID([NativeTypeName("CLSID *")] Guid* pClassID)
        {
            return lpVtbl->GetClassID((IPersistStream*)Unsafe.AsPointer(ref this), pClassID);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int IsDirty()
        {
            return lpVtbl->IsDirty((IPersistStream*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Load(IStream* pStm)
        {
            return lpVtbl->Load((IPersistStream*)Unsafe.AsPointer(ref this), pStm);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Save(IStream* pStm, [NativeTypeName("BOOL")] int fClearDirty)
        {
            return lpVtbl->Save((IPersistStream*)Unsafe.AsPointer(ref this), pStm, fClearDirty);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetSizeMax([NativeTypeName("ULARGE_INTEGER *")] ulong* pcbSize)
        {
            return lpVtbl->GetSizeMax((IPersistStream*)Unsafe.AsPointer(ref this), pcbSize);
        }

        public interface Interface : IPersist.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int IsDirty();

            [return: NativeTypeName("HRESULT")]
            int Load(IStream* pStm);

            [return: NativeTypeName("HRESULT")]
            int Save(IStream* pStm, [NativeTypeName("BOOL")] int fClearDirty);

            [return: NativeTypeName("HRESULT")]
            int GetSizeMax([NativeTypeName("ULARGE_INTEGER *")] ulong* pcbSize);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (CLSID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, int> GetClassID;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> IsDirty;

            [NativeTypeName("HRESULT (IStream *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IStream*, int> Load;

            [NativeTypeName("HRESULT (IStream *, BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IStream*, int, int> Save;

            [NativeTypeName("HRESULT (ULARGE_INTEGER *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ulong*, int> GetSizeMax;
        }
    }

    public enum tagMKSYS
    {
        MKSYS_NONE = 0,
        MKSYS_GENERICCOMPOSITE = 1,
        MKSYS_FILEMONIKER = 2,
        MKSYS_ANTIMONIKER = 3,
        MKSYS_ITEMMONIKER = 4,
        MKSYS_POINTERMONIKER = 5,
        MKSYS_CLASSMONIKER = 7,
        MKSYS_OBJREFMONIKER = 8,
        MKSYS_SESSIONMONIKER = 9,
        MKSYS_LUAMONIKER = 10,
    }

    public enum tagMKREDUCE
    {
        MKRREDUCE_ONE = (3 << 16),
        MKRREDUCE_TOUSER = (2 << 16),
        MKRREDUCE_THROUGHUSER = (1 << 16),
        MKRREDUCE_ALL = 0,
    }

    [Guid("0000000F-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IMoniker : IPersistStream")]
    [NativeInheritance("IPersistStream")]
    public unsafe partial struct IMoniker : IMoniker.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IMoniker));

        public Vtbl<IMoniker>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IMoniker*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IMoniker*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IMoniker*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetClassID([NativeTypeName("CLSID *")] Guid* pClassID)
        {
            return lpVtbl->GetClassID((IMoniker*)Unsafe.AsPointer(ref this), pClassID);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int IsDirty()
        {
            return lpVtbl->IsDirty((IMoniker*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Load(IStream* pStm)
        {
            return lpVtbl->Load((IMoniker*)Unsafe.AsPointer(ref this), pStm);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Save(IStream* pStm, [NativeTypeName("BOOL")] int fClearDirty)
        {
            return lpVtbl->Save((IMoniker*)Unsafe.AsPointer(ref this), pStm, fClearDirty);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetSizeMax([NativeTypeName("ULARGE_INTEGER *")] ulong* pcbSize)
        {
            return lpVtbl->GetSizeMax((IMoniker*)Unsafe.AsPointer(ref this), pcbSize);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int BindToObject(IBindCtx* pbc, IMoniker* pmkToLeft, [NativeTypeName("const IID &")] Guid* riidResult, void** ppvResult)
        {
            return lpVtbl->BindToObject((IMoniker*)Unsafe.AsPointer(ref this), pbc, pmkToLeft, riidResult, ppvResult);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int BindToStorage(IBindCtx* pbc, IMoniker* pmkToLeft, [NativeTypeName("const IID &")] Guid* riid, void** ppvObj)
        {
            return lpVtbl->BindToStorage((IMoniker*)Unsafe.AsPointer(ref this), pbc, pmkToLeft, riid, ppvObj);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Reduce(IBindCtx* pbc, [NativeTypeName("DWORD")] uint dwReduceHowFar, IMoniker** ppmkToLeft, IMoniker** ppmkReduced)
        {
            return lpVtbl->Reduce((IMoniker*)Unsafe.AsPointer(ref this), pbc, dwReduceHowFar, ppmkToLeft, ppmkReduced);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ComposeWith(IMoniker* pmkRight, [NativeTypeName("BOOL")] int fOnlyIfNotGeneric, IMoniker** ppmkComposite)
        {
            return lpVtbl->ComposeWith((IMoniker*)Unsafe.AsPointer(ref this), pmkRight, fOnlyIfNotGeneric, ppmkComposite);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Enum([NativeTypeName("BOOL")] int fForward, IEnumMoniker** ppenumMoniker)
        {
            return lpVtbl->Enum((IMoniker*)Unsafe.AsPointer(ref this), fForward, ppenumMoniker);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int IsEqual(IMoniker* pmkOtherMoniker)
        {
            return lpVtbl->IsEqual((IMoniker*)Unsafe.AsPointer(ref this), pmkOtherMoniker);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Hash([NativeTypeName("DWORD *")] uint* pdwHash)
        {
            return lpVtbl->Hash((IMoniker*)Unsafe.AsPointer(ref this), pdwHash);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int IsRunning(IBindCtx* pbc, IMoniker* pmkToLeft, IMoniker* pmkNewlyRunning)
        {
            return lpVtbl->IsRunning((IMoniker*)Unsafe.AsPointer(ref this), pbc, pmkToLeft, pmkNewlyRunning);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetTimeOfLastChange(IBindCtx* pbc, IMoniker* pmkToLeft, FILETIME* pFileTime)
        {
            return lpVtbl->GetTimeOfLastChange((IMoniker*)Unsafe.AsPointer(ref this), pbc, pmkToLeft, pFileTime);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Inverse(IMoniker** ppmk)
        {
            return lpVtbl->Inverse((IMoniker*)Unsafe.AsPointer(ref this), ppmk);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int CommonPrefixWith(IMoniker* pmkOther, IMoniker** ppmkPrefix)
        {
            return lpVtbl->CommonPrefixWith((IMoniker*)Unsafe.AsPointer(ref this), pmkOther, ppmkPrefix);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int RelativePathTo(IMoniker* pmkOther, IMoniker** ppmkRelPath)
        {
            return lpVtbl->RelativePathTo((IMoniker*)Unsafe.AsPointer(ref this), pmkOther, ppmkRelPath);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetDisplayName(IBindCtx* pbc, IMoniker* pmkToLeft, [NativeTypeName("LPOLESTR *")] char** ppszDisplayName)
        {
            return lpVtbl->GetDisplayName((IMoniker*)Unsafe.AsPointer(ref this), pbc, pmkToLeft, ppszDisplayName);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ParseDisplayName(IBindCtx* pbc, IMoniker* pmkToLeft, [NativeTypeName("LPOLESTR")] char* pszDisplayName, [NativeTypeName("ULONG *")] uint* pchEaten, IMoniker** ppmkOut)
        {
            return lpVtbl->ParseDisplayName((IMoniker*)Unsafe.AsPointer(ref this), pbc, pmkToLeft, pszDisplayName, pchEaten, ppmkOut);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int IsSystemMoniker([NativeTypeName("DWORD *")] uint* pdwMksys)
        {
            return lpVtbl->IsSystemMoniker((IMoniker*)Unsafe.AsPointer(ref this), pdwMksys);
        }

        public interface Interface : IPersistStream.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int BindToObject(IBindCtx* pbc, IMoniker* pmkToLeft, [NativeTypeName("const IID &")] Guid* riidResult, void** ppvResult);

            [return: NativeTypeName("HRESULT")]
            int BindToStorage(IBindCtx* pbc, IMoniker* pmkToLeft, [NativeTypeName("const IID &")] Guid* riid, void** ppvObj);

            [return: NativeTypeName("HRESULT")]
            int Reduce(IBindCtx* pbc, [NativeTypeName("DWORD")] uint dwReduceHowFar, IMoniker** ppmkToLeft, IMoniker** ppmkReduced);

            [return: NativeTypeName("HRESULT")]
            int ComposeWith(IMoniker* pmkRight, [NativeTypeName("BOOL")] int fOnlyIfNotGeneric, IMoniker** ppmkComposite);

            [return: NativeTypeName("HRESULT")]
            int Enum([NativeTypeName("BOOL")] int fForward, IEnumMoniker** ppenumMoniker);

            [return: NativeTypeName("HRESULT")]
            int IsEqual(IMoniker* pmkOtherMoniker);

            [return: NativeTypeName("HRESULT")]
            int Hash([NativeTypeName("DWORD *")] uint* pdwHash);

            [return: NativeTypeName("HRESULT")]
            int IsRunning(IBindCtx* pbc, IMoniker* pmkToLeft, IMoniker* pmkNewlyRunning);

            [return: NativeTypeName("HRESULT")]
            int GetTimeOfLastChange(IBindCtx* pbc, IMoniker* pmkToLeft, FILETIME* pFileTime);

            [return: NativeTypeName("HRESULT")]
            int Inverse(IMoniker** ppmk);

            [return: NativeTypeName("HRESULT")]
            int CommonPrefixWith(IMoniker* pmkOther, IMoniker** ppmkPrefix);

            [return: NativeTypeName("HRESULT")]
            int RelativePathTo(IMoniker* pmkOther, IMoniker** ppmkRelPath);

            [return: NativeTypeName("HRESULT")]
            int GetDisplayName(IBindCtx* pbc, IMoniker* pmkToLeft, [NativeTypeName("LPOLESTR *")] char** ppszDisplayName);

            [return: NativeTypeName("HRESULT")]
            int ParseDisplayName(IBindCtx* pbc, IMoniker* pmkToLeft, [NativeTypeName("LPOLESTR")] char* pszDisplayName, [NativeTypeName("ULONG *")] uint* pchEaten, IMoniker** ppmkOut);

            [return: NativeTypeName("HRESULT")]
            int IsSystemMoniker([NativeTypeName("DWORD *")] uint* pdwMksys);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (CLSID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, int> GetClassID;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> IsDirty;

            [NativeTypeName("HRESULT (IStream *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IStream*, int> Load;

            [NativeTypeName("HRESULT (IStream *, BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IStream*, int, int> Save;

            [NativeTypeName("HRESULT (ULARGE_INTEGER *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ulong*, int> GetSizeMax;

            [NativeTypeName("HRESULT (IBindCtx *, IMoniker *, const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IBindCtx*, IMoniker*, Guid*, void**, int> BindToObject;

            [NativeTypeName("HRESULT (IBindCtx *, IMoniker *, const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IBindCtx*, IMoniker*, Guid*, void**, int> BindToStorage;

            [NativeTypeName("HRESULT (IBindCtx *, DWORD, IMoniker **, IMoniker **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IBindCtx*, uint, IMoniker**, IMoniker**, int> Reduce;

            [NativeTypeName("HRESULT (IMoniker *, BOOL, IMoniker **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IMoniker*, int, IMoniker**, int> ComposeWith;

            [NativeTypeName("HRESULT (BOOL, IEnumMoniker **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, IEnumMoniker**, int> Enum;

            [NativeTypeName("HRESULT (IMoniker *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IMoniker*, int> IsEqual;

            [NativeTypeName("HRESULT (DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, int> Hash;

            [NativeTypeName("HRESULT (IBindCtx *, IMoniker *, IMoniker *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IBindCtx*, IMoniker*, IMoniker*, int> IsRunning;

            [NativeTypeName("HRESULT (IBindCtx *, IMoniker *, FILETIME *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IBindCtx*, IMoniker*, FILETIME*, int> GetTimeOfLastChange;

            [NativeTypeName("HRESULT (IMoniker **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IMoniker**, int> Inverse;

            [NativeTypeName("HRESULT (IMoniker *, IMoniker **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IMoniker*, IMoniker**, int> CommonPrefixWith;

            [NativeTypeName("HRESULT (IMoniker *, IMoniker **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IMoniker*, IMoniker**, int> RelativePathTo;

            [NativeTypeName("HRESULT (IBindCtx *, IMoniker *, LPOLESTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IBindCtx*, IMoniker*, char**, int> GetDisplayName;

            [NativeTypeName("HRESULT (IBindCtx *, IMoniker *, LPOLESTR, ULONG *, IMoniker **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IBindCtx*, IMoniker*, char*, uint*, IMoniker**, int> ParseDisplayName;

            [NativeTypeName("HRESULT (DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, int> IsSystemMoniker;
        }
    }

    [Guid("F29F6BC0-5021-11CE-AA15-00006901293F")]
    [NativeTypeName("struct IROTData : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IROTData : IROTData.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IROTData));

        public Vtbl<IROTData>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IROTData*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IROTData*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IROTData*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetComparisonData(byte* pbData, [NativeTypeName("ULONG")] uint cbMax, [NativeTypeName("ULONG *")] uint* pcbData)
        {
            return lpVtbl->GetComparisonData((IROTData*)Unsafe.AsPointer(ref this), pbData, cbMax, pcbData);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int GetComparisonData(byte* pbData, [NativeTypeName("ULONG")] uint cbMax, [NativeTypeName("ULONG *")] uint* pcbData);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (byte *, ULONG, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, byte*, uint, uint*, int> GetComparisonData;
        }
    }

    [Guid("0000000D-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IEnumSTATSTG : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IEnumSTATSTG : IEnumSTATSTG.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IEnumSTATSTG));

        public Vtbl<IEnumSTATSTG>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IEnumSTATSTG*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IEnumSTATSTG*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IEnumSTATSTG*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Next([NativeTypeName("ULONG")] uint celt, [NativeTypeName("STATSTG *")] tagSTATSTG* rgelt, [NativeTypeName("ULONG *")] uint* pceltFetched)
        {
            return lpVtbl->Next((IEnumSTATSTG*)Unsafe.AsPointer(ref this), celt, rgelt, pceltFetched);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Skip([NativeTypeName("ULONG")] uint celt)
        {
            return lpVtbl->Skip((IEnumSTATSTG*)Unsafe.AsPointer(ref this), celt);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Reset()
        {
            return lpVtbl->Reset((IEnumSTATSTG*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Clone(IEnumSTATSTG** ppenum)
        {
            return lpVtbl->Clone((IEnumSTATSTG*)Unsafe.AsPointer(ref this), ppenum);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Next([NativeTypeName("ULONG")] uint celt, [NativeTypeName("STATSTG *")] tagSTATSTG* rgelt, [NativeTypeName("ULONG *")] uint* pceltFetched);

            [return: NativeTypeName("HRESULT")]
            int Skip([NativeTypeName("ULONG")] uint celt);

            [return: NativeTypeName("HRESULT")]
            int Reset();

            [return: NativeTypeName("HRESULT")]
            int Clone(IEnumSTATSTG** ppenum);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (ULONG, STATSTG *, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, tagSTATSTG*, uint*, int> Next;

            [NativeTypeName("HRESULT (ULONG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> Skip;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> Reset;

            [NativeTypeName("HRESULT (IEnumSTATSTG **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IEnumSTATSTG**, int> Clone;
        }
    }

    public partial struct tagRemSNB
    {
        [NativeTypeName("ULONG")]
        public uint ulCntStr;

        [NativeTypeName("ULONG")]
        public uint ulCntChar;

        [NativeTypeName("OLECHAR[1]")]
        public _rgString_e__FixedBuffer rgString;

        public partial struct _rgString_e__FixedBuffer
        {
            public char e0;

            [UnscopedRef]
            public ref char this[int index]
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get
                {
                    return ref Unsafe.Add(ref e0, index);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            [UnscopedRef]
            public Span<char> AsSpan(int length) => MemoryMarshal.CreateSpan(ref e0, length);
        }
    }

    [Guid("0000000B-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IStorage : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IStorage : IStorage.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IStorage));

        public Vtbl<IStorage>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IStorage*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IStorage*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IStorage*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int CreateStream([NativeTypeName("const OLECHAR *")] char* pwcsName, [NativeTypeName("DWORD")] uint grfMode, [NativeTypeName("DWORD")] uint reserved1, [NativeTypeName("DWORD")] uint reserved2, IStream** ppstm)
        {
            return lpVtbl->CreateStream((IStorage*)Unsafe.AsPointer(ref this), pwcsName, grfMode, reserved1, reserved2, ppstm);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OpenStream([NativeTypeName("const OLECHAR *")] char* pwcsName, void* reserved1, [NativeTypeName("DWORD")] uint grfMode, [NativeTypeName("DWORD")] uint reserved2, IStream** ppstm)
        {
            return lpVtbl->OpenStream((IStorage*)Unsafe.AsPointer(ref this), pwcsName, reserved1, grfMode, reserved2, ppstm);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int CreateStorage([NativeTypeName("const OLECHAR *")] char* pwcsName, [NativeTypeName("DWORD")] uint grfMode, [NativeTypeName("DWORD")] uint reserved1, [NativeTypeName("DWORD")] uint reserved2, IStorage** ppstg)
        {
            return lpVtbl->CreateStorage((IStorage*)Unsafe.AsPointer(ref this), pwcsName, grfMode, reserved1, reserved2, ppstg);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OpenStorage([NativeTypeName("const OLECHAR *")] char* pwcsName, IStorage* pstgPriority, [NativeTypeName("DWORD")] uint grfMode, [NativeTypeName("SNB")] char** snbExclude, [NativeTypeName("DWORD")] uint reserved, IStorage** ppstg)
        {
            return lpVtbl->OpenStorage((IStorage*)Unsafe.AsPointer(ref this), pwcsName, pstgPriority, grfMode, snbExclude, reserved, ppstg);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int CopyTo([NativeTypeName("DWORD")] uint ciidExclude, [NativeTypeName("const IID *")] Guid* rgiidExclude, [NativeTypeName("SNB")] char** snbExclude, IStorage* pstgDest)
        {
            return lpVtbl->CopyTo((IStorage*)Unsafe.AsPointer(ref this), ciidExclude, rgiidExclude, snbExclude, pstgDest);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int MoveElementTo([NativeTypeName("const OLECHAR *")] char* pwcsName, IStorage* pstgDest, [NativeTypeName("const OLECHAR *")] char* pwcsNewName, [NativeTypeName("DWORD")] uint grfFlags)
        {
            return lpVtbl->MoveElementTo((IStorage*)Unsafe.AsPointer(ref this), pwcsName, pstgDest, pwcsNewName, grfFlags);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Commit([NativeTypeName("DWORD")] uint grfCommitFlags)
        {
            return lpVtbl->Commit((IStorage*)Unsafe.AsPointer(ref this), grfCommitFlags);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Revert()
        {
            return lpVtbl->Revert((IStorage*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int EnumElements([NativeTypeName("DWORD")] uint reserved1, void* reserved2, [NativeTypeName("DWORD")] uint reserved3, IEnumSTATSTG** ppenum)
        {
            return lpVtbl->EnumElements((IStorage*)Unsafe.AsPointer(ref this), reserved1, reserved2, reserved3, ppenum);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int DestroyElement([NativeTypeName("const OLECHAR *")] char* pwcsName)
        {
            return lpVtbl->DestroyElement((IStorage*)Unsafe.AsPointer(ref this), pwcsName);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int RenameElement([NativeTypeName("const OLECHAR *")] char* pwcsOldName, [NativeTypeName("const OLECHAR *")] char* pwcsNewName)
        {
            return lpVtbl->RenameElement((IStorage*)Unsafe.AsPointer(ref this), pwcsOldName, pwcsNewName);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetElementTimes([NativeTypeName("const OLECHAR *")] char* pwcsName, [NativeTypeName("const FILETIME *")] FILETIME* pctime, [NativeTypeName("const FILETIME *")] FILETIME* patime, [NativeTypeName("const FILETIME *")] FILETIME* pmtime)
        {
            return lpVtbl->SetElementTimes((IStorage*)Unsafe.AsPointer(ref this), pwcsName, pctime, patime, pmtime);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetClass([NativeTypeName("const IID &")] Guid* clsid)
        {
            return lpVtbl->SetClass((IStorage*)Unsafe.AsPointer(ref this), clsid);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetStateBits([NativeTypeName("DWORD")] uint grfStateBits, [NativeTypeName("DWORD")] uint grfMask)
        {
            return lpVtbl->SetStateBits((IStorage*)Unsafe.AsPointer(ref this), grfStateBits, grfMask);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Stat([NativeTypeName("STATSTG *")] tagSTATSTG* pstatstg, [NativeTypeName("DWORD")] uint grfStatFlag)
        {
            return lpVtbl->Stat((IStorage*)Unsafe.AsPointer(ref this), pstatstg, grfStatFlag);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int CreateStream([NativeTypeName("const OLECHAR *")] char* pwcsName, [NativeTypeName("DWORD")] uint grfMode, [NativeTypeName("DWORD")] uint reserved1, [NativeTypeName("DWORD")] uint reserved2, IStream** ppstm);

            [return: NativeTypeName("HRESULT")]
            int OpenStream([NativeTypeName("const OLECHAR *")] char* pwcsName, void* reserved1, [NativeTypeName("DWORD")] uint grfMode, [NativeTypeName("DWORD")] uint reserved2, IStream** ppstm);

            [return: NativeTypeName("HRESULT")]
            int CreateStorage([NativeTypeName("const OLECHAR *")] char* pwcsName, [NativeTypeName("DWORD")] uint grfMode, [NativeTypeName("DWORD")] uint reserved1, [NativeTypeName("DWORD")] uint reserved2, IStorage** ppstg);

            [return: NativeTypeName("HRESULT")]
            int OpenStorage([NativeTypeName("const OLECHAR *")] char* pwcsName, IStorage* pstgPriority, [NativeTypeName("DWORD")] uint grfMode, [NativeTypeName("SNB")] char** snbExclude, [NativeTypeName("DWORD")] uint reserved, IStorage** ppstg);

            [return: NativeTypeName("HRESULT")]
            int CopyTo([NativeTypeName("DWORD")] uint ciidExclude, [NativeTypeName("const IID *")] Guid* rgiidExclude, [NativeTypeName("SNB")] char** snbExclude, IStorage* pstgDest);

            [return: NativeTypeName("HRESULT")]
            int MoveElementTo([NativeTypeName("const OLECHAR *")] char* pwcsName, IStorage* pstgDest, [NativeTypeName("const OLECHAR *")] char* pwcsNewName, [NativeTypeName("DWORD")] uint grfFlags);

            [return: NativeTypeName("HRESULT")]
            int Commit([NativeTypeName("DWORD")] uint grfCommitFlags);

            [return: NativeTypeName("HRESULT")]
            int Revert();

            [return: NativeTypeName("HRESULT")]
            int EnumElements([NativeTypeName("DWORD")] uint reserved1, void* reserved2, [NativeTypeName("DWORD")] uint reserved3, IEnumSTATSTG** ppenum);

            [return: NativeTypeName("HRESULT")]
            int DestroyElement([NativeTypeName("const OLECHAR *")] char* pwcsName);

            [return: NativeTypeName("HRESULT")]
            int RenameElement([NativeTypeName("const OLECHAR *")] char* pwcsOldName, [NativeTypeName("const OLECHAR *")] char* pwcsNewName);

            [return: NativeTypeName("HRESULT")]
            int SetElementTimes([NativeTypeName("const OLECHAR *")] char* pwcsName, [NativeTypeName("const FILETIME *")] FILETIME* pctime, [NativeTypeName("const FILETIME *")] FILETIME* patime, [NativeTypeName("const FILETIME *")] FILETIME* pmtime);

            [return: NativeTypeName("HRESULT")]
            int SetClass([NativeTypeName("const IID &")] Guid* clsid);

            [return: NativeTypeName("HRESULT")]
            int SetStateBits([NativeTypeName("DWORD")] uint grfStateBits, [NativeTypeName("DWORD")] uint grfMask);

            [return: NativeTypeName("HRESULT")]
            int Stat([NativeTypeName("STATSTG *")] tagSTATSTG* pstatstg, [NativeTypeName("DWORD")] uint grfStatFlag);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (const OLECHAR *, DWORD, DWORD, DWORD, IStream **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, uint, uint, uint, IStream**, int> CreateStream;

            [NativeTypeName("HRESULT (const OLECHAR *, void *, DWORD, DWORD, IStream **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, void*, uint, uint, IStream**, int> OpenStream;

            [NativeTypeName("HRESULT (const OLECHAR *, DWORD, DWORD, DWORD, IStorage **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, uint, uint, uint, IStorage**, int> CreateStorage;

            [NativeTypeName("HRESULT (const OLECHAR *, IStorage *, DWORD, SNB, DWORD, IStorage **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, IStorage*, uint, char**, uint, IStorage**, int> OpenStorage;

            [NativeTypeName("HRESULT (DWORD, const IID *, SNB, IStorage *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, Guid*, char**, IStorage*, int> CopyTo;

            [NativeTypeName("HRESULT (const OLECHAR *, IStorage *, const OLECHAR *, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, IStorage*, char*, uint, int> MoveElementTo;

            [NativeTypeName("HRESULT (DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> Commit;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> Revert;

            [NativeTypeName("HRESULT (DWORD, void *, DWORD, IEnumSTATSTG **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, void*, uint, IEnumSTATSTG**, int> EnumElements;

            [NativeTypeName("HRESULT (const OLECHAR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, int> DestroyElement;

            [NativeTypeName("HRESULT (const OLECHAR *, const OLECHAR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, char*, int> RenameElement;

            [NativeTypeName("HRESULT (const OLECHAR *, const FILETIME *, const FILETIME *, const FILETIME *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, FILETIME*, FILETIME*, FILETIME*, int> SetElementTimes;

            [NativeTypeName("HRESULT (const IID &) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, int> SetClass;

            [NativeTypeName("HRESULT (DWORD, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint, int> SetStateBits;

            [NativeTypeName("HRESULT (STATSTG *, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagSTATSTG*, uint, int> Stat;
        }
    }

    [Guid("0000010B-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IPersistFile : IPersist")]
    [NativeInheritance("IPersist")]
    public unsafe partial struct IPersistFile : IPersistFile.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IPersistFile));

        public Vtbl<IPersistFile>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IPersistFile*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IPersistFile*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IPersistFile*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetClassID([NativeTypeName("CLSID *")] Guid* pClassID)
        {
            return lpVtbl->GetClassID((IPersistFile*)Unsafe.AsPointer(ref this), pClassID);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int IsDirty()
        {
            return lpVtbl->IsDirty((IPersistFile*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Load([NativeTypeName("LPCOLESTR")] char* pszFileName, [NativeTypeName("DWORD")] uint dwMode)
        {
            return lpVtbl->Load((IPersistFile*)Unsafe.AsPointer(ref this), pszFileName, dwMode);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Save([NativeTypeName("LPCOLESTR")] char* pszFileName, [NativeTypeName("BOOL")] int fRemember)
        {
            return lpVtbl->Save((IPersistFile*)Unsafe.AsPointer(ref this), pszFileName, fRemember);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SaveCompleted([NativeTypeName("LPCOLESTR")] char* pszFileName)
        {
            return lpVtbl->SaveCompleted((IPersistFile*)Unsafe.AsPointer(ref this), pszFileName);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetCurFile([NativeTypeName("LPOLESTR *")] char** ppszFileName)
        {
            return lpVtbl->GetCurFile((IPersistFile*)Unsafe.AsPointer(ref this), ppszFileName);
        }

        public interface Interface : IPersist.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int IsDirty();

            [return: NativeTypeName("HRESULT")]
            int Load([NativeTypeName("LPCOLESTR")] char* pszFileName, [NativeTypeName("DWORD")] uint dwMode);

            [return: NativeTypeName("HRESULT")]
            int Save([NativeTypeName("LPCOLESTR")] char* pszFileName, [NativeTypeName("BOOL")] int fRemember);

            [return: NativeTypeName("HRESULT")]
            int SaveCompleted([NativeTypeName("LPCOLESTR")] char* pszFileName);

            [return: NativeTypeName("HRESULT")]
            int GetCurFile([NativeTypeName("LPOLESTR *")] char** ppszFileName);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (CLSID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, int> GetClassID;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> IsDirty;

            [NativeTypeName("HRESULT (LPCOLESTR, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, uint, int> Load;

            [NativeTypeName("HRESULT (LPCOLESTR, BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, int, int> Save;

            [NativeTypeName("HRESULT (LPCOLESTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, int> SaveCompleted;

            [NativeTypeName("HRESULT (LPOLESTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char**, int> GetCurFile;
        }
    }

    [Guid("0000010A-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IPersistStorage : IPersist")]
    [NativeInheritance("IPersist")]
    public unsafe partial struct IPersistStorage : IPersistStorage.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IPersistStorage));

        public Vtbl<IPersistStorage>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IPersistStorage*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IPersistStorage*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IPersistStorage*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetClassID([NativeTypeName("CLSID *")] Guid* pClassID)
        {
            return lpVtbl->GetClassID((IPersistStorage*)Unsafe.AsPointer(ref this), pClassID);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int IsDirty()
        {
            return lpVtbl->IsDirty((IPersistStorage*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int InitNew(IStorage* pStg)
        {
            return lpVtbl->InitNew((IPersistStorage*)Unsafe.AsPointer(ref this), pStg);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Load(IStorage* pStg)
        {
            return lpVtbl->Load((IPersistStorage*)Unsafe.AsPointer(ref this), pStg);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Save(IStorage* pStgSave, [NativeTypeName("BOOL")] int fSameAsLoad)
        {
            return lpVtbl->Save((IPersistStorage*)Unsafe.AsPointer(ref this), pStgSave, fSameAsLoad);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SaveCompleted(IStorage* pStgNew)
        {
            return lpVtbl->SaveCompleted((IPersistStorage*)Unsafe.AsPointer(ref this), pStgNew);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int HandsOffStorage()
        {
            return lpVtbl->HandsOffStorage((IPersistStorage*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IPersist.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int IsDirty();

            [return: NativeTypeName("HRESULT")]
            int InitNew(IStorage* pStg);

            [return: NativeTypeName("HRESULT")]
            int Load(IStorage* pStg);

            [return: NativeTypeName("HRESULT")]
            int Save(IStorage* pStgSave, [NativeTypeName("BOOL")] int fSameAsLoad);

            [return: NativeTypeName("HRESULT")]
            int SaveCompleted(IStorage* pStgNew);

            [return: NativeTypeName("HRESULT")]
            int HandsOffStorage();
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (CLSID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, int> GetClassID;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> IsDirty;

            [NativeTypeName("HRESULT (IStorage *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IStorage*, int> InitNew;

            [NativeTypeName("HRESULT (IStorage *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IStorage*, int> Load;

            [NativeTypeName("HRESULT (IStorage *, BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IStorage*, int, int> Save;

            [NativeTypeName("HRESULT (IStorage *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IStorage*, int> SaveCompleted;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> HandsOffStorage;
        }
    }

    [Guid("0000000A-0000-0000-C000-000000000046")]
    [NativeTypeName("struct ILockBytes : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ILockBytes : ILockBytes.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ILockBytes));

        public Vtbl<ILockBytes>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((ILockBytes*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((ILockBytes*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((ILockBytes*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ReadAt([NativeTypeName("ULARGE_INTEGER")] ulong ulOffset, void* pv, [NativeTypeName("ULONG")] uint cb, [NativeTypeName("ULONG *")] uint* pcbRead)
        {
            return lpVtbl->ReadAt((ILockBytes*)Unsafe.AsPointer(ref this), ulOffset, pv, cb, pcbRead);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int WriteAt([NativeTypeName("ULARGE_INTEGER")] ulong ulOffset, [NativeTypeName("const void *")] void* pv, [NativeTypeName("ULONG")] uint cb, [NativeTypeName("ULONG *")] uint* pcbWritten)
        {
            return lpVtbl->WriteAt((ILockBytes*)Unsafe.AsPointer(ref this), ulOffset, pv, cb, pcbWritten);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Flush()
        {
            return lpVtbl->Flush((ILockBytes*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetSize([NativeTypeName("ULARGE_INTEGER")] ulong cb)
        {
            return lpVtbl->SetSize((ILockBytes*)Unsafe.AsPointer(ref this), cb);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int LockRegion([NativeTypeName("ULARGE_INTEGER")] ulong libOffset, [NativeTypeName("ULARGE_INTEGER")] ulong cb, [NativeTypeName("DWORD")] uint dwLockType)
        {
            return lpVtbl->LockRegion((ILockBytes*)Unsafe.AsPointer(ref this), libOffset, cb, dwLockType);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int UnlockRegion([NativeTypeName("ULARGE_INTEGER")] ulong libOffset, [NativeTypeName("ULARGE_INTEGER")] ulong cb, [NativeTypeName("DWORD")] uint dwLockType)
        {
            return lpVtbl->UnlockRegion((ILockBytes*)Unsafe.AsPointer(ref this), libOffset, cb, dwLockType);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Stat([NativeTypeName("STATSTG *")] tagSTATSTG* pstatstg, [NativeTypeName("DWORD")] uint grfStatFlag)
        {
            return lpVtbl->Stat((ILockBytes*)Unsafe.AsPointer(ref this), pstatstg, grfStatFlag);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int ReadAt([NativeTypeName("ULARGE_INTEGER")] ulong ulOffset, void* pv, [NativeTypeName("ULONG")] uint cb, [NativeTypeName("ULONG *")] uint* pcbRead);

            [return: NativeTypeName("HRESULT")]
            int WriteAt([NativeTypeName("ULARGE_INTEGER")] ulong ulOffset, [NativeTypeName("const void *")] void* pv, [NativeTypeName("ULONG")] uint cb, [NativeTypeName("ULONG *")] uint* pcbWritten);

            [return: NativeTypeName("HRESULT")]
            int Flush();

            [return: NativeTypeName("HRESULT")]
            int SetSize([NativeTypeName("ULARGE_INTEGER")] ulong cb);

            [return: NativeTypeName("HRESULT")]
            int LockRegion([NativeTypeName("ULARGE_INTEGER")] ulong libOffset, [NativeTypeName("ULARGE_INTEGER")] ulong cb, [NativeTypeName("DWORD")] uint dwLockType);

            [return: NativeTypeName("HRESULT")]
            int UnlockRegion([NativeTypeName("ULARGE_INTEGER")] ulong libOffset, [NativeTypeName("ULARGE_INTEGER")] ulong cb, [NativeTypeName("DWORD")] uint dwLockType);

            [return: NativeTypeName("HRESULT")]
            int Stat([NativeTypeName("STATSTG *")] tagSTATSTG* pstatstg, [NativeTypeName("DWORD")] uint grfStatFlag);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (ULARGE_INTEGER, void *, ULONG, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ulong, void*, uint, uint*, int> ReadAt;

            [NativeTypeName("HRESULT (ULARGE_INTEGER, const void *, ULONG, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ulong, void*, uint, uint*, int> WriteAt;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> Flush;

            [NativeTypeName("HRESULT (ULARGE_INTEGER) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ulong, int> SetSize;

            [NativeTypeName("HRESULT (ULARGE_INTEGER, ULARGE_INTEGER, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ulong, ulong, uint, int> LockRegion;

            [NativeTypeName("HRESULT (ULARGE_INTEGER, ULARGE_INTEGER, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ulong, ulong, uint, int> UnlockRegion;

            [NativeTypeName("HRESULT (STATSTG *, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagSTATSTG*, uint, int> Stat;
        }
    }

    public partial struct tagDVTARGETDEVICE
    {
        [NativeTypeName("DWORD")]
        public uint tdSize;

        [NativeTypeName("WORD")]
        public ushort tdDriverNameOffset;

        [NativeTypeName("WORD")]
        public ushort tdDeviceNameOffset;

        [NativeTypeName("WORD")]
        public ushort tdPortNameOffset;

        [NativeTypeName("WORD")]
        public ushort tdExtDevmodeOffset;

        [NativeTypeName("BYTE[1]")]
        public _tdData_e__FixedBuffer tdData;

        public partial struct _tdData_e__FixedBuffer
        {
            public byte e0;

            [UnscopedRef]
            public ref byte this[int index]
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get
                {
                    return ref Unsafe.Add(ref e0, index);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            [UnscopedRef]
            public Span<byte> AsSpan(int length) => MemoryMarshal.CreateSpan(ref e0, length);
        }
    }

    public unsafe partial struct tagFORMATETC
    {
        [NativeTypeName("CLIPFORMAT")]
        public ushort cfFormat;

        [NativeTypeName("DVTARGETDEVICE *")]
        public tagDVTARGETDEVICE* ptd;

        [NativeTypeName("DWORD")]
        public uint dwAspect;

        [NativeTypeName("LONG")]
        public int lindex;

        [NativeTypeName("DWORD")]
        public uint tymed;
    }

    [Guid("00000103-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IEnumFORMATETC : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IEnumFORMATETC : IEnumFORMATETC.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IEnumFORMATETC));

        public Vtbl<IEnumFORMATETC>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IEnumFORMATETC*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IEnumFORMATETC*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IEnumFORMATETC*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Next([NativeTypeName("ULONG")] uint celt, [NativeTypeName("FORMATETC *")] tagFORMATETC* rgelt, [NativeTypeName("ULONG *")] uint* pceltFetched)
        {
            return lpVtbl->Next((IEnumFORMATETC*)Unsafe.AsPointer(ref this), celt, rgelt, pceltFetched);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Skip([NativeTypeName("ULONG")] uint celt)
        {
            return lpVtbl->Skip((IEnumFORMATETC*)Unsafe.AsPointer(ref this), celt);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Reset()
        {
            return lpVtbl->Reset((IEnumFORMATETC*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Clone(IEnumFORMATETC** ppenum)
        {
            return lpVtbl->Clone((IEnumFORMATETC*)Unsafe.AsPointer(ref this), ppenum);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Next([NativeTypeName("ULONG")] uint celt, [NativeTypeName("FORMATETC *")] tagFORMATETC* rgelt, [NativeTypeName("ULONG *")] uint* pceltFetched);

            [return: NativeTypeName("HRESULT")]
            int Skip([NativeTypeName("ULONG")] uint celt);

            [return: NativeTypeName("HRESULT")]
            int Reset();

            [return: NativeTypeName("HRESULT")]
            int Clone(IEnumFORMATETC** ppenum);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (ULONG, FORMATETC *, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, tagFORMATETC*, uint*, int> Next;

            [NativeTypeName("HRESULT (ULONG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> Skip;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> Reset;

            [NativeTypeName("HRESULT (IEnumFORMATETC **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IEnumFORMATETC**, int> Clone;
        }
    }

    public enum tagADVF
    {
        ADVF_NODATA = 1,
        ADVF_PRIMEFIRST = 2,
        ADVF_ONLYONCE = 4,
        ADVF_DATAONSTOP = 64,
        ADVFCACHE_NOHANDLER = 8,
        ADVFCACHE_FORCEBUILTIN = 16,
        ADVFCACHE_ONSAVE = 32,
    }

    public unsafe partial struct tagSTATDATA
    {
        [NativeTypeName("FORMATETC")]
        public tagFORMATETC formatetc;

        [NativeTypeName("DWORD")]
        public uint advf;

        public IAdviseSink* pAdvSink;

        [NativeTypeName("DWORD")]
        public uint dwConnection;
    }

    [Guid("00000105-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IEnumSTATDATA : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IEnumSTATDATA : IEnumSTATDATA.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IEnumSTATDATA));

        public Vtbl<IEnumSTATDATA>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IEnumSTATDATA*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IEnumSTATDATA*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IEnumSTATDATA*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Next([NativeTypeName("ULONG")] uint celt, [NativeTypeName("STATDATA *")] tagSTATDATA* rgelt, [NativeTypeName("ULONG *")] uint* pceltFetched)
        {
            return lpVtbl->Next((IEnumSTATDATA*)Unsafe.AsPointer(ref this), celt, rgelt, pceltFetched);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Skip([NativeTypeName("ULONG")] uint celt)
        {
            return lpVtbl->Skip((IEnumSTATDATA*)Unsafe.AsPointer(ref this), celt);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Reset()
        {
            return lpVtbl->Reset((IEnumSTATDATA*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Clone(IEnumSTATDATA** ppenum)
        {
            return lpVtbl->Clone((IEnumSTATDATA*)Unsafe.AsPointer(ref this), ppenum);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Next([NativeTypeName("ULONG")] uint celt, [NativeTypeName("STATDATA *")] tagSTATDATA* rgelt, [NativeTypeName("ULONG *")] uint* pceltFetched);

            [return: NativeTypeName("HRESULT")]
            int Skip([NativeTypeName("ULONG")] uint celt);

            [return: NativeTypeName("HRESULT")]
            int Reset();

            [return: NativeTypeName("HRESULT")]
            int Clone(IEnumSTATDATA** ppenum);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (ULONG, STATDATA *, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, tagSTATDATA*, uint*, int> Next;

            [NativeTypeName("HRESULT (ULONG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> Skip;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> Reset;

            [NativeTypeName("HRESULT (IEnumSTATDATA **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IEnumSTATDATA**, int> Clone;
        }
    }

    [Guid("00000012-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IRootStorage : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IRootStorage : IRootStorage.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IRootStorage));

        public Vtbl<IRootStorage>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IRootStorage*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IRootStorage*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IRootStorage*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SwitchToFile([NativeTypeName("LPOLESTR")] char* pszFile)
        {
            return lpVtbl->SwitchToFile((IRootStorage*)Unsafe.AsPointer(ref this), pszFile);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int SwitchToFile([NativeTypeName("LPOLESTR")] char* pszFile);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (LPOLESTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, int> SwitchToFile;
        }
    }

    public enum tagTYMED
    {
        TYMED_HGLOBAL = 1,
        TYMED_FILE = 2,
        TYMED_ISTREAM = 4,
        TYMED_ISTORAGE = 8,
        TYMED_GDI = 16,
        TYMED_MFPICT = 32,
        TYMED_ENHMF = 64,
        TYMED_NULL = 0,
    }

    public partial struct tagRemSTGMEDIUM
    {
        [NativeTypeName("DWORD")]
        public uint tymed;

        [NativeTypeName("DWORD")]
        public uint dwHandleType;

        [NativeTypeName("ULONG")]
        public uint pData;

        [NativeTypeName("ULONG")]
        public uint pUnkForRelease;

        [NativeTypeName("ULONG")]
        public uint cbData;

        [NativeTypeName("byte[1]")]
        public _data_e__FixedBuffer data;

        public partial struct _data_e__FixedBuffer
        {
            public byte e0;

            [UnscopedRef]
            public ref byte this[int index]
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get
                {
                    return ref Unsafe.Add(ref e0, index);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            [UnscopedRef]
            public Span<byte> AsSpan(int length) => MemoryMarshal.CreateSpan(ref e0, length);
        }
    }

    public unsafe partial struct tagSTGMEDIUM
    {
        [NativeTypeName("DWORD")]
        public uint tymed;

        [NativeTypeName("__AnonymousRecord_objidl_L12046_C36")]
        public _Anonymous_e__Union Anonymous;

        public IUnknown* pUnkForRelease;

        [UnscopedRef]
        public ref nint* hBitmap
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.hBitmap;
            }
        }

        [UnscopedRef]
        public ref void* hMetaFilePict
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.hMetaFilePict;
            }
        }

        [UnscopedRef]
        public ref nint* hEnhMetaFile
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.hEnhMetaFile;
            }
        }

        [UnscopedRef]
        public ref void* hGlobal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.hGlobal;
            }
        }

        [UnscopedRef]
        public ref char* lpszFileName
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.lpszFileName;
            }
        }

        [UnscopedRef]
        public ref IStream* pstm
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.pstm;
            }
        }

        [UnscopedRef]
        public ref IStorage* pstg
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.pstg;
            }
        }

        [StructLayout(LayoutKind.Explicit)]
        public unsafe partial struct _Anonymous_e__Union
        {
            [FieldOffset(0)]
            [NativeTypeName("HBITMAP")]
            public nint* hBitmap;

            [FieldOffset(0)]
            [NativeTypeName("HMETAFILEPICT")]
            public void* hMetaFilePict;

            [FieldOffset(0)]
            [NativeTypeName("HENHMETAFILE")]
            public nint* hEnhMetaFile;

            [FieldOffset(0)]
            [NativeTypeName("HGLOBAL")]
            public void* hGlobal;

            [FieldOffset(0)]
            [NativeTypeName("LPOLESTR")]
            public char* lpszFileName;

            [FieldOffset(0)]
            public IStream* pstm;

            [FieldOffset(0)]
            public IStorage* pstg;
        }
    }

    public partial struct _FLAG_STGMEDIUM
    {
        [NativeTypeName("LONG")]
        public int ContextFlags;

        [NativeTypeName("LONG")]
        public int fPassOwnership;

        [NativeTypeName("STGMEDIUM")]
        public tagSTGMEDIUM Stgmed;
    }

    [Guid("0000010F-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IAdviseSink : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IAdviseSink : IAdviseSink.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IAdviseSink));

        public Vtbl<IAdviseSink>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IAdviseSink*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IAdviseSink*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IAdviseSink*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void OnDataChange([NativeTypeName("FORMATETC *")] tagFORMATETC* pFormatetc, [NativeTypeName("STGMEDIUM *")] tagSTGMEDIUM* pStgmed)
        {
            lpVtbl->OnDataChange((IAdviseSink*)Unsafe.AsPointer(ref this), pFormatetc, pStgmed);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void OnViewChange([NativeTypeName("DWORD")] uint dwAspect, [NativeTypeName("LONG")] int lindex)
        {
            lpVtbl->OnViewChange((IAdviseSink*)Unsafe.AsPointer(ref this), dwAspect, lindex);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void OnRename(IMoniker* pmk)
        {
            lpVtbl->OnRename((IAdviseSink*)Unsafe.AsPointer(ref this), pmk);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void OnSave()
        {
            lpVtbl->OnSave((IAdviseSink*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void OnClose()
        {
            lpVtbl->OnClose((IAdviseSink*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IUnknown.Interface
        {
            void OnDataChange([NativeTypeName("FORMATETC *")] tagFORMATETC* pFormatetc, [NativeTypeName("STGMEDIUM *")] tagSTGMEDIUM* pStgmed);

            void OnViewChange([NativeTypeName("DWORD")] uint dwAspect, [NativeTypeName("LONG")] int lindex);

            void OnRename(IMoniker* pmk);

            void OnSave();

            void OnClose();
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("void (FORMATETC *, STGMEDIUM *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagFORMATETC*, tagSTGMEDIUM*, void> OnDataChange;

            [NativeTypeName("void (DWORD, LONG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int, void> OnViewChange;

            [NativeTypeName("void (IMoniker *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IMoniker*, void> OnRename;

            [NativeTypeName("void () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void> OnSave;

            [NativeTypeName("void () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void> OnClose;
        }
    }

    [Guid("00000150-0000-0000-C000-000000000046")]
    [NativeTypeName("struct AsyncIAdviseSink : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct AsyncIAdviseSink : AsyncIAdviseSink.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_AsyncIAdviseSink));

        public Vtbl<AsyncIAdviseSink>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((AsyncIAdviseSink*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((AsyncIAdviseSink*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((AsyncIAdviseSink*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Begin_OnDataChange([NativeTypeName("FORMATETC *")] tagFORMATETC* pFormatetc, [NativeTypeName("STGMEDIUM *")] tagSTGMEDIUM* pStgmed)
        {
            lpVtbl->Begin_OnDataChange((AsyncIAdviseSink*)Unsafe.AsPointer(ref this), pFormatetc, pStgmed);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Finish_OnDataChange()
        {
            lpVtbl->Finish_OnDataChange((AsyncIAdviseSink*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Begin_OnViewChange([NativeTypeName("DWORD")] uint dwAspect, [NativeTypeName("LONG")] int lindex)
        {
            lpVtbl->Begin_OnViewChange((AsyncIAdviseSink*)Unsafe.AsPointer(ref this), dwAspect, lindex);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Finish_OnViewChange()
        {
            lpVtbl->Finish_OnViewChange((AsyncIAdviseSink*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Begin_OnRename(IMoniker* pmk)
        {
            lpVtbl->Begin_OnRename((AsyncIAdviseSink*)Unsafe.AsPointer(ref this), pmk);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Finish_OnRename()
        {
            lpVtbl->Finish_OnRename((AsyncIAdviseSink*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Begin_OnSave()
        {
            lpVtbl->Begin_OnSave((AsyncIAdviseSink*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Finish_OnSave()
        {
            lpVtbl->Finish_OnSave((AsyncIAdviseSink*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Begin_OnClose()
        {
            lpVtbl->Begin_OnClose((AsyncIAdviseSink*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Finish_OnClose()
        {
            lpVtbl->Finish_OnClose((AsyncIAdviseSink*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IUnknown.Interface
        {
            void Begin_OnDataChange([NativeTypeName("FORMATETC *")] tagFORMATETC* pFormatetc, [NativeTypeName("STGMEDIUM *")] tagSTGMEDIUM* pStgmed);

            void Finish_OnDataChange();

            void Begin_OnViewChange([NativeTypeName("DWORD")] uint dwAspect, [NativeTypeName("LONG")] int lindex);

            void Finish_OnViewChange();

            void Begin_OnRename(IMoniker* pmk);

            void Finish_OnRename();

            void Begin_OnSave();

            void Finish_OnSave();

            void Begin_OnClose();

            void Finish_OnClose();
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("void (FORMATETC *, STGMEDIUM *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagFORMATETC*, tagSTGMEDIUM*, void> Begin_OnDataChange;

            [NativeTypeName("void () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void> Finish_OnDataChange;

            [NativeTypeName("void (DWORD, LONG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int, void> Begin_OnViewChange;

            [NativeTypeName("void () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void> Finish_OnViewChange;

            [NativeTypeName("void (IMoniker *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IMoniker*, void> Begin_OnRename;

            [NativeTypeName("void () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void> Finish_OnRename;

            [NativeTypeName("void () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void> Begin_OnSave;

            [NativeTypeName("void () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void> Finish_OnSave;

            [NativeTypeName("void () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void> Begin_OnClose;

            [NativeTypeName("void () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void> Finish_OnClose;
        }
    }

    [Guid("00000125-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IAdviseSink2 : IAdviseSink")]
    [NativeInheritance("IAdviseSink")]
    public unsafe partial struct IAdviseSink2 : IAdviseSink2.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IAdviseSink2));

        public Vtbl<IAdviseSink2>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IAdviseSink2*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IAdviseSink2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IAdviseSink2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void OnDataChange([NativeTypeName("FORMATETC *")] tagFORMATETC* pFormatetc, [NativeTypeName("STGMEDIUM *")] tagSTGMEDIUM* pStgmed)
        {
            lpVtbl->OnDataChange((IAdviseSink2*)Unsafe.AsPointer(ref this), pFormatetc, pStgmed);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void OnViewChange([NativeTypeName("DWORD")] uint dwAspect, [NativeTypeName("LONG")] int lindex)
        {
            lpVtbl->OnViewChange((IAdviseSink2*)Unsafe.AsPointer(ref this), dwAspect, lindex);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void OnRename(IMoniker* pmk)
        {
            lpVtbl->OnRename((IAdviseSink2*)Unsafe.AsPointer(ref this), pmk);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void OnSave()
        {
            lpVtbl->OnSave((IAdviseSink2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void OnClose()
        {
            lpVtbl->OnClose((IAdviseSink2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void OnLinkSrcChange(IMoniker* pmk)
        {
            lpVtbl->OnLinkSrcChange((IAdviseSink2*)Unsafe.AsPointer(ref this), pmk);
        }

        public interface Interface : IAdviseSink.Interface
        {
            void OnLinkSrcChange(IMoniker* pmk);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("void (FORMATETC *, STGMEDIUM *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagFORMATETC*, tagSTGMEDIUM*, void> OnDataChange;

            [NativeTypeName("void (DWORD, LONG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int, void> OnViewChange;

            [NativeTypeName("void (IMoniker *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IMoniker*, void> OnRename;

            [NativeTypeName("void () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void> OnSave;

            [NativeTypeName("void () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void> OnClose;

            [NativeTypeName("void (IMoniker *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IMoniker*, void> OnLinkSrcChange;
        }
    }

    [Guid("00000151-0000-0000-C000-000000000046")]
    [NativeTypeName("struct AsyncIAdviseSink2 : AsyncIAdviseSink")]
    [NativeInheritance("AsyncIAdviseSink")]
    public unsafe partial struct AsyncIAdviseSink2 : AsyncIAdviseSink2.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_AsyncIAdviseSink2));

        public Vtbl<AsyncIAdviseSink2>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((AsyncIAdviseSink2*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((AsyncIAdviseSink2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((AsyncIAdviseSink2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Begin_OnDataChange([NativeTypeName("FORMATETC *")] tagFORMATETC* pFormatetc, [NativeTypeName("STGMEDIUM *")] tagSTGMEDIUM* pStgmed)
        {
            lpVtbl->Begin_OnDataChange((AsyncIAdviseSink2*)Unsafe.AsPointer(ref this), pFormatetc, pStgmed);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Finish_OnDataChange()
        {
            lpVtbl->Finish_OnDataChange((AsyncIAdviseSink2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Begin_OnViewChange([NativeTypeName("DWORD")] uint dwAspect, [NativeTypeName("LONG")] int lindex)
        {
            lpVtbl->Begin_OnViewChange((AsyncIAdviseSink2*)Unsafe.AsPointer(ref this), dwAspect, lindex);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Finish_OnViewChange()
        {
            lpVtbl->Finish_OnViewChange((AsyncIAdviseSink2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Begin_OnRename(IMoniker* pmk)
        {
            lpVtbl->Begin_OnRename((AsyncIAdviseSink2*)Unsafe.AsPointer(ref this), pmk);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Finish_OnRename()
        {
            lpVtbl->Finish_OnRename((AsyncIAdviseSink2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Begin_OnSave()
        {
            lpVtbl->Begin_OnSave((AsyncIAdviseSink2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Finish_OnSave()
        {
            lpVtbl->Finish_OnSave((AsyncIAdviseSink2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Begin_OnClose()
        {
            lpVtbl->Begin_OnClose((AsyncIAdviseSink2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Finish_OnClose()
        {
            lpVtbl->Finish_OnClose((AsyncIAdviseSink2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Begin_OnLinkSrcChange(IMoniker* pmk)
        {
            lpVtbl->Begin_OnLinkSrcChange((AsyncIAdviseSink2*)Unsafe.AsPointer(ref this), pmk);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Finish_OnLinkSrcChange()
        {
            lpVtbl->Finish_OnLinkSrcChange((AsyncIAdviseSink2*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : AsyncIAdviseSink.Interface
        {
            void Begin_OnLinkSrcChange(IMoniker* pmk);

            void Finish_OnLinkSrcChange();
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("void (FORMATETC *, STGMEDIUM *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagFORMATETC*, tagSTGMEDIUM*, void> Begin_OnDataChange;

            [NativeTypeName("void () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void> Finish_OnDataChange;

            [NativeTypeName("void (DWORD, LONG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int, void> Begin_OnViewChange;

            [NativeTypeName("void () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void> Finish_OnViewChange;

            [NativeTypeName("void (IMoniker *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IMoniker*, void> Begin_OnRename;

            [NativeTypeName("void () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void> Finish_OnRename;

            [NativeTypeName("void () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void> Begin_OnSave;

            [NativeTypeName("void () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void> Finish_OnSave;

            [NativeTypeName("void () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void> Begin_OnClose;

            [NativeTypeName("void () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void> Finish_OnClose;

            [NativeTypeName("void (IMoniker *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IMoniker*, void> Begin_OnLinkSrcChange;

            [NativeTypeName("void () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void> Finish_OnLinkSrcChange;
        }
    }

    public enum tagDATADIR
    {
        DATADIR_GET = 1,
        DATADIR_SET = 2,
    }

    [Guid("0000010E-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IDataObject : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IDataObject : IDataObject.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDataObject));

        public Vtbl<IDataObject>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IDataObject*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IDataObject*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IDataObject*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetData([NativeTypeName("FORMATETC *")] tagFORMATETC* pformatetcIn, [NativeTypeName("STGMEDIUM *")] tagSTGMEDIUM* pmedium)
        {
            return lpVtbl->GetData((IDataObject*)Unsafe.AsPointer(ref this), pformatetcIn, pmedium);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetDataHere([NativeTypeName("FORMATETC *")] tagFORMATETC* pformatetc, [NativeTypeName("STGMEDIUM *")] tagSTGMEDIUM* pmedium)
        {
            return lpVtbl->GetDataHere((IDataObject*)Unsafe.AsPointer(ref this), pformatetc, pmedium);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryGetData([NativeTypeName("FORMATETC *")] tagFORMATETC* pformatetc)
        {
            return lpVtbl->QueryGetData((IDataObject*)Unsafe.AsPointer(ref this), pformatetc);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetCanonicalFormatEtc([NativeTypeName("FORMATETC *")] tagFORMATETC* pformatectIn, [NativeTypeName("FORMATETC *")] tagFORMATETC* pformatetcOut)
        {
            return lpVtbl->GetCanonicalFormatEtc((IDataObject*)Unsafe.AsPointer(ref this), pformatectIn, pformatetcOut);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetData([NativeTypeName("FORMATETC *")] tagFORMATETC* pformatetc, [NativeTypeName("STGMEDIUM *")] tagSTGMEDIUM* pmedium, [NativeTypeName("BOOL")] int fRelease)
        {
            return lpVtbl->SetData((IDataObject*)Unsafe.AsPointer(ref this), pformatetc, pmedium, fRelease);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int EnumFormatEtc([NativeTypeName("DWORD")] uint dwDirection, IEnumFORMATETC** ppenumFormatEtc)
        {
            return lpVtbl->EnumFormatEtc((IDataObject*)Unsafe.AsPointer(ref this), dwDirection, ppenumFormatEtc);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int DAdvise([NativeTypeName("FORMATETC *")] tagFORMATETC* pformatetc, [NativeTypeName("DWORD")] uint advf, IAdviseSink* pAdvSink, [NativeTypeName("DWORD *")] uint* pdwConnection)
        {
            return lpVtbl->DAdvise((IDataObject*)Unsafe.AsPointer(ref this), pformatetc, advf, pAdvSink, pdwConnection);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int DUnadvise([NativeTypeName("DWORD")] uint dwConnection)
        {
            return lpVtbl->DUnadvise((IDataObject*)Unsafe.AsPointer(ref this), dwConnection);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int EnumDAdvise(IEnumSTATDATA** ppenumAdvise)
        {
            return lpVtbl->EnumDAdvise((IDataObject*)Unsafe.AsPointer(ref this), ppenumAdvise);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int GetData([NativeTypeName("FORMATETC *")] tagFORMATETC* pformatetcIn, [NativeTypeName("STGMEDIUM *")] tagSTGMEDIUM* pmedium);

            [return: NativeTypeName("HRESULT")]
            int GetDataHere([NativeTypeName("FORMATETC *")] tagFORMATETC* pformatetc, [NativeTypeName("STGMEDIUM *")] tagSTGMEDIUM* pmedium);

            [return: NativeTypeName("HRESULT")]
            int QueryGetData([NativeTypeName("FORMATETC *")] tagFORMATETC* pformatetc);

            [return: NativeTypeName("HRESULT")]
            int GetCanonicalFormatEtc([NativeTypeName("FORMATETC *")] tagFORMATETC* pformatectIn, [NativeTypeName("FORMATETC *")] tagFORMATETC* pformatetcOut);

            [return: NativeTypeName("HRESULT")]
            int SetData([NativeTypeName("FORMATETC *")] tagFORMATETC* pformatetc, [NativeTypeName("STGMEDIUM *")] tagSTGMEDIUM* pmedium, [NativeTypeName("BOOL")] int fRelease);

            [return: NativeTypeName("HRESULT")]
            int EnumFormatEtc([NativeTypeName("DWORD")] uint dwDirection, IEnumFORMATETC** ppenumFormatEtc);

            [return: NativeTypeName("HRESULT")]
            int DAdvise([NativeTypeName("FORMATETC *")] tagFORMATETC* pformatetc, [NativeTypeName("DWORD")] uint advf, IAdviseSink* pAdvSink, [NativeTypeName("DWORD *")] uint* pdwConnection);

            [return: NativeTypeName("HRESULT")]
            int DUnadvise([NativeTypeName("DWORD")] uint dwConnection);

            [return: NativeTypeName("HRESULT")]
            int EnumDAdvise(IEnumSTATDATA** ppenumAdvise);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (FORMATETC *, STGMEDIUM *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagFORMATETC*, tagSTGMEDIUM*, int> GetData;

            [NativeTypeName("HRESULT (FORMATETC *, STGMEDIUM *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagFORMATETC*, tagSTGMEDIUM*, int> GetDataHere;

            [NativeTypeName("HRESULT (FORMATETC *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagFORMATETC*, int> QueryGetData;

            [NativeTypeName("HRESULT (FORMATETC *, FORMATETC *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagFORMATETC*, tagFORMATETC*, int> GetCanonicalFormatEtc;

            [NativeTypeName("HRESULT (FORMATETC *, STGMEDIUM *, BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagFORMATETC*, tagSTGMEDIUM*, int, int> SetData;

            [NativeTypeName("HRESULT (DWORD, IEnumFORMATETC **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, IEnumFORMATETC**, int> EnumFormatEtc;

            [NativeTypeName("HRESULT (FORMATETC *, DWORD, IAdviseSink *, DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagFORMATETC*, uint, IAdviseSink*, uint*, int> DAdvise;

            [NativeTypeName("HRESULT (DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> DUnadvise;

            [NativeTypeName("HRESULT (IEnumSTATDATA **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IEnumSTATDATA**, int> EnumDAdvise;
        }
    }

    [Guid("00000110-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IDataAdviseHolder : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IDataAdviseHolder : IDataAdviseHolder.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDataAdviseHolder));

        public Vtbl<IDataAdviseHolder>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IDataAdviseHolder*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IDataAdviseHolder*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IDataAdviseHolder*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Advise(IDataObject* pDataObject, [NativeTypeName("FORMATETC *")] tagFORMATETC* pFetc, [NativeTypeName("DWORD")] uint advf, IAdviseSink* pAdvise, [NativeTypeName("DWORD *")] uint* pdwConnection)
        {
            return lpVtbl->Advise((IDataAdviseHolder*)Unsafe.AsPointer(ref this), pDataObject, pFetc, advf, pAdvise, pdwConnection);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Unadvise([NativeTypeName("DWORD")] uint dwConnection)
        {
            return lpVtbl->Unadvise((IDataAdviseHolder*)Unsafe.AsPointer(ref this), dwConnection);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int EnumAdvise(IEnumSTATDATA** ppenumAdvise)
        {
            return lpVtbl->EnumAdvise((IDataAdviseHolder*)Unsafe.AsPointer(ref this), ppenumAdvise);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SendOnDataChange(IDataObject* pDataObject, [NativeTypeName("DWORD")] uint dwReserved, [NativeTypeName("DWORD")] uint advf)
        {
            return lpVtbl->SendOnDataChange((IDataAdviseHolder*)Unsafe.AsPointer(ref this), pDataObject, dwReserved, advf);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Advise(IDataObject* pDataObject, [NativeTypeName("FORMATETC *")] tagFORMATETC* pFetc, [NativeTypeName("DWORD")] uint advf, IAdviseSink* pAdvise, [NativeTypeName("DWORD *")] uint* pdwConnection);

            [return: NativeTypeName("HRESULT")]
            int Unadvise([NativeTypeName("DWORD")] uint dwConnection);

            [return: NativeTypeName("HRESULT")]
            int EnumAdvise(IEnumSTATDATA** ppenumAdvise);

            [return: NativeTypeName("HRESULT")]
            int SendOnDataChange(IDataObject* pDataObject, [NativeTypeName("DWORD")] uint dwReserved, [NativeTypeName("DWORD")] uint advf);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (IDataObject *, FORMATETC *, DWORD, IAdviseSink *, DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IDataObject*, tagFORMATETC*, uint, IAdviseSink*, uint*, int> Advise;

            [NativeTypeName("HRESULT (DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> Unadvise;

            [NativeTypeName("HRESULT (IEnumSTATDATA **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IEnumSTATDATA**, int> EnumAdvise;

            [NativeTypeName("HRESULT (IDataObject *, DWORD, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IDataObject*, uint, uint, int> SendOnDataChange;
        }
    }

    public enum tagCALLTYPE
    {
        CALLTYPE_TOPLEVEL = 1,
        CALLTYPE_NESTED = 2,
        CALLTYPE_ASYNC = 3,
        CALLTYPE_TOPLEVEL_CALLPENDING = 4,
        CALLTYPE_ASYNC_CALLPENDING = 5,
    }

    public enum tagSERVERCALL
    {
        SERVERCALL_ISHANDLED = 0,
        SERVERCALL_REJECTED = 1,
        SERVERCALL_RETRYLATER = 2,
    }

    public enum tagPENDINGTYPE
    {
        PENDINGTYPE_TOPLEVEL = 1,
        PENDINGTYPE_NESTED = 2,
    }

    public enum tagPENDINGMSG
    {
        PENDINGMSG_CANCELCALL = 0,
        PENDINGMSG_WAITNOPROCESS = 1,
        PENDINGMSG_WAITDEFPROCESS = 2,
    }

    public unsafe partial struct tagINTERFACEINFO
    {
        public IUnknown* pUnk;

        [NativeTypeName("IID")]
        public Guid iid;

        [NativeTypeName("WORD")]
        public ushort wMethod;
    }

    [Guid("00000016-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IMessageFilter : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IMessageFilter : IMessageFilter.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IMessageFilter));

        public Vtbl<IMessageFilter>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IMessageFilter*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IMessageFilter*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IMessageFilter*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("DWORD")]
        public uint HandleInComingCall([NativeTypeName("DWORD")] uint dwCallType, [NativeTypeName("HTASK")] nint* htaskCaller, [NativeTypeName("DWORD")] uint dwTickCount, [NativeTypeName("LPINTERFACEINFO")] tagINTERFACEINFO* lpInterfaceInfo)
        {
            return lpVtbl->HandleInComingCall((IMessageFilter*)Unsafe.AsPointer(ref this), dwCallType, htaskCaller, dwTickCount, lpInterfaceInfo);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("DWORD")]
        public uint RetryRejectedCall([NativeTypeName("HTASK")] nint* htaskCallee, [NativeTypeName("DWORD")] uint dwTickCount, [NativeTypeName("DWORD")] uint dwRejectType)
        {
            return lpVtbl->RetryRejectedCall((IMessageFilter*)Unsafe.AsPointer(ref this), htaskCallee, dwTickCount, dwRejectType);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("DWORD")]
        public uint MessagePending([NativeTypeName("HTASK")] nint* htaskCallee, [NativeTypeName("DWORD")] uint dwTickCount, [NativeTypeName("DWORD")] uint dwPendingType)
        {
            return lpVtbl->MessagePending((IMessageFilter*)Unsafe.AsPointer(ref this), htaskCallee, dwTickCount, dwPendingType);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("DWORD")]
            uint HandleInComingCall([NativeTypeName("DWORD")] uint dwCallType, [NativeTypeName("HTASK")] nint* htaskCaller, [NativeTypeName("DWORD")] uint dwTickCount, [NativeTypeName("LPINTERFACEINFO")] tagINTERFACEINFO* lpInterfaceInfo);

            [return: NativeTypeName("DWORD")]
            uint RetryRejectedCall([NativeTypeName("HTASK")] nint* htaskCallee, [NativeTypeName("DWORD")] uint dwTickCount, [NativeTypeName("DWORD")] uint dwRejectType);

            [return: NativeTypeName("DWORD")]
            uint MessagePending([NativeTypeName("HTASK")] nint* htaskCallee, [NativeTypeName("DWORD")] uint dwTickCount, [NativeTypeName("DWORD")] uint dwPendingType);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("DWORD (DWORD, HTASK, DWORD, LPINTERFACEINFO) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, nint*, uint, tagINTERFACEINFO*, uint> HandleInComingCall;

            [NativeTypeName("DWORD (HTASK, DWORD, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, nint*, uint, uint, uint> RetryRejectedCall;

            [NativeTypeName("DWORD (HTASK, DWORD, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, nint*, uint, uint, uint> MessagePending;
        }
    }

    [Guid("00000140-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IClassActivator : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IClassActivator : IClassActivator.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IClassActivator));

        public Vtbl<IClassActivator>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IClassActivator*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IClassActivator*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IClassActivator*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetClassObject([NativeTypeName("const IID &")] Guid* rclsid, [NativeTypeName("DWORD")] uint dwClassContext, [NativeTypeName("LCID")] uint locale, [NativeTypeName("const IID &")] Guid* riid, void** ppv)
        {
            return lpVtbl->GetClassObject((IClassActivator*)Unsafe.AsPointer(ref this), rclsid, dwClassContext, locale, riid, ppv);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int GetClassObject([NativeTypeName("const IID &")] Guid* rclsid, [NativeTypeName("DWORD")] uint dwClassContext, [NativeTypeName("LCID")] uint locale, [NativeTypeName("const IID &")] Guid* riid, void** ppv);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (const IID &, DWORD, LCID, const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, uint, uint, Guid*, void**, int> GetClassObject;
        }
    }

    [Guid("99CAF010-415E-11CF-8814-00AA00B569F5")]
    [NativeTypeName("struct IFillLockBytes : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IFillLockBytes : IFillLockBytes.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IFillLockBytes));

        public Vtbl<IFillLockBytes>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IFillLockBytes*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IFillLockBytes*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IFillLockBytes*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int FillAppend([NativeTypeName("const void *")] void* pv, [NativeTypeName("ULONG")] uint cb, [NativeTypeName("ULONG *")] uint* pcbWritten)
        {
            return lpVtbl->FillAppend((IFillLockBytes*)Unsafe.AsPointer(ref this), pv, cb, pcbWritten);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int FillAt([NativeTypeName("ULARGE_INTEGER")] ulong ulOffset, [NativeTypeName("const void *")] void* pv, [NativeTypeName("ULONG")] uint cb, [NativeTypeName("ULONG *")] uint* pcbWritten)
        {
            return lpVtbl->FillAt((IFillLockBytes*)Unsafe.AsPointer(ref this), ulOffset, pv, cb, pcbWritten);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetFillSize([NativeTypeName("ULARGE_INTEGER")] ulong ulSize)
        {
            return lpVtbl->SetFillSize((IFillLockBytes*)Unsafe.AsPointer(ref this), ulSize);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Terminate([NativeTypeName("BOOL")] int bCanceled)
        {
            return lpVtbl->Terminate((IFillLockBytes*)Unsafe.AsPointer(ref this), bCanceled);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int FillAppend([NativeTypeName("const void *")] void* pv, [NativeTypeName("ULONG")] uint cb, [NativeTypeName("ULONG *")] uint* pcbWritten);

            [return: NativeTypeName("HRESULT")]
            int FillAt([NativeTypeName("ULARGE_INTEGER")] ulong ulOffset, [NativeTypeName("const void *")] void* pv, [NativeTypeName("ULONG")] uint cb, [NativeTypeName("ULONG *")] uint* pcbWritten);

            [return: NativeTypeName("HRESULT")]
            int SetFillSize([NativeTypeName("ULARGE_INTEGER")] ulong ulSize);

            [return: NativeTypeName("HRESULT")]
            int Terminate([NativeTypeName("BOOL")] int bCanceled);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (const void *, ULONG, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*, uint, uint*, int> FillAppend;

            [NativeTypeName("HRESULT (ULARGE_INTEGER, const void *, ULONG, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ulong, void*, uint, uint*, int> FillAt;

            [NativeTypeName("HRESULT (ULARGE_INTEGER) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ulong, int> SetFillSize;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> Terminate;
        }
    }

    [Guid("A9D758A0-4617-11CF-95FC-00AA00680DB4")]
    [NativeTypeName("struct IProgressNotify : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IProgressNotify : IProgressNotify.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IProgressNotify));

        public Vtbl<IProgressNotify>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IProgressNotify*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IProgressNotify*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IProgressNotify*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnProgress([NativeTypeName("DWORD")] uint dwProgressCurrent, [NativeTypeName("DWORD")] uint dwProgressMaximum, [NativeTypeName("BOOL")] int fAccurate, [NativeTypeName("BOOL")] int fOwner)
        {
            return lpVtbl->OnProgress((IProgressNotify*)Unsafe.AsPointer(ref this), dwProgressCurrent, dwProgressMaximum, fAccurate, fOwner);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int OnProgress([NativeTypeName("DWORD")] uint dwProgressCurrent, [NativeTypeName("DWORD")] uint dwProgressMaximum, [NativeTypeName("BOOL")] int fAccurate, [NativeTypeName("BOOL")] int fOwner);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (DWORD, DWORD, BOOL, BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint, int, int, int> OnProgress;
        }
    }

    public unsafe partial struct tagStorageLayout
    {
        [NativeTypeName("DWORD")]
        public uint LayoutType;

        [NativeTypeName("OLECHAR *")]
        public char* pwcsElementName;

        [NativeTypeName("LARGE_INTEGER")]
        public long cOffset;

        [NativeTypeName("LARGE_INTEGER")]
        public long cBytes;
    }

    [Guid("0E6D4D90-6738-11CF-9608-00AA00680DB4")]
    [NativeTypeName("struct ILayoutStorage : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ILayoutStorage : ILayoutStorage.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ILayoutStorage));

        public Vtbl<ILayoutStorage>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((ILayoutStorage*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((ILayoutStorage*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((ILayoutStorage*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int LayoutScript([NativeTypeName("StorageLayout *")] tagStorageLayout* pStorageLayout, [NativeTypeName("DWORD")] uint nEntries, [NativeTypeName("DWORD")] uint glfInterleavedFlag)
        {
            return lpVtbl->LayoutScript((ILayoutStorage*)Unsafe.AsPointer(ref this), pStorageLayout, nEntries, glfInterleavedFlag);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int BeginMonitor()
        {
            return lpVtbl->BeginMonitor((ILayoutStorage*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int EndMonitor()
        {
            return lpVtbl->EndMonitor((ILayoutStorage*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ReLayoutDocfile([NativeTypeName("OLECHAR *")] char* pwcsNewDfName)
        {
            return lpVtbl->ReLayoutDocfile((ILayoutStorage*)Unsafe.AsPointer(ref this), pwcsNewDfName);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ReLayoutDocfileOnILockBytes(ILockBytes* pILockBytes)
        {
            return lpVtbl->ReLayoutDocfileOnILockBytes((ILayoutStorage*)Unsafe.AsPointer(ref this), pILockBytes);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int LayoutScript([NativeTypeName("StorageLayout *")] tagStorageLayout* pStorageLayout, [NativeTypeName("DWORD")] uint nEntries, [NativeTypeName("DWORD")] uint glfInterleavedFlag);

            [return: NativeTypeName("HRESULT")]
            int BeginMonitor();

            [return: NativeTypeName("HRESULT")]
            int EndMonitor();

            [return: NativeTypeName("HRESULT")]
            int ReLayoutDocfile([NativeTypeName("OLECHAR *")] char* pwcsNewDfName);

            [return: NativeTypeName("HRESULT")]
            int ReLayoutDocfileOnILockBytes(ILockBytes* pILockBytes);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (StorageLayout *, DWORD, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagStorageLayout*, uint, uint, int> LayoutScript;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> BeginMonitor;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> EndMonitor;

            [NativeTypeName("HRESULT (OLECHAR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, int> ReLayoutDocfile;

            [NativeTypeName("HRESULT (ILockBytes *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ILockBytes*, int> ReLayoutDocfileOnILockBytes;
        }
    }

    [Guid("30F3D47A-6447-11D1-8E3C-00C04FB9386D")]
    [NativeTypeName("struct IBlockingLock : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IBlockingLock : IBlockingLock.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IBlockingLock));

        public Vtbl<IBlockingLock>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IBlockingLock*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IBlockingLock*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IBlockingLock*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Lock([NativeTypeName("DWORD")] uint dwTimeout)
        {
            return lpVtbl->Lock((IBlockingLock*)Unsafe.AsPointer(ref this), dwTimeout);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Unlock()
        {
            return lpVtbl->Unlock((IBlockingLock*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Lock([NativeTypeName("DWORD")] uint dwTimeout);

            [return: NativeTypeName("HRESULT")]
            int Unlock();
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> Lock;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> Unlock;
        }
    }

    [Guid("BC0BF6AE-8878-11D1-83E9-00C04FC2C6D4")]
    [NativeTypeName("struct ITimeAndNoticeControl : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ITimeAndNoticeControl : ITimeAndNoticeControl.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ITimeAndNoticeControl));

        public Vtbl<ITimeAndNoticeControl>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((ITimeAndNoticeControl*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((ITimeAndNoticeControl*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((ITimeAndNoticeControl*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SuppressChanges([NativeTypeName("DWORD")] uint res1, [NativeTypeName("DWORD")] uint res2)
        {
            return lpVtbl->SuppressChanges((ITimeAndNoticeControl*)Unsafe.AsPointer(ref this), res1, res2);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int SuppressChanges([NativeTypeName("DWORD")] uint res1, [NativeTypeName("DWORD")] uint res2);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (DWORD, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint, int> SuppressChanges;
        }
    }

    [Guid("8D19C834-8879-11D1-83E9-00C04FC2C6D4")]
    [NativeTypeName("struct IOplockStorage : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IOplockStorage : IOplockStorage.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IOplockStorage));

        public Vtbl<IOplockStorage>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IOplockStorage*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IOplockStorage*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IOplockStorage*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int CreateStorageEx([NativeTypeName("LPCWSTR")] char* pwcsName, [NativeTypeName("DWORD")] uint grfMode, [NativeTypeName("DWORD")] uint stgfmt, [NativeTypeName("DWORD")] uint grfAttrs, [NativeTypeName("const IID &")] Guid* riid, void** ppstgOpen)
        {
            return lpVtbl->CreateStorageEx((IOplockStorage*)Unsafe.AsPointer(ref this), pwcsName, grfMode, stgfmt, grfAttrs, riid, ppstgOpen);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OpenStorageEx([NativeTypeName("LPCWSTR")] char* pwcsName, [NativeTypeName("DWORD")] uint grfMode, [NativeTypeName("DWORD")] uint stgfmt, [NativeTypeName("DWORD")] uint grfAttrs, [NativeTypeName("const IID &")] Guid* riid, void** ppstgOpen)
        {
            return lpVtbl->OpenStorageEx((IOplockStorage*)Unsafe.AsPointer(ref this), pwcsName, grfMode, stgfmt, grfAttrs, riid, ppstgOpen);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int CreateStorageEx([NativeTypeName("LPCWSTR")] char* pwcsName, [NativeTypeName("DWORD")] uint grfMode, [NativeTypeName("DWORD")] uint stgfmt, [NativeTypeName("DWORD")] uint grfAttrs, [NativeTypeName("const IID &")] Guid* riid, void** ppstgOpen);

            [return: NativeTypeName("HRESULT")]
            int OpenStorageEx([NativeTypeName("LPCWSTR")] char* pwcsName, [NativeTypeName("DWORD")] uint grfMode, [NativeTypeName("DWORD")] uint stgfmt, [NativeTypeName("DWORD")] uint grfAttrs, [NativeTypeName("const IID &")] Guid* riid, void** ppstgOpen);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (LPCWSTR, DWORD, DWORD, DWORD, const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, uint, uint, uint, Guid*, void**, int> CreateStorageEx;

            [NativeTypeName("HRESULT (LPCWSTR, DWORD, DWORD, DWORD, const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, uint, uint, uint, Guid*, void**, int> OpenStorageEx;
        }
    }

    [Guid("0E6D4D92-6738-11CF-9608-00AA00680DB4")]
    [NativeTypeName("struct IDirectWriterLock : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IDirectWriterLock : IDirectWriterLock.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDirectWriterLock));

        public Vtbl<IDirectWriterLock>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IDirectWriterLock*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IDirectWriterLock*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IDirectWriterLock*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int WaitForWriteAccess([NativeTypeName("DWORD")] uint dwTimeout)
        {
            return lpVtbl->WaitForWriteAccess((IDirectWriterLock*)Unsafe.AsPointer(ref this), dwTimeout);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ReleaseWriteAccess()
        {
            return lpVtbl->ReleaseWriteAccess((IDirectWriterLock*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int HaveWriteAccess()
        {
            return lpVtbl->HaveWriteAccess((IDirectWriterLock*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int WaitForWriteAccess([NativeTypeName("DWORD")] uint dwTimeout);

            [return: NativeTypeName("HRESULT")]
            int ReleaseWriteAccess();

            [return: NativeTypeName("HRESULT")]
            int HaveWriteAccess();
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> WaitForWriteAccess;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> ReleaseWriteAccess;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> HaveWriteAccess;
        }
    }

    [Guid("00000026-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IUrlMon : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IUrlMon : IUrlMon.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IUrlMon));

        public Vtbl<IUrlMon>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IUrlMon*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IUrlMon*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IUrlMon*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int AsyncGetClassBits([NativeTypeName("const IID &")] Guid* rclsid, [NativeTypeName("LPCWSTR")] char* pszTYPE, [NativeTypeName("LPCWSTR")] char* pszExt, [NativeTypeName("DWORD")] uint dwFileVersionMS, [NativeTypeName("DWORD")] uint dwFileVersionLS, [NativeTypeName("LPCWSTR")] char* pszCodeBase, IBindCtx* pbc, [NativeTypeName("DWORD")] uint dwClassContext, [NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("DWORD")] uint flags)
        {
            return lpVtbl->AsyncGetClassBits((IUrlMon*)Unsafe.AsPointer(ref this), rclsid, pszTYPE, pszExt, dwFileVersionMS, dwFileVersionLS, pszCodeBase, pbc, dwClassContext, riid, flags);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int AsyncGetClassBits([NativeTypeName("const IID &")] Guid* rclsid, [NativeTypeName("LPCWSTR")] char* pszTYPE, [NativeTypeName("LPCWSTR")] char* pszExt, [NativeTypeName("DWORD")] uint dwFileVersionMS, [NativeTypeName("DWORD")] uint dwFileVersionLS, [NativeTypeName("LPCWSTR")] char* pszCodeBase, IBindCtx* pbc, [NativeTypeName("DWORD")] uint dwClassContext, [NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("DWORD")] uint flags);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (const IID &, LPCWSTR, LPCWSTR, DWORD, DWORD, LPCWSTR, IBindCtx *, DWORD, const IID &, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, char*, char*, uint, uint, char*, IBindCtx*, uint, Guid*, uint, int> AsyncGetClassBits;
        }
    }

    [Guid("00000145-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IForegroundTransfer : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IForegroundTransfer : IForegroundTransfer.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IForegroundTransfer));

        public Vtbl<IForegroundTransfer>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IForegroundTransfer*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IForegroundTransfer*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IForegroundTransfer*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int AllowForegroundTransfer(void* lpvReserved)
        {
            return lpVtbl->AllowForegroundTransfer((IForegroundTransfer*)Unsafe.AsPointer(ref this), lpvReserved);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int AllowForegroundTransfer(void* lpvReserved);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (void *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*, int> AllowForegroundTransfer;
        }
    }

    [Guid("969DC708-5C76-11D1-8D86-0000F804B057")]
    [NativeTypeName("struct IThumbnailExtractor : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IThumbnailExtractor : IThumbnailExtractor.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IThumbnailExtractor));

        public Vtbl<IThumbnailExtractor>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IThumbnailExtractor*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IThumbnailExtractor*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IThumbnailExtractor*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ExtractThumbnail(IStorage* pStg, [NativeTypeName("ULONG")] uint ulLength, [NativeTypeName("ULONG")] uint ulHeight, [NativeTypeName("ULONG *")] uint* pulOutputLength, [NativeTypeName("ULONG *")] uint* pulOutputHeight, [NativeTypeName("HBITMAP *")] nint** phOutputBitmap)
        {
            return lpVtbl->ExtractThumbnail((IThumbnailExtractor*)Unsafe.AsPointer(ref this), pStg, ulLength, ulHeight, pulOutputLength, pulOutputHeight, phOutputBitmap);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnFileUpdated(IStorage* pStg)
        {
            return lpVtbl->OnFileUpdated((IThumbnailExtractor*)Unsafe.AsPointer(ref this), pStg);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int ExtractThumbnail(IStorage* pStg, [NativeTypeName("ULONG")] uint ulLength, [NativeTypeName("ULONG")] uint ulHeight, [NativeTypeName("ULONG *")] uint* pulOutputLength, [NativeTypeName("ULONG *")] uint* pulOutputHeight, [NativeTypeName("HBITMAP *")] nint** phOutputBitmap);

            [return: NativeTypeName("HRESULT")]
            int OnFileUpdated(IStorage* pStg);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (IStorage *, ULONG, ULONG, ULONG *, ULONG *, HBITMAP *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IStorage*, uint, uint, uint*, uint*, nint**, int> ExtractThumbnail;

            [NativeTypeName("HRESULT (IStorage *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IStorage*, int> OnFileUpdated;
        }
    }

    [Guid("947990DE-CC28-11D2-A0F7-00805F858FB1")]
    [NativeTypeName("struct IDummyHICONIncluder : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IDummyHICONIncluder : IDummyHICONIncluder.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDummyHICONIncluder));

        public Vtbl<IDummyHICONIncluder>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IDummyHICONIncluder*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IDummyHICONIncluder*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IDummyHICONIncluder*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Dummy([NativeTypeName("HICON")] nint* h1, [NativeTypeName("HDC")] nint* h2)
        {
            return lpVtbl->Dummy((IDummyHICONIncluder*)Unsafe.AsPointer(ref this), h1, h2);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Dummy([NativeTypeName("HICON")] nint* h1, [NativeTypeName("HDC")] nint* h2);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (HICON, HDC) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, nint*, nint*, int> Dummy;
        }
    }

    public enum tagApplicationType
    {
        ServerApplication = 0,
        LibraryApplication = (ServerApplication + 1),
    }

    public enum tagShutdownType
    {
        IdleShutdown = 0,
        ForcedShutdown = (IdleShutdown + 1),
    }

    [Guid("000001D5-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IProcessLock : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IProcessLock : IProcessLock.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IProcessLock));

        public Vtbl<IProcessLock>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IProcessLock*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IProcessLock*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IProcessLock*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRefOnProcess()
        {
            return lpVtbl->AddRefOnProcess((IProcessLock*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint ReleaseRefOnProcess()
        {
            return lpVtbl->ReleaseRefOnProcess((IProcessLock*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("ULONG")]
            uint AddRefOnProcess();

            [return: NativeTypeName("ULONG")]
            uint ReleaseRefOnProcess();
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRefOnProcess;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> ReleaseRefOnProcess;
        }
    }

    [Guid("000001D4-0000-0000-C000-000000000046")]
    [NativeTypeName("struct ISurrogateService : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ISurrogateService : ISurrogateService.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ISurrogateService));

        public Vtbl<ISurrogateService>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((ISurrogateService*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((ISurrogateService*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((ISurrogateService*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Init([NativeTypeName("const GUID &")] Guid* rguidProcessID, IProcessLock* pProcessLock, [NativeTypeName("BOOL *")] int* pfApplicationAware)
        {
            return lpVtbl->Init((ISurrogateService*)Unsafe.AsPointer(ref this), rguidProcessID, pProcessLock, pfApplicationAware);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ApplicationLaunch([NativeTypeName("const GUID &")] Guid* rguidApplID, [NativeTypeName("ApplicationType")] tagApplicationType appType)
        {
            return lpVtbl->ApplicationLaunch((ISurrogateService*)Unsafe.AsPointer(ref this), rguidApplID, appType);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ApplicationFree([NativeTypeName("const GUID &")] Guid* rguidApplID)
        {
            return lpVtbl->ApplicationFree((ISurrogateService*)Unsafe.AsPointer(ref this), rguidApplID);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int CatalogRefresh([NativeTypeName("ULONG")] uint ulReserved)
        {
            return lpVtbl->CatalogRefresh((ISurrogateService*)Unsafe.AsPointer(ref this), ulReserved);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ProcessShutdown([NativeTypeName("ShutdownType")] tagShutdownType shutdownType)
        {
            return lpVtbl->ProcessShutdown((ISurrogateService*)Unsafe.AsPointer(ref this), shutdownType);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Init([NativeTypeName("const GUID &")] Guid* rguidProcessID, IProcessLock* pProcessLock, [NativeTypeName("BOOL *")] int* pfApplicationAware);

            [return: NativeTypeName("HRESULT")]
            int ApplicationLaunch([NativeTypeName("const GUID &")] Guid* rguidApplID, [NativeTypeName("ApplicationType")] tagApplicationType appType);

            [return: NativeTypeName("HRESULT")]
            int ApplicationFree([NativeTypeName("const GUID &")] Guid* rguidApplID);

            [return: NativeTypeName("HRESULT")]
            int CatalogRefresh([NativeTypeName("ULONG")] uint ulReserved);

            [return: NativeTypeName("HRESULT")]
            int ProcessShutdown([NativeTypeName("ShutdownType")] tagShutdownType shutdownType);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (const GUID &, IProcessLock *, BOOL *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, IProcessLock*, int*, int> Init;

            [NativeTypeName("HRESULT (const GUID &, ApplicationType) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, tagApplicationType, int> ApplicationLaunch;

            [NativeTypeName("HRESULT (const GUID &) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, int> ApplicationFree;

            [NativeTypeName("HRESULT (ULONG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> CatalogRefresh;

            [NativeTypeName("HRESULT (ShutdownType) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagShutdownType, int> ProcessShutdown;
        }
    }

    [Guid("00000034-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IInitializeSpy : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IInitializeSpy : IInitializeSpy.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IInitializeSpy));

        public Vtbl<IInitializeSpy>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IInitializeSpy*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IInitializeSpy*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IInitializeSpy*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int PreInitialize([NativeTypeName("DWORD")] uint dwCoInit, [NativeTypeName("DWORD")] uint dwCurThreadAptRefs)
        {
            return lpVtbl->PreInitialize((IInitializeSpy*)Unsafe.AsPointer(ref this), dwCoInit, dwCurThreadAptRefs);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int PostInitialize([NativeTypeName("HRESULT")] int hrCoInit, [NativeTypeName("DWORD")] uint dwCoInit, [NativeTypeName("DWORD")] uint dwNewThreadAptRefs)
        {
            return lpVtbl->PostInitialize((IInitializeSpy*)Unsafe.AsPointer(ref this), hrCoInit, dwCoInit, dwNewThreadAptRefs);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int PreUninitialize([NativeTypeName("DWORD")] uint dwCurThreadAptRefs)
        {
            return lpVtbl->PreUninitialize((IInitializeSpy*)Unsafe.AsPointer(ref this), dwCurThreadAptRefs);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int PostUninitialize([NativeTypeName("DWORD")] uint dwNewThreadAptRefs)
        {
            return lpVtbl->PostUninitialize((IInitializeSpy*)Unsafe.AsPointer(ref this), dwNewThreadAptRefs);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int PreInitialize([NativeTypeName("DWORD")] uint dwCoInit, [NativeTypeName("DWORD")] uint dwCurThreadAptRefs);

            [return: NativeTypeName("HRESULT")]
            int PostInitialize([NativeTypeName("HRESULT")] int hrCoInit, [NativeTypeName("DWORD")] uint dwCoInit, [NativeTypeName("DWORD")] uint dwNewThreadAptRefs);

            [return: NativeTypeName("HRESULT")]
            int PreUninitialize([NativeTypeName("DWORD")] uint dwCurThreadAptRefs);

            [return: NativeTypeName("HRESULT")]
            int PostUninitialize([NativeTypeName("DWORD")] uint dwNewThreadAptRefs);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (DWORD, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint, int> PreInitialize;

            [NativeTypeName("HRESULT (HRESULT, DWORD, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, uint, uint, int> PostInitialize;

            [NativeTypeName("HRESULT (DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> PreUninitialize;

            [NativeTypeName("HRESULT (DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> PostUninitialize;
        }
    }

    [Guid("A2F05A09-27A2-42B5-BC0E-AC163EF49D9B")]
    [NativeTypeName("struct IApartmentShutdown : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IApartmentShutdown : IApartmentShutdown.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IApartmentShutdown));

        public Vtbl<IApartmentShutdown>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IApartmentShutdown*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IApartmentShutdown*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IApartmentShutdown*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void OnUninitialize([NativeTypeName("UINT64")] ulong ui64ApartmentIdentifier)
        {
            lpVtbl->OnUninitialize((IApartmentShutdown*)Unsafe.AsPointer(ref this), ui64ApartmentIdentifier);
        }

        public interface Interface : IUnknown.Interface
        {
            void OnUninitialize([NativeTypeName("UINT64")] ulong ui64ApartmentIdentifier);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("void (UINT64) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ulong, void> OnUninitialize;
        }
    }

    public partial struct tagSAFEARRAYBOUND
    {
        [NativeTypeName("ULONG")]
        public uint cElements;

        [NativeTypeName("LONG")]
        public int lLbound;
    }

    public unsafe partial struct _wireSAFEARR_BSTR
    {
        [NativeTypeName("ULONG")]
        public uint Size;

        [NativeTypeName("wireBSTR *")]
        public _FLAGGED_WORD_BLOB** aBstr;
    }

    public unsafe partial struct _wireSAFEARR_UNKNOWN
    {
        [NativeTypeName("ULONG")]
        public uint Size;

        public IUnknown** apUnknown;
    }

    public unsafe partial struct _wireSAFEARR_DISPATCH
    {
        [NativeTypeName("ULONG")]
        public uint Size;

        public IDispatch** apDispatch;
    }

    public unsafe partial struct _wireSAFEARR_VARIANT
    {
        [NativeTypeName("ULONG")]
        public uint Size;

        [NativeTypeName("wireVARIANT *")]
        public _wireVARIANT** aVariant;
    }

    public unsafe partial struct _wireSAFEARR_BRECORD
    {
        [NativeTypeName("ULONG")]
        public uint Size;

        [NativeTypeName("wireBRECORD *")]
        public _wireBRECORD** aRecord;
    }

    public unsafe partial struct _wireSAFEARR_HAVEIID
    {
        [NativeTypeName("ULONG")]
        public uint Size;

        public IUnknown** apUnknown;

        [NativeTypeName("IID")]
        public Guid iid;
    }

    public enum tagSF_TYPE
    {
        SF_ERROR = VARENUM.VT_ERROR,
        SF_I1 = VARENUM.VT_I1,
        SF_I2 = VARENUM.VT_I2,
        SF_I4 = VARENUM.VT_I4,
        SF_I8 = VARENUM.VT_I8,
        SF_BSTR = VARENUM.VT_BSTR,
        SF_UNKNOWN = VARENUM.VT_UNKNOWN,
        SF_DISPATCH = VARENUM.VT_DISPATCH,
        SF_VARIANT = VARENUM.VT_VARIANT,
        SF_RECORD = VARENUM.VT_RECORD,
        SF_HAVEIID = (VARENUM.VT_UNKNOWN | VARENUM.VT_RESERVED),
    }

    public partial struct _wireSAFEARRAY_UNION
    {
        [NativeTypeName("ULONG")]
        public uint sfType;

        [NativeTypeName("union __MIDL_IOleAutomationTypes_0001")]
        public __MIDL_IOleAutomationTypes_0001 u;

        [StructLayout(LayoutKind.Explicit)]
        public partial struct __MIDL_IOleAutomationTypes_0001
        {
            [FieldOffset(0)]
            [NativeTypeName("SAFEARR_BSTR")]
            public _wireSAFEARR_BSTR BstrStr;

            [FieldOffset(0)]
            [NativeTypeName("SAFEARR_UNKNOWN")]
            public _wireSAFEARR_UNKNOWN UnknownStr;

            [FieldOffset(0)]
            [NativeTypeName("SAFEARR_DISPATCH")]
            public _wireSAFEARR_DISPATCH DispatchStr;

            [FieldOffset(0)]
            [NativeTypeName("SAFEARR_VARIANT")]
            public _wireSAFEARR_VARIANT VariantStr;

            [FieldOffset(0)]
            [NativeTypeName("SAFEARR_BRECORD")]
            public _wireSAFEARR_BRECORD RecordStr;

            [FieldOffset(0)]
            [NativeTypeName("SAFEARR_HAVEIID")]
            public _wireSAFEARR_HAVEIID HaveIidStr;

            [FieldOffset(0)]
            [NativeTypeName("BYTE_SIZEDARR")]
            public _BYTE_SIZEDARR ByteStr;

            [FieldOffset(0)]
            [NativeTypeName("WORD_SIZEDARR")]
            public _SHORT_SIZEDARR WordStr;

            [FieldOffset(0)]
            [NativeTypeName("DWORD_SIZEDARR")]
            public _LONG_SIZEDARR LongStr;

            [FieldOffset(0)]
            [NativeTypeName("HYPER_SIZEDARR")]
            public _HYPER_SIZEDARR HyperStr;
        }
    }

    public partial struct _wireSAFEARRAY
    {
        public ushort cDims;

        public ushort fFeatures;

        [NativeTypeName("ULONG")]
        public uint cbElements;

        [NativeTypeName("ULONG")]
        public uint cLocks;

        [NativeTypeName("SAFEARRAYUNION")]
        public _wireSAFEARRAY_UNION uArrayStructs;

        [NativeTypeName("SAFEARRAYBOUND[1]")]
        public _rgsabound_e__FixedBuffer rgsabound;

        public partial struct _rgsabound_e__FixedBuffer
        {
            public tagSAFEARRAYBOUND e0;

            [UnscopedRef]
            public ref tagSAFEARRAYBOUND this[int index]
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get
                {
                    return ref Unsafe.Add(ref e0, index);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            [UnscopedRef]
            public Span<tagSAFEARRAYBOUND> AsSpan(int length) => MemoryMarshal.CreateSpan(ref e0, length);
        }
    }

    public unsafe partial struct SAFEARRAY
    {
        public ushort cDims;

        public ushort fFeatures;

        [NativeTypeName("ULONG")]
        public uint cbElements;

        [NativeTypeName("ULONG")]
        public uint cLocks;

        [NativeTypeName("PVOID")]
        public void* pvData;

        [NativeTypeName("SAFEARRAYBOUND[1]")]
        public _rgsabound_e__FixedBuffer rgsabound;

        public partial struct _rgsabound_e__FixedBuffer
        {
            public tagSAFEARRAYBOUND e0;

            [UnscopedRef]
            public ref tagSAFEARRAYBOUND this[int index]
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get
                {
                    return ref Unsafe.Add(ref e0, index);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            [UnscopedRef]
            public Span<tagSAFEARRAYBOUND> AsSpan(int length) => MemoryMarshal.CreateSpan(ref e0, length);
        }
    }

    public unsafe partial struct VARIANT
    {
        [NativeTypeName("__AnonymousRecord_oaidl_L478_C5")]
        public _Anonymous_e__Union Anonymous;

        [UnscopedRef]
        public ref ushort vt
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.vt;
            }
        }

        [UnscopedRef]
        public ref ushort wReserved1
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.wReserved1;
            }
        }

        [UnscopedRef]
        public ref ushort wReserved2
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.wReserved2;
            }
        }

        [UnscopedRef]
        public ref ushort wReserved3
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.wReserved3;
            }
        }

        [UnscopedRef]
        public ref long llVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.llVal;
            }
        }

        [UnscopedRef]
        public ref int lVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.lVal;
            }
        }

        [UnscopedRef]
        public ref byte bVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.bVal;
            }
        }

        [UnscopedRef]
        public ref short iVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.iVal;
            }
        }

        [UnscopedRef]
        public ref float fltVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.fltVal;
            }
        }

        [UnscopedRef]
        public ref double dblVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.dblVal;
            }
        }

        [UnscopedRef]
        public ref short boolVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.boolVal;
            }
        }

        [UnscopedRef]
        public ref short __OBSOLETE__VARIANT_BOOL
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.__OBSOLETE__VARIANT_BOOL;
            }
        }

        [UnscopedRef]
        public ref int scode
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.scode;
            }
        }

        [UnscopedRef]
        public ref CY cyVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.cyVal;
            }
        }

        [UnscopedRef]
        public ref double date
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.date;
            }
        }

        [UnscopedRef]
        public ref char* bstrVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.bstrVal;
            }
        }

        [UnscopedRef]
        public ref IUnknown* punkVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.punkVal;
            }
        }

        [UnscopedRef]
        public ref IDispatch* pdispVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pdispVal;
            }
        }

        [UnscopedRef]
        public ref SAFEARRAY* parray
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.parray;
            }
        }

        [UnscopedRef]
        public ref byte* pbVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pbVal;
            }
        }

        [UnscopedRef]
        public ref short* piVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.piVal;
            }
        }

        [UnscopedRef]
        public ref int* plVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.plVal;
            }
        }

        [UnscopedRef]
        public ref long* pllVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pllVal;
            }
        }

        [UnscopedRef]
        public ref float* pfltVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pfltVal;
            }
        }

        [UnscopedRef]
        public ref double* pdblVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pdblVal;
            }
        }

        [UnscopedRef]
        public ref short* pboolVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pboolVal;
            }
        }

        [UnscopedRef]
        public ref short* __OBSOLETE__VARIANT_PBOOL
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.__OBSOLETE__VARIANT_PBOOL;
            }
        }

        [UnscopedRef]
        public ref int* pscode
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pscode;
            }
        }

        [UnscopedRef]
        public ref CY* pcyVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pcyVal;
            }
        }

        [UnscopedRef]
        public ref double* pdate
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pdate;
            }
        }

        [UnscopedRef]
        public ref char** pbstrVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pbstrVal;
            }
        }

        [UnscopedRef]
        public ref IUnknown** ppunkVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.ppunkVal;
            }
        }

        [UnscopedRef]
        public ref IDispatch** ppdispVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.ppdispVal;
            }
        }

        [UnscopedRef]
        public ref SAFEARRAY** pparray
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pparray;
            }
        }

        [UnscopedRef]
        public ref VARIANT* pvarVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pvarVal;
            }
        }

        [UnscopedRef]
        public ref void* byref
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.byref;
            }
        }

        [UnscopedRef]
        public ref sbyte cVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.cVal;
            }
        }

        [UnscopedRef]
        public ref ushort uiVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.uiVal;
            }
        }

        [UnscopedRef]
        public ref uint ulVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.ulVal;
            }
        }

        [UnscopedRef]
        public ref ulong ullVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.ullVal;
            }
        }

        [UnscopedRef]
        public ref int intVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.intVal;
            }
        }

        [UnscopedRef]
        public ref uint uintVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.uintVal;
            }
        }

        [UnscopedRef]
        public ref DEC* pdecVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pdecVal;
            }
        }

        [UnscopedRef]
        public ref sbyte* pcVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pcVal;
            }
        }

        [UnscopedRef]
        public ref ushort* puiVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.puiVal;
            }
        }

        [UnscopedRef]
        public ref uint* pulVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pulVal;
            }
        }

        [UnscopedRef]
        public ref ulong* pullVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pullVal;
            }
        }

        [UnscopedRef]
        public ref int* pintVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pintVal;
            }
        }

        [UnscopedRef]
        public ref uint* puintVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.puintVal;
            }
        }

        [UnscopedRef]
        public ref void* pvRecord
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.Anonymous_3.pvRecord;
            }
        }

        [UnscopedRef]
        public ref IRecordInfo* pRecInfo
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.Anonymous_3.pRecInfo;
            }
        }

        [UnscopedRef]
        public ref DEC decVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.decVal;
            }
        }

        [StructLayout(LayoutKind.Explicit)]
        public unsafe partial struct _Anonymous_e__Union
        {
            [FieldOffset(0)]
            [NativeTypeName("__AnonymousRecord_oaidl_L480_C9")]
            public _Anonymous_1_e__Struct Anonymous_1;

            [FieldOffset(0)]
            [NativeTypeName("DECIMAL")]
            public DEC decVal;

            public unsafe partial struct _Anonymous_1_e__Struct
            {
                [NativeTypeName("VARTYPE")]
                public ushort vt;

                [NativeTypeName("WORD")]
                public ushort wReserved1;

                [NativeTypeName("WORD")]
                public ushort wReserved2;

                [NativeTypeName("WORD")]
                public ushort wReserved3;

                [NativeTypeName("__AnonymousRecord_oaidl_L486_C13")]
                public _Anonymous_2_e__Union Anonymous_2;

                [StructLayout(LayoutKind.Explicit)]
                public unsafe partial struct _Anonymous_2_e__Union
                {
                    [FieldOffset(0)]
                    [NativeTypeName("LONGLONG")]
                    public long llVal;

                    [FieldOffset(0)]
                    [NativeTypeName("LONG")]
                    public int lVal;

                    [FieldOffset(0)]
                    public byte bVal;

                    [FieldOffset(0)]
                    public short iVal;

                    [FieldOffset(0)]
                    public float fltVal;

                    [FieldOffset(0)]
                    public double dblVal;

                    [FieldOffset(0)]
                    [NativeTypeName("VARIANT_BOOL")]
                    public short boolVal;

                    [FieldOffset(0)]
                    [NativeTypeName("VARIANT_BOOL")]
                    public short __OBSOLETE__VARIANT_BOOL;

                    [FieldOffset(0)]
                    [NativeTypeName("SCODE")]
                    public int scode;

                    [FieldOffset(0)]
                    public CY cyVal;

                    [FieldOffset(0)]
                    [NativeTypeName("DATE")]
                    public double date;

                    [FieldOffset(0)]
                    [NativeTypeName("BSTR")]
                    public char* bstrVal;

                    [FieldOffset(0)]
                    public IUnknown* punkVal;

                    [FieldOffset(0)]
                    public IDispatch* pdispVal;

                    [FieldOffset(0)]
                    public SAFEARRAY* parray;

                    [FieldOffset(0)]
                    public byte* pbVal;

                    [FieldOffset(0)]
                    public short* piVal;

                    [FieldOffset(0)]
                    [NativeTypeName("LONG *")]
                    public int* plVal;

                    [FieldOffset(0)]
                    [NativeTypeName("LONGLONG *")]
                    public long* pllVal;

                    [FieldOffset(0)]
                    public float* pfltVal;

                    [FieldOffset(0)]
                    public double* pdblVal;

                    [FieldOffset(0)]
                    [NativeTypeName("VARIANT_BOOL *")]
                    public short* pboolVal;

                    [FieldOffset(0)]
                    [NativeTypeName("VARIANT_BOOL *")]
                    public short* __OBSOLETE__VARIANT_PBOOL;

                    [FieldOffset(0)]
                    [NativeTypeName("SCODE *")]
                    public int* pscode;

                    [FieldOffset(0)]
                    public CY* pcyVal;

                    [FieldOffset(0)]
                    [NativeTypeName("DATE *")]
                    public double* pdate;

                    [FieldOffset(0)]
                    [NativeTypeName("BSTR *")]
                    public char** pbstrVal;

                    [FieldOffset(0)]
                    public IUnknown** ppunkVal;

                    [FieldOffset(0)]
                    public IDispatch** ppdispVal;

                    [FieldOffset(0)]
                    public SAFEARRAY** pparray;

                    [FieldOffset(0)]
                    public VARIANT* pvarVal;

                    [FieldOffset(0)]
                    [NativeTypeName("PVOID")]
                    public void* byref;

                    [FieldOffset(0)]
                    [NativeTypeName("CHAR")]
                    public sbyte cVal;

                    [FieldOffset(0)]
                    public ushort uiVal;

                    [FieldOffset(0)]
                    [NativeTypeName("ULONG")]
                    public uint ulVal;

                    [FieldOffset(0)]
                    [NativeTypeName("ULONGLONG")]
                    public ulong ullVal;

                    [FieldOffset(0)]
                    public int intVal;

                    [FieldOffset(0)]
                    public uint uintVal;

                    [FieldOffset(0)]
                    [NativeTypeName("DECIMAL *")]
                    public DEC* pdecVal;

                    [FieldOffset(0)]
                    [NativeTypeName("CHAR *")]
                    public sbyte* pcVal;

                    [FieldOffset(0)]
                    public ushort* puiVal;

                    [FieldOffset(0)]
                    [NativeTypeName("ULONG *")]
                    public uint* pulVal;

                    [FieldOffset(0)]
                    [NativeTypeName("ULONGLONG *")]
                    public ulong* pullVal;

                    [FieldOffset(0)]
                    public int* pintVal;

                    [FieldOffset(0)]
                    public uint* puintVal;

                    [FieldOffset(0)]
                    [NativeTypeName("__AnonymousRecord_oaidl_L533_C17")]
                    public _Anonymous_3_e__Struct Anonymous_3;

                    public unsafe partial struct _Anonymous_3_e__Struct
                    {
                        [NativeTypeName("PVOID")]
                        public void* pvRecord;

                        public IRecordInfo* pRecInfo;
                    }
                }
            }
        }
    }

    public unsafe partial struct _wireBRECORD
    {
        [NativeTypeName("ULONG")]
        public uint fFlags;

        [NativeTypeName("ULONG")]
        public uint clSize;

        public IRecordInfo* pRecInfo;

        public byte* pRecord;
    }

    public unsafe partial struct _wireVARIANT
    {
        [NativeTypeName("DWORD")]
        public uint clSize;

        [NativeTypeName("DWORD")]
        public uint rpcReserved;

        public ushort vt;

        public ushort wReserved1;

        public ushort wReserved2;

        public ushort wReserved3;

        [NativeTypeName("__AnonymousRecord_oaidl_L581_C36")]
        public _Anonymous_e__Union Anonymous;

        [UnscopedRef]
        public ref long llVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.llVal;
            }
        }

        [UnscopedRef]
        public ref int lVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.lVal;
            }
        }

        [UnscopedRef]
        public ref byte bVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.bVal;
            }
        }

        [UnscopedRef]
        public ref short iVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.iVal;
            }
        }

        [UnscopedRef]
        public ref float fltVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.fltVal;
            }
        }

        [UnscopedRef]
        public ref double dblVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.dblVal;
            }
        }

        [UnscopedRef]
        public ref short boolVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.boolVal;
            }
        }

        [UnscopedRef]
        public ref int scode
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.scode;
            }
        }

        [UnscopedRef]
        public ref CY cyVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.cyVal;
            }
        }

        [UnscopedRef]
        public ref double date
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.date;
            }
        }

        [UnscopedRef]
        public ref _FLAGGED_WORD_BLOB* bstrVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.bstrVal;
            }
        }

        [UnscopedRef]
        public ref IUnknown* punkVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.punkVal;
            }
        }

        [UnscopedRef]
        public ref IDispatch* pdispVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.pdispVal;
            }
        }

        [UnscopedRef]
        public ref _wireSAFEARRAY** parray
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.parray;
            }
        }

        [UnscopedRef]
        public ref _wireBRECORD* brecVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.brecVal;
            }
        }

        [UnscopedRef]
        public ref byte* pbVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.pbVal;
            }
        }

        [UnscopedRef]
        public ref short* piVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.piVal;
            }
        }

        [UnscopedRef]
        public ref int* plVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.plVal;
            }
        }

        [UnscopedRef]
        public ref long* pllVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.pllVal;
            }
        }

        [UnscopedRef]
        public ref float* pfltVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.pfltVal;
            }
        }

        [UnscopedRef]
        public ref double* pdblVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.pdblVal;
            }
        }

        [UnscopedRef]
        public ref short* pboolVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.pboolVal;
            }
        }

        [UnscopedRef]
        public ref int* pscode
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.pscode;
            }
        }

        [UnscopedRef]
        public ref CY* pcyVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.pcyVal;
            }
        }

        [UnscopedRef]
        public ref double* pdate
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.pdate;
            }
        }

        [UnscopedRef]
        public ref _FLAGGED_WORD_BLOB** pbstrVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.pbstrVal;
            }
        }

        [UnscopedRef]
        public ref IUnknown** ppunkVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.ppunkVal;
            }
        }

        [UnscopedRef]
        public ref IDispatch** ppdispVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.ppdispVal;
            }
        }

        [UnscopedRef]
        public ref _wireSAFEARRAY*** pparray
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.pparray;
            }
        }

        [UnscopedRef]
        public ref _wireVARIANT** pvarVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.pvarVal;
            }
        }

        [UnscopedRef]
        public ref sbyte cVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.cVal;
            }
        }

        [UnscopedRef]
        public ref ushort uiVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.uiVal;
            }
        }

        [UnscopedRef]
        public ref uint ulVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.ulVal;
            }
        }

        [UnscopedRef]
        public ref ulong ullVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.ullVal;
            }
        }

        [UnscopedRef]
        public ref int intVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.intVal;
            }
        }

        [UnscopedRef]
        public ref uint uintVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.uintVal;
            }
        }

        [UnscopedRef]
        public ref DEC decVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.decVal;
            }
        }

        [UnscopedRef]
        public ref DEC* pdecVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.pdecVal;
            }
        }

        [UnscopedRef]
        public ref sbyte* pcVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.pcVal;
            }
        }

        [UnscopedRef]
        public ref ushort* puiVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.puiVal;
            }
        }

        [UnscopedRef]
        public ref uint* pulVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.pulVal;
            }
        }

        [UnscopedRef]
        public ref ulong* pullVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.pullVal;
            }
        }

        [UnscopedRef]
        public ref int* pintVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.pintVal;
            }
        }

        [UnscopedRef]
        public ref uint* puintVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.puintVal;
            }
        }

        [StructLayout(LayoutKind.Explicit)]
        public unsafe partial struct _Anonymous_e__Union
        {
            [FieldOffset(0)]
            [NativeTypeName("LONGLONG")]
            public long llVal;

            [FieldOffset(0)]
            [NativeTypeName("LONG")]
            public int lVal;

            [FieldOffset(0)]
            public byte bVal;

            [FieldOffset(0)]
            public short iVal;

            [FieldOffset(0)]
            public float fltVal;

            [FieldOffset(0)]
            public double dblVal;

            [FieldOffset(0)]
            [NativeTypeName("VARIANT_BOOL")]
            public short boolVal;

            [FieldOffset(0)]
            [NativeTypeName("SCODE")]
            public int scode;

            [FieldOffset(0)]
            public CY cyVal;

            [FieldOffset(0)]
            [NativeTypeName("DATE")]
            public double date;

            [FieldOffset(0)]
            [NativeTypeName("wireBSTR")]
            public _FLAGGED_WORD_BLOB* bstrVal;

            [FieldOffset(0)]
            public IUnknown* punkVal;

            [FieldOffset(0)]
            public IDispatch* pdispVal;

            [FieldOffset(0)]
            [NativeTypeName("wirePSAFEARRAY")]
            public _wireSAFEARRAY** parray;

            [FieldOffset(0)]
            [NativeTypeName("wireBRECORD")]
            public _wireBRECORD* brecVal;

            [FieldOffset(0)]
            public byte* pbVal;

            [FieldOffset(0)]
            public short* piVal;

            [FieldOffset(0)]
            [NativeTypeName("LONG *")]
            public int* plVal;

            [FieldOffset(0)]
            [NativeTypeName("LONGLONG *")]
            public long* pllVal;

            [FieldOffset(0)]
            public float* pfltVal;

            [FieldOffset(0)]
            public double* pdblVal;

            [FieldOffset(0)]
            [NativeTypeName("VARIANT_BOOL *")]
            public short* pboolVal;

            [FieldOffset(0)]
            [NativeTypeName("SCODE *")]
            public int* pscode;

            [FieldOffset(0)]
            public CY* pcyVal;

            [FieldOffset(0)]
            [NativeTypeName("DATE *")]
            public double* pdate;

            [FieldOffset(0)]
            [NativeTypeName("wireBSTR *")]
            public _FLAGGED_WORD_BLOB** pbstrVal;

            [FieldOffset(0)]
            public IUnknown** ppunkVal;

            [FieldOffset(0)]
            public IDispatch** ppdispVal;

            [FieldOffset(0)]
            [NativeTypeName("wirePSAFEARRAY *")]
            public _wireSAFEARRAY*** pparray;

            [FieldOffset(0)]
            [NativeTypeName("wireVARIANT *")]
            public _wireVARIANT** pvarVal;

            [FieldOffset(0)]
            [NativeTypeName("CHAR")]
            public sbyte cVal;

            [FieldOffset(0)]
            public ushort uiVal;

            [FieldOffset(0)]
            [NativeTypeName("ULONG")]
            public uint ulVal;

            [FieldOffset(0)]
            [NativeTypeName("ULONGLONG")]
            public ulong ullVal;

            [FieldOffset(0)]
            public int intVal;

            [FieldOffset(0)]
            public uint uintVal;

            [FieldOffset(0)]
            [NativeTypeName("DECIMAL")]
            public DEC decVal;

            [FieldOffset(0)]
            [NativeTypeName("DECIMAL *")]
            public DEC* pdecVal;

            [FieldOffset(0)]
            [NativeTypeName("CHAR *")]
            public sbyte* pcVal;

            [FieldOffset(0)]
            public ushort* puiVal;

            [FieldOffset(0)]
            [NativeTypeName("ULONG *")]
            public uint* pulVal;

            [FieldOffset(0)]
            [NativeTypeName("ULONGLONG *")]
            public ulong* pullVal;

            [FieldOffset(0)]
            public int* pintVal;

            [FieldOffset(0)]
            public uint* puintVal;
        }
    }

    public enum tagTYPEKIND
    {
        TKIND_ENUM = 0,
        TKIND_RECORD = (TKIND_ENUM + 1),
        TKIND_MODULE = (TKIND_RECORD + 1),
        TKIND_INTERFACE = (TKIND_MODULE + 1),
        TKIND_DISPATCH = (TKIND_INTERFACE + 1),
        TKIND_COCLASS = (TKIND_DISPATCH + 1),
        TKIND_ALIAS = (TKIND_COCLASS + 1),
        TKIND_UNION = (TKIND_ALIAS + 1),
        TKIND_MAX = (TKIND_UNION + 1),
    }

    public unsafe partial struct tagTYPEDESC
    {
        [NativeTypeName("__AnonymousRecord_oaidl_L653_C36")]
        public _Anonymous_e__Union Anonymous;

        [NativeTypeName("VARTYPE")]
        public ushort vt;

        [UnscopedRef]
        public ref tagTYPEDESC* lptdesc
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.lptdesc;
            }
        }

        [UnscopedRef]
        public ref tagARRAYDESC* lpadesc
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.lpadesc;
            }
        }

        [UnscopedRef]
        public ref uint hreftype
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.hreftype;
            }
        }

        [StructLayout(LayoutKind.Explicit)]
        public unsafe partial struct _Anonymous_e__Union
        {
            [FieldOffset(0)]
            [NativeTypeName("struct tagTYPEDESC *")]
            public tagTYPEDESC* lptdesc;

            [FieldOffset(0)]
            [NativeTypeName("struct tagARRAYDESC *")]
            public tagARRAYDESC* lpadesc;

            [FieldOffset(0)]
            [NativeTypeName("HREFTYPE")]
            public uint hreftype;
        }
    }

    public partial struct tagARRAYDESC
    {
        [NativeTypeName("TYPEDESC")]
        public tagTYPEDESC tdescElem;

        public ushort cDims;

        [NativeTypeName("SAFEARRAYBOUND[1]")]
        public _rgbounds_e__FixedBuffer rgbounds;

        public partial struct _rgbounds_e__FixedBuffer
        {
            public tagSAFEARRAYBOUND e0;

            [UnscopedRef]
            public ref tagSAFEARRAYBOUND this[int index]
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get
                {
                    return ref Unsafe.Add(ref e0, index);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            [UnscopedRef]
            public Span<tagSAFEARRAYBOUND> AsSpan(int length) => MemoryMarshal.CreateSpan(ref e0, length);
        }
    }

    public partial struct tagPARAMDESCEX
    {
        [NativeTypeName("ULONG")]
        public uint cBytes;

        [NativeTypeName("VARIANTARG")]
        public VARIANT varDefaultValue;
    }

    public unsafe partial struct tagPARAMDESC
    {
        [NativeTypeName("LPPARAMDESCEX")]
        public tagPARAMDESCEX* pparamdescex;

        public ushort wParamFlags;
    }

    public partial struct tagIDLDESC
    {
        [NativeTypeName("ULONG_PTR")]
        public ulong dwReserved;

        public ushort wIDLFlags;
    }

    public partial struct tagELEMDESC
    {
        [NativeTypeName("TYPEDESC")]
        public tagTYPEDESC tdesc;

        [NativeTypeName("__AnonymousRecord_oaidl_L733_C5")]
        public _Anonymous_e__Union Anonymous;

        [UnscopedRef]
        public ref tagIDLDESC idldesc
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.idldesc;
            }
        }

        [UnscopedRef]
        public ref tagPARAMDESC paramdesc
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.paramdesc;
            }
        }

        [StructLayout(LayoutKind.Explicit)]
        public partial struct _Anonymous_e__Union
        {
            [FieldOffset(0)]
            [NativeTypeName("IDLDESC")]
            public tagIDLDESC idldesc;

            [FieldOffset(0)]
            [NativeTypeName("PARAMDESC")]
            public tagPARAMDESC paramdesc;
        }
    }

    public unsafe partial struct tagTYPEATTR
    {
        public Guid guid;

        [NativeTypeName("LCID")]
        public uint lcid;

        [NativeTypeName("DWORD")]
        public uint dwReserved;

        [NativeTypeName("MEMBERID")]
        public int memidConstructor;

        [NativeTypeName("MEMBERID")]
        public int memidDestructor;

        [NativeTypeName("LPOLESTR")]
        public char* lpstrSchema;

        [NativeTypeName("ULONG")]
        public uint cbSizeInstance;

        [NativeTypeName("TYPEKIND")]
        public tagTYPEKIND typekind;

        [NativeTypeName("WORD")]
        public ushort cFuncs;

        [NativeTypeName("WORD")]
        public ushort cVars;

        [NativeTypeName("WORD")]
        public ushort cImplTypes;

        [NativeTypeName("WORD")]
        public ushort cbSizeVft;

        [NativeTypeName("WORD")]
        public ushort cbAlignment;

        [NativeTypeName("WORD")]
        public ushort wTypeFlags;

        [NativeTypeName("WORD")]
        public ushort wMajorVerNum;

        [NativeTypeName("WORD")]
        public ushort wMinorVerNum;

        [NativeTypeName("TYPEDESC")]
        public tagTYPEDESC tdescAlias;

        [NativeTypeName("IDLDESC")]
        public tagIDLDESC idldescType;
    }

    public unsafe partial struct tagDISPPARAMS
    {
        [NativeTypeName("VARIANTARG *")]
        public VARIANT* rgvarg;

        [NativeTypeName("DISPID *")]
        public int* rgdispidNamedArgs;

        public uint cArgs;

        public uint cNamedArgs;
    }

    public unsafe partial struct tagEXCEPINFO
    {
        [NativeTypeName("WORD")]
        public ushort wCode;

        [NativeTypeName("WORD")]
        public ushort wReserved;

        [NativeTypeName("BSTR")]
        public char* bstrSource;

        [NativeTypeName("BSTR")]
        public char* bstrDescription;

        [NativeTypeName("BSTR")]
        public char* bstrHelpFile;

        [NativeTypeName("DWORD")]
        public uint dwHelpContext;

        [NativeTypeName("PVOID")]
        public void* pvReserved;

        [NativeTypeName("HRESULT (*)(struct tagEXCEPINFO *) __attribute__((stdcall))")]
        public delegate* unmanaged[Stdcall]<tagEXCEPINFO*, int> pfnDeferredFillIn;

        [NativeTypeName("SCODE")]
        public int scode;
    }

    public enum tagCALLCONV
    {
        CC_FASTCALL = 0,
        CC_CDECL = 1,
        CC_MSCPASCAL = (CC_CDECL + 1),
        CC_PASCAL = CC_MSCPASCAL,
        CC_MACPASCAL = (CC_PASCAL + 1),
        CC_STDCALL = (CC_MACPASCAL + 1),
        CC_FPFASTCALL = (CC_STDCALL + 1),
        CC_SYSCALL = (CC_FPFASTCALL + 1),
        CC_MPWCDECL = (CC_SYSCALL + 1),
        CC_MPWPASCAL = (CC_MPWCDECL + 1),
        CC_MAX = (CC_MPWPASCAL + 1),
    }

    public enum tagFUNCKIND
    {
        FUNC_VIRTUAL = 0,
        FUNC_PUREVIRTUAL = (FUNC_VIRTUAL + 1),
        FUNC_NONVIRTUAL = (FUNC_PUREVIRTUAL + 1),
        FUNC_STATIC = (FUNC_NONVIRTUAL + 1),
        FUNC_DISPATCH = (FUNC_STATIC + 1),
    }

    public enum tagINVOKEKIND
    {
        INVOKE_FUNC = 1,
        INVOKE_PROPERTYGET = 2,
        INVOKE_PROPERTYPUT = 4,
        INVOKE_PROPERTYPUTREF = 8,
    }

    public unsafe partial struct tagFUNCDESC
    {
        [NativeTypeName("MEMBERID")]
        public int memid;

        [NativeTypeName("SCODE *")]
        public int* lprgscode;

        [NativeTypeName("ELEMDESC *")]
        public tagELEMDESC* lprgelemdescParam;

        [NativeTypeName("FUNCKIND")]
        public tagFUNCKIND funckind;

        [NativeTypeName("INVOKEKIND")]
        public tagINVOKEKIND invkind;

        [NativeTypeName("CALLCONV")]
        public tagCALLCONV callconv;

        public short cParams;

        public short cParamsOpt;

        public short oVft;

        public short cScodes;

        [NativeTypeName("ELEMDESC")]
        public tagELEMDESC elemdescFunc;

        [NativeTypeName("WORD")]
        public ushort wFuncFlags;
    }

    public enum tagVARKIND
    {
        VAR_PERINSTANCE = 0,
        VAR_STATIC = (VAR_PERINSTANCE + 1),
        VAR_CONST = (VAR_STATIC + 1),
        VAR_DISPATCH = (VAR_CONST + 1),
    }

    public unsafe partial struct tagVARDESC
    {
        [NativeTypeName("MEMBERID")]
        public int memid;

        [NativeTypeName("LPOLESTR")]
        public char* lpstrSchema;

        [NativeTypeName("__AnonymousRecord_oaidl_L880_C36")]
        public _Anonymous_e__Union Anonymous;

        [NativeTypeName("ELEMDESC")]
        public tagELEMDESC elemdescVar;

        [NativeTypeName("WORD")]
        public ushort wVarFlags;

        [NativeTypeName("VARKIND")]
        public tagVARKIND varkind;

        [UnscopedRef]
        public ref uint oInst
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.oInst;
            }
        }

        [UnscopedRef]
        public ref VARIANT* lpvarValue
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.lpvarValue;
            }
        }

        [StructLayout(LayoutKind.Explicit)]
        public unsafe partial struct _Anonymous_e__Union
        {
            [FieldOffset(0)]
            [NativeTypeName("ULONG")]
            public uint oInst;

            [FieldOffset(0)]
            public VARIANT* lpvarValue;
        }
    }

    public enum tagTYPEFLAGS
    {
        TYPEFLAG_FAPPOBJECT = 0x1,
        TYPEFLAG_FCANCREATE = 0x2,
        TYPEFLAG_FLICENSED = 0x4,
        TYPEFLAG_FPREDECLID = 0x8,
        TYPEFLAG_FHIDDEN = 0x10,
        TYPEFLAG_FCONTROL = 0x20,
        TYPEFLAG_FDUAL = 0x40,
        TYPEFLAG_FNONEXTENSIBLE = 0x80,
        TYPEFLAG_FOLEAUTOMATION = 0x100,
        TYPEFLAG_FRESTRICTED = 0x200,
        TYPEFLAG_FAGGREGATABLE = 0x400,
        TYPEFLAG_FREPLACEABLE = 0x800,
        TYPEFLAG_FDISPATCHABLE = 0x1000,
        TYPEFLAG_FREVERSEBIND = 0x2000,
        TYPEFLAG_FPROXY = 0x4000,
    }

    public enum tagFUNCFLAGS
    {
        FUNCFLAG_FRESTRICTED = 0x1,
        FUNCFLAG_FSOURCE = 0x2,
        FUNCFLAG_FBINDABLE = 0x4,
        FUNCFLAG_FREQUESTEDIT = 0x8,
        FUNCFLAG_FDISPLAYBIND = 0x10,
        FUNCFLAG_FDEFAULTBIND = 0x20,
        FUNCFLAG_FHIDDEN = 0x40,
        FUNCFLAG_FUSESGETLASTERROR = 0x80,
        FUNCFLAG_FDEFAULTCOLLELEM = 0x100,
        FUNCFLAG_FUIDEFAULT = 0x200,
        FUNCFLAG_FNONBROWSABLE = 0x400,
        FUNCFLAG_FREPLACEABLE = 0x800,
        FUNCFLAG_FIMMEDIATEBIND = 0x1000,
    }

    public enum tagVARFLAGS
    {
        VARFLAG_FREADONLY = 0x1,
        VARFLAG_FSOURCE = 0x2,
        VARFLAG_FBINDABLE = 0x4,
        VARFLAG_FREQUESTEDIT = 0x8,
        VARFLAG_FDISPLAYBIND = 0x10,
        VARFLAG_FDEFAULTBIND = 0x20,
        VARFLAG_FHIDDEN = 0x40,
        VARFLAG_FRESTRICTED = 0x80,
        VARFLAG_FDEFAULTCOLLELEM = 0x100,
        VARFLAG_FUIDEFAULT = 0x200,
        VARFLAG_FNONBROWSABLE = 0x400,
        VARFLAG_FREPLACEABLE = 0x800,
        VARFLAG_FIMMEDIATEBIND = 0x1000,
    }

    public unsafe partial struct tagCLEANLOCALSTORAGE
    {
        public IUnknown* pInterface;

        [NativeTypeName("PVOID")]
        public void* pStorage;

        [NativeTypeName("DWORD")]
        public uint flags;
    }

    public partial struct tagCUSTDATAITEM
    {
        public Guid guid;

        [NativeTypeName("VARIANTARG")]
        public VARIANT varValue;
    }

    public unsafe partial struct tagCUSTDATA
    {
        [NativeTypeName("DWORD")]
        public uint cCustData;

        [NativeTypeName("LPCUSTDATAITEM")]
        public tagCUSTDATAITEM* prgCustData;
    }

    [Guid("00020405-0000-0000-C000-000000000046")]
    [NativeTypeName("struct ICreateTypeInfo : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ICreateTypeInfo : ICreateTypeInfo.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ICreateTypeInfo));

        public Vtbl<ICreateTypeInfo>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((ICreateTypeInfo*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((ICreateTypeInfo*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((ICreateTypeInfo*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetGuid([NativeTypeName("const GUID &")] Guid* guid)
        {
            return lpVtbl->SetGuid((ICreateTypeInfo*)Unsafe.AsPointer(ref this), guid);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetTypeFlags(uint uTypeFlags)
        {
            return lpVtbl->SetTypeFlags((ICreateTypeInfo*)Unsafe.AsPointer(ref this), uTypeFlags);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetDocString([NativeTypeName("LPOLESTR")] char* pStrDoc)
        {
            return lpVtbl->SetDocString((ICreateTypeInfo*)Unsafe.AsPointer(ref this), pStrDoc);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetHelpContext([NativeTypeName("DWORD")] uint dwHelpContext)
        {
            return lpVtbl->SetHelpContext((ICreateTypeInfo*)Unsafe.AsPointer(ref this), dwHelpContext);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetVersion([NativeTypeName("WORD")] ushort wMajorVerNum, [NativeTypeName("WORD")] ushort wMinorVerNum)
        {
            return lpVtbl->SetVersion((ICreateTypeInfo*)Unsafe.AsPointer(ref this), wMajorVerNum, wMinorVerNum);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int AddRefTypeInfo(ITypeInfo* pTInfo, [NativeTypeName("HREFTYPE *")] uint* phRefType)
        {
            return lpVtbl->AddRefTypeInfo((ICreateTypeInfo*)Unsafe.AsPointer(ref this), pTInfo, phRefType);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int AddFuncDesc(uint index, [NativeTypeName("FUNCDESC *")] tagFUNCDESC* pFuncDesc)
        {
            return lpVtbl->AddFuncDesc((ICreateTypeInfo*)Unsafe.AsPointer(ref this), index, pFuncDesc);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int AddImplType(uint index, [NativeTypeName("HREFTYPE")] uint hRefType)
        {
            return lpVtbl->AddImplType((ICreateTypeInfo*)Unsafe.AsPointer(ref this), index, hRefType);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetImplTypeFlags(uint index, int implTypeFlags)
        {
            return lpVtbl->SetImplTypeFlags((ICreateTypeInfo*)Unsafe.AsPointer(ref this), index, implTypeFlags);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetAlignment([NativeTypeName("WORD")] ushort cbAlignment)
        {
            return lpVtbl->SetAlignment((ICreateTypeInfo*)Unsafe.AsPointer(ref this), cbAlignment);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetSchema([NativeTypeName("LPOLESTR")] char* pStrSchema)
        {
            return lpVtbl->SetSchema((ICreateTypeInfo*)Unsafe.AsPointer(ref this), pStrSchema);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int AddVarDesc(uint index, [NativeTypeName("VARDESC *")] tagVARDESC* pVarDesc)
        {
            return lpVtbl->AddVarDesc((ICreateTypeInfo*)Unsafe.AsPointer(ref this), index, pVarDesc);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetFuncAndParamNames(uint index, [NativeTypeName("LPOLESTR *")] char** rgszNames, uint cNames)
        {
            return lpVtbl->SetFuncAndParamNames((ICreateTypeInfo*)Unsafe.AsPointer(ref this), index, rgszNames, cNames);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetVarName(uint index, [NativeTypeName("LPOLESTR")] char* szName)
        {
            return lpVtbl->SetVarName((ICreateTypeInfo*)Unsafe.AsPointer(ref this), index, szName);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetTypeDescAlias([NativeTypeName("TYPEDESC *")] tagTYPEDESC* pTDescAlias)
        {
            return lpVtbl->SetTypeDescAlias((ICreateTypeInfo*)Unsafe.AsPointer(ref this), pTDescAlias);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int DefineFuncAsDllEntry(uint index, [NativeTypeName("LPOLESTR")] char* szDllName, [NativeTypeName("LPOLESTR")] char* szProcName)
        {
            return lpVtbl->DefineFuncAsDllEntry((ICreateTypeInfo*)Unsafe.AsPointer(ref this), index, szDllName, szProcName);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetFuncDocString(uint index, [NativeTypeName("LPOLESTR")] char* szDocString)
        {
            return lpVtbl->SetFuncDocString((ICreateTypeInfo*)Unsafe.AsPointer(ref this), index, szDocString);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetVarDocString(uint index, [NativeTypeName("LPOLESTR")] char* szDocString)
        {
            return lpVtbl->SetVarDocString((ICreateTypeInfo*)Unsafe.AsPointer(ref this), index, szDocString);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetFuncHelpContext(uint index, [NativeTypeName("DWORD")] uint dwHelpContext)
        {
            return lpVtbl->SetFuncHelpContext((ICreateTypeInfo*)Unsafe.AsPointer(ref this), index, dwHelpContext);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetVarHelpContext(uint index, [NativeTypeName("DWORD")] uint dwHelpContext)
        {
            return lpVtbl->SetVarHelpContext((ICreateTypeInfo*)Unsafe.AsPointer(ref this), index, dwHelpContext);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetMops(uint index, [NativeTypeName("BSTR")] char* bstrMops)
        {
            return lpVtbl->SetMops((ICreateTypeInfo*)Unsafe.AsPointer(ref this), index, bstrMops);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetTypeIdldesc([NativeTypeName("IDLDESC *")] tagIDLDESC* pIdlDesc)
        {
            return lpVtbl->SetTypeIdldesc((ICreateTypeInfo*)Unsafe.AsPointer(ref this), pIdlDesc);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int LayOut()
        {
            return lpVtbl->LayOut((ICreateTypeInfo*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int SetGuid([NativeTypeName("const GUID &")] Guid* guid);

            [return: NativeTypeName("HRESULT")]
            int SetTypeFlags(uint uTypeFlags);

            [return: NativeTypeName("HRESULT")]
            int SetDocString([NativeTypeName("LPOLESTR")] char* pStrDoc);

            [return: NativeTypeName("HRESULT")]
            int SetHelpContext([NativeTypeName("DWORD")] uint dwHelpContext);

            [return: NativeTypeName("HRESULT")]
            int SetVersion([NativeTypeName("WORD")] ushort wMajorVerNum, [NativeTypeName("WORD")] ushort wMinorVerNum);

            [return: NativeTypeName("HRESULT")]
            int AddRefTypeInfo(ITypeInfo* pTInfo, [NativeTypeName("HREFTYPE *")] uint* phRefType);

            [return: NativeTypeName("HRESULT")]
            int AddFuncDesc(uint index, [NativeTypeName("FUNCDESC *")] tagFUNCDESC* pFuncDesc);

            [return: NativeTypeName("HRESULT")]
            int AddImplType(uint index, [NativeTypeName("HREFTYPE")] uint hRefType);

            [return: NativeTypeName("HRESULT")]
            int SetImplTypeFlags(uint index, int implTypeFlags);

            [return: NativeTypeName("HRESULT")]
            int SetAlignment([NativeTypeName("WORD")] ushort cbAlignment);

            [return: NativeTypeName("HRESULT")]
            int SetSchema([NativeTypeName("LPOLESTR")] char* pStrSchema);

            [return: NativeTypeName("HRESULT")]
            int AddVarDesc(uint index, [NativeTypeName("VARDESC *")] tagVARDESC* pVarDesc);

            [return: NativeTypeName("HRESULT")]
            int SetFuncAndParamNames(uint index, [NativeTypeName("LPOLESTR *")] char** rgszNames, uint cNames);

            [return: NativeTypeName("HRESULT")]
            int SetVarName(uint index, [NativeTypeName("LPOLESTR")] char* szName);

            [return: NativeTypeName("HRESULT")]
            int SetTypeDescAlias([NativeTypeName("TYPEDESC *")] tagTYPEDESC* pTDescAlias);

            [return: NativeTypeName("HRESULT")]
            int DefineFuncAsDllEntry(uint index, [NativeTypeName("LPOLESTR")] char* szDllName, [NativeTypeName("LPOLESTR")] char* szProcName);

            [return: NativeTypeName("HRESULT")]
            int SetFuncDocString(uint index, [NativeTypeName("LPOLESTR")] char* szDocString);

            [return: NativeTypeName("HRESULT")]
            int SetVarDocString(uint index, [NativeTypeName("LPOLESTR")] char* szDocString);

            [return: NativeTypeName("HRESULT")]
            int SetFuncHelpContext(uint index, [NativeTypeName("DWORD")] uint dwHelpContext);

            [return: NativeTypeName("HRESULT")]
            int SetVarHelpContext(uint index, [NativeTypeName("DWORD")] uint dwHelpContext);

            [return: NativeTypeName("HRESULT")]
            int SetMops(uint index, [NativeTypeName("BSTR")] char* bstrMops);

            [return: NativeTypeName("HRESULT")]
            int SetTypeIdldesc([NativeTypeName("IDLDESC *")] tagIDLDESC* pIdlDesc);

            [return: NativeTypeName("HRESULT")]
            int LayOut();
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (const GUID &) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, int> SetGuid;

            [NativeTypeName("HRESULT (UINT) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> SetTypeFlags;

            [NativeTypeName("HRESULT (LPOLESTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, int> SetDocString;

            [NativeTypeName("HRESULT (DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> SetHelpContext;

            [NativeTypeName("HRESULT (WORD, WORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ushort, ushort, int> SetVersion;

            [NativeTypeName("HRESULT (ITypeInfo *, HREFTYPE *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ITypeInfo*, uint*, int> AddRefTypeInfo;

            [NativeTypeName("HRESULT (UINT, FUNCDESC *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, tagFUNCDESC*, int> AddFuncDesc;

            [NativeTypeName("HRESULT (UINT, HREFTYPE) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint, int> AddImplType;

            [NativeTypeName("HRESULT (UINT, INT) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int, int> SetImplTypeFlags;

            [NativeTypeName("HRESULT (WORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ushort, int> SetAlignment;

            [NativeTypeName("HRESULT (LPOLESTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, int> SetSchema;

            [NativeTypeName("HRESULT (UINT, VARDESC *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, tagVARDESC*, int> AddVarDesc;

            [NativeTypeName("HRESULT (UINT, LPOLESTR *, UINT) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, char**, uint, int> SetFuncAndParamNames;

            [NativeTypeName("HRESULT (UINT, LPOLESTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, char*, int> SetVarName;

            [NativeTypeName("HRESULT (TYPEDESC *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagTYPEDESC*, int> SetTypeDescAlias;

            [NativeTypeName("HRESULT (UINT, LPOLESTR, LPOLESTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, char*, char*, int> DefineFuncAsDllEntry;

            [NativeTypeName("HRESULT (UINT, LPOLESTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, char*, int> SetFuncDocString;

            [NativeTypeName("HRESULT (UINT, LPOLESTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, char*, int> SetVarDocString;

            [NativeTypeName("HRESULT (UINT, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint, int> SetFuncHelpContext;

            [NativeTypeName("HRESULT (UINT, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint, int> SetVarHelpContext;

            [NativeTypeName("HRESULT (UINT, BSTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, char*, int> SetMops;

            [NativeTypeName("HRESULT (IDLDESC *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagIDLDESC*, int> SetTypeIdldesc;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> LayOut;
        }
    }

    [Guid("0002040E-0000-0000-C000-000000000046")]
    [NativeTypeName("struct ICreateTypeInfo2 : ICreateTypeInfo")]
    [NativeInheritance("ICreateTypeInfo")]
    public unsafe partial struct ICreateTypeInfo2 : ICreateTypeInfo2.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ICreateTypeInfo2));

        public Vtbl<ICreateTypeInfo2>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((ICreateTypeInfo2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((ICreateTypeInfo2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetGuid([NativeTypeName("const GUID &")] Guid* guid)
        {
            return lpVtbl->SetGuid((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), guid);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetTypeFlags(uint uTypeFlags)
        {
            return lpVtbl->SetTypeFlags((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), uTypeFlags);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetDocString([NativeTypeName("LPOLESTR")] char* pStrDoc)
        {
            return lpVtbl->SetDocString((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), pStrDoc);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetHelpContext([NativeTypeName("DWORD")] uint dwHelpContext)
        {
            return lpVtbl->SetHelpContext((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), dwHelpContext);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetVersion([NativeTypeName("WORD")] ushort wMajorVerNum, [NativeTypeName("WORD")] ushort wMinorVerNum)
        {
            return lpVtbl->SetVersion((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), wMajorVerNum, wMinorVerNum);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int AddRefTypeInfo(ITypeInfo* pTInfo, [NativeTypeName("HREFTYPE *")] uint* phRefType)
        {
            return lpVtbl->AddRefTypeInfo((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), pTInfo, phRefType);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int AddFuncDesc(uint index, [NativeTypeName("FUNCDESC *")] tagFUNCDESC* pFuncDesc)
        {
            return lpVtbl->AddFuncDesc((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), index, pFuncDesc);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int AddImplType(uint index, [NativeTypeName("HREFTYPE")] uint hRefType)
        {
            return lpVtbl->AddImplType((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), index, hRefType);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetImplTypeFlags(uint index, int implTypeFlags)
        {
            return lpVtbl->SetImplTypeFlags((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), index, implTypeFlags);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetAlignment([NativeTypeName("WORD")] ushort cbAlignment)
        {
            return lpVtbl->SetAlignment((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), cbAlignment);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetSchema([NativeTypeName("LPOLESTR")] char* pStrSchema)
        {
            return lpVtbl->SetSchema((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), pStrSchema);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int AddVarDesc(uint index, [NativeTypeName("VARDESC *")] tagVARDESC* pVarDesc)
        {
            return lpVtbl->AddVarDesc((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), index, pVarDesc);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetFuncAndParamNames(uint index, [NativeTypeName("LPOLESTR *")] char** rgszNames, uint cNames)
        {
            return lpVtbl->SetFuncAndParamNames((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), index, rgszNames, cNames);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetVarName(uint index, [NativeTypeName("LPOLESTR")] char* szName)
        {
            return lpVtbl->SetVarName((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), index, szName);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetTypeDescAlias([NativeTypeName("TYPEDESC *")] tagTYPEDESC* pTDescAlias)
        {
            return lpVtbl->SetTypeDescAlias((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), pTDescAlias);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int DefineFuncAsDllEntry(uint index, [NativeTypeName("LPOLESTR")] char* szDllName, [NativeTypeName("LPOLESTR")] char* szProcName)
        {
            return lpVtbl->DefineFuncAsDllEntry((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), index, szDllName, szProcName);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetFuncDocString(uint index, [NativeTypeName("LPOLESTR")] char* szDocString)
        {
            return lpVtbl->SetFuncDocString((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), index, szDocString);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetVarDocString(uint index, [NativeTypeName("LPOLESTR")] char* szDocString)
        {
            return lpVtbl->SetVarDocString((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), index, szDocString);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetFuncHelpContext(uint index, [NativeTypeName("DWORD")] uint dwHelpContext)
        {
            return lpVtbl->SetFuncHelpContext((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), index, dwHelpContext);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetVarHelpContext(uint index, [NativeTypeName("DWORD")] uint dwHelpContext)
        {
            return lpVtbl->SetVarHelpContext((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), index, dwHelpContext);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetMops(uint index, [NativeTypeName("BSTR")] char* bstrMops)
        {
            return lpVtbl->SetMops((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), index, bstrMops);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetTypeIdldesc([NativeTypeName("IDLDESC *")] tagIDLDESC* pIdlDesc)
        {
            return lpVtbl->SetTypeIdldesc((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), pIdlDesc);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int LayOut()
        {
            return lpVtbl->LayOut((ICreateTypeInfo2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int DeleteFuncDesc(uint index)
        {
            return lpVtbl->DeleteFuncDesc((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), index);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int DeleteFuncDescByMemId([NativeTypeName("MEMBERID")] int memid, [NativeTypeName("INVOKEKIND")] tagINVOKEKIND invKind)
        {
            return lpVtbl->DeleteFuncDescByMemId((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), memid, invKind);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int DeleteVarDesc(uint index)
        {
            return lpVtbl->DeleteVarDesc((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), index);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int DeleteVarDescByMemId([NativeTypeName("MEMBERID")] int memid)
        {
            return lpVtbl->DeleteVarDescByMemId((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), memid);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int DeleteImplType(uint index)
        {
            return lpVtbl->DeleteImplType((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), index);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetCustData([NativeTypeName("const GUID &")] Guid* guid, VARIANT* pVarVal)
        {
            return lpVtbl->SetCustData((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), guid, pVarVal);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetFuncCustData(uint index, [NativeTypeName("const GUID &")] Guid* guid, VARIANT* pVarVal)
        {
            return lpVtbl->SetFuncCustData((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), index, guid, pVarVal);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetParamCustData(uint indexFunc, uint indexParam, [NativeTypeName("const GUID &")] Guid* guid, VARIANT* pVarVal)
        {
            return lpVtbl->SetParamCustData((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), indexFunc, indexParam, guid, pVarVal);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetVarCustData(uint index, [NativeTypeName("const GUID &")] Guid* guid, VARIANT* pVarVal)
        {
            return lpVtbl->SetVarCustData((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), index, guid, pVarVal);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetImplTypeCustData(uint index, [NativeTypeName("const GUID &")] Guid* guid, VARIANT* pVarVal)
        {
            return lpVtbl->SetImplTypeCustData((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), index, guid, pVarVal);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetHelpStringContext([NativeTypeName("ULONG")] uint dwHelpStringContext)
        {
            return lpVtbl->SetHelpStringContext((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), dwHelpStringContext);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetFuncHelpStringContext(uint index, [NativeTypeName("ULONG")] uint dwHelpStringContext)
        {
            return lpVtbl->SetFuncHelpStringContext((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), index, dwHelpStringContext);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetVarHelpStringContext(uint index, [NativeTypeName("ULONG")] uint dwHelpStringContext)
        {
            return lpVtbl->SetVarHelpStringContext((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), index, dwHelpStringContext);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Invalidate()
        {
            return lpVtbl->Invalidate((ICreateTypeInfo2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPOLESTR")] char* szName)
        {
            return lpVtbl->SetName((ICreateTypeInfo2*)Unsafe.AsPointer(ref this), szName);
        }

        public interface Interface : ICreateTypeInfo.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int DeleteFuncDesc(uint index);

            [return: NativeTypeName("HRESULT")]
            int DeleteFuncDescByMemId([NativeTypeName("MEMBERID")] int memid, [NativeTypeName("INVOKEKIND")] tagINVOKEKIND invKind);

            [return: NativeTypeName("HRESULT")]
            int DeleteVarDesc(uint index);

            [return: NativeTypeName("HRESULT")]
            int DeleteVarDescByMemId([NativeTypeName("MEMBERID")] int memid);

            [return: NativeTypeName("HRESULT")]
            int DeleteImplType(uint index);

            [return: NativeTypeName("HRESULT")]
            int SetCustData([NativeTypeName("const GUID &")] Guid* guid, VARIANT* pVarVal);

            [return: NativeTypeName("HRESULT")]
            int SetFuncCustData(uint index, [NativeTypeName("const GUID &")] Guid* guid, VARIANT* pVarVal);

            [return: NativeTypeName("HRESULT")]
            int SetParamCustData(uint indexFunc, uint indexParam, [NativeTypeName("const GUID &")] Guid* guid, VARIANT* pVarVal);

            [return: NativeTypeName("HRESULT")]
            int SetVarCustData(uint index, [NativeTypeName("const GUID &")] Guid* guid, VARIANT* pVarVal);

            [return: NativeTypeName("HRESULT")]
            int SetImplTypeCustData(uint index, [NativeTypeName("const GUID &")] Guid* guid, VARIANT* pVarVal);

            [return: NativeTypeName("HRESULT")]
            int SetHelpStringContext([NativeTypeName("ULONG")] uint dwHelpStringContext);

            [return: NativeTypeName("HRESULT")]
            int SetFuncHelpStringContext(uint index, [NativeTypeName("ULONG")] uint dwHelpStringContext);

            [return: NativeTypeName("HRESULT")]
            int SetVarHelpStringContext(uint index, [NativeTypeName("ULONG")] uint dwHelpStringContext);

            [return: NativeTypeName("HRESULT")]
            int Invalidate();

            [return: NativeTypeName("HRESULT")]
            int SetName([NativeTypeName("LPOLESTR")] char* szName);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (const GUID &) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, int> SetGuid;

            [NativeTypeName("HRESULT (UINT) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> SetTypeFlags;

            [NativeTypeName("HRESULT (LPOLESTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, int> SetDocString;

            [NativeTypeName("HRESULT (DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> SetHelpContext;

            [NativeTypeName("HRESULT (WORD, WORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ushort, ushort, int> SetVersion;

            [NativeTypeName("HRESULT (ITypeInfo *, HREFTYPE *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ITypeInfo*, uint*, int> AddRefTypeInfo;

            [NativeTypeName("HRESULT (UINT, FUNCDESC *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, tagFUNCDESC*, int> AddFuncDesc;

            [NativeTypeName("HRESULT (UINT, HREFTYPE) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint, int> AddImplType;

            [NativeTypeName("HRESULT (UINT, INT) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int, int> SetImplTypeFlags;

            [NativeTypeName("HRESULT (WORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ushort, int> SetAlignment;

            [NativeTypeName("HRESULT (LPOLESTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, int> SetSchema;

            [NativeTypeName("HRESULT (UINT, VARDESC *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, tagVARDESC*, int> AddVarDesc;

            [NativeTypeName("HRESULT (UINT, LPOLESTR *, UINT) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, char**, uint, int> SetFuncAndParamNames;

            [NativeTypeName("HRESULT (UINT, LPOLESTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, char*, int> SetVarName;

            [NativeTypeName("HRESULT (TYPEDESC *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagTYPEDESC*, int> SetTypeDescAlias;

            [NativeTypeName("HRESULT (UINT, LPOLESTR, LPOLESTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, char*, char*, int> DefineFuncAsDllEntry;

            [NativeTypeName("HRESULT (UINT, LPOLESTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, char*, int> SetFuncDocString;

            [NativeTypeName("HRESULT (UINT, LPOLESTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, char*, int> SetVarDocString;

            [NativeTypeName("HRESULT (UINT, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint, int> SetFuncHelpContext;

            [NativeTypeName("HRESULT (UINT, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint, int> SetVarHelpContext;

            [NativeTypeName("HRESULT (UINT, BSTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, char*, int> SetMops;

            [NativeTypeName("HRESULT (IDLDESC *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagIDLDESC*, int> SetTypeIdldesc;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> LayOut;

            [NativeTypeName("HRESULT (UINT) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> DeleteFuncDesc;

            [NativeTypeName("HRESULT (MEMBERID, INVOKEKIND) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, tagINVOKEKIND, int> DeleteFuncDescByMemId;

            [NativeTypeName("HRESULT (UINT) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> DeleteVarDesc;

            [NativeTypeName("HRESULT (MEMBERID) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> DeleteVarDescByMemId;

            [NativeTypeName("HRESULT (UINT) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> DeleteImplType;

            [NativeTypeName("HRESULT (const GUID &, VARIANT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, VARIANT*, int> SetCustData;

            [NativeTypeName("HRESULT (UINT, const GUID &, VARIANT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, Guid*, VARIANT*, int> SetFuncCustData;

            [NativeTypeName("HRESULT (UINT, UINT, const GUID &, VARIANT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint, Guid*, VARIANT*, int> SetParamCustData;

            [NativeTypeName("HRESULT (UINT, const GUID &, VARIANT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, Guid*, VARIANT*, int> SetVarCustData;

            [NativeTypeName("HRESULT (UINT, const GUID &, VARIANT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, Guid*, VARIANT*, int> SetImplTypeCustData;

            [NativeTypeName("HRESULT (ULONG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> SetHelpStringContext;

            [NativeTypeName("HRESULT (UINT, ULONG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint, int> SetFuncHelpStringContext;

            [NativeTypeName("HRESULT (UINT, ULONG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint, int> SetVarHelpStringContext;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> Invalidate;

            [NativeTypeName("HRESULT (LPOLESTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, int> SetName;
        }
    }

    [Guid("00020406-0000-0000-C000-000000000046")]
    [NativeTypeName("struct ICreateTypeLib : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ICreateTypeLib : ICreateTypeLib.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ICreateTypeLib));

        public Vtbl<ICreateTypeLib>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((ICreateTypeLib*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((ICreateTypeLib*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((ICreateTypeLib*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int CreateTypeInfo([NativeTypeName("LPOLESTR")] char* szName, [NativeTypeName("TYPEKIND")] tagTYPEKIND tkind, ICreateTypeInfo** ppCTInfo)
        {
            return lpVtbl->CreateTypeInfo((ICreateTypeLib*)Unsafe.AsPointer(ref this), szName, tkind, ppCTInfo);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPOLESTR")] char* szName)
        {
            return lpVtbl->SetName((ICreateTypeLib*)Unsafe.AsPointer(ref this), szName);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetVersion([NativeTypeName("WORD")] ushort wMajorVerNum, [NativeTypeName("WORD")] ushort wMinorVerNum)
        {
            return lpVtbl->SetVersion((ICreateTypeLib*)Unsafe.AsPointer(ref this), wMajorVerNum, wMinorVerNum);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetGuid([NativeTypeName("const GUID &")] Guid* guid)
        {
            return lpVtbl->SetGuid((ICreateTypeLib*)Unsafe.AsPointer(ref this), guid);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetDocString([NativeTypeName("LPOLESTR")] char* szDoc)
        {
            return lpVtbl->SetDocString((ICreateTypeLib*)Unsafe.AsPointer(ref this), szDoc);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetHelpFileName([NativeTypeName("LPOLESTR")] char* szHelpFileName)
        {
            return lpVtbl->SetHelpFileName((ICreateTypeLib*)Unsafe.AsPointer(ref this), szHelpFileName);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetHelpContext([NativeTypeName("DWORD")] uint dwHelpContext)
        {
            return lpVtbl->SetHelpContext((ICreateTypeLib*)Unsafe.AsPointer(ref this), dwHelpContext);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetLcid([NativeTypeName("LCID")] uint lcid)
        {
            return lpVtbl->SetLcid((ICreateTypeLib*)Unsafe.AsPointer(ref this), lcid);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetLibFlags(uint uLibFlags)
        {
            return lpVtbl->SetLibFlags((ICreateTypeLib*)Unsafe.AsPointer(ref this), uLibFlags);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SaveAllChanges()
        {
            return lpVtbl->SaveAllChanges((ICreateTypeLib*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int CreateTypeInfo([NativeTypeName("LPOLESTR")] char* szName, [NativeTypeName("TYPEKIND")] tagTYPEKIND tkind, ICreateTypeInfo** ppCTInfo);

            [return: NativeTypeName("HRESULT")]
            int SetName([NativeTypeName("LPOLESTR")] char* szName);

            [return: NativeTypeName("HRESULT")]
            int SetVersion([NativeTypeName("WORD")] ushort wMajorVerNum, [NativeTypeName("WORD")] ushort wMinorVerNum);

            [return: NativeTypeName("HRESULT")]
            int SetGuid([NativeTypeName("const GUID &")] Guid* guid);

            [return: NativeTypeName("HRESULT")]
            int SetDocString([NativeTypeName("LPOLESTR")] char* szDoc);

            [return: NativeTypeName("HRESULT")]
            int SetHelpFileName([NativeTypeName("LPOLESTR")] char* szHelpFileName);

            [return: NativeTypeName("HRESULT")]
            int SetHelpContext([NativeTypeName("DWORD")] uint dwHelpContext);

            [return: NativeTypeName("HRESULT")]
            int SetLcid([NativeTypeName("LCID")] uint lcid);

            [return: NativeTypeName("HRESULT")]
            int SetLibFlags(uint uLibFlags);

            [return: NativeTypeName("HRESULT")]
            int SaveAllChanges();
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (LPOLESTR, TYPEKIND, ICreateTypeInfo **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, tagTYPEKIND, ICreateTypeInfo**, int> CreateTypeInfo;

            [NativeTypeName("HRESULT (LPOLESTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, int> SetName;

            [NativeTypeName("HRESULT (WORD, WORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ushort, ushort, int> SetVersion;

            [NativeTypeName("HRESULT (const GUID &) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, int> SetGuid;

            [NativeTypeName("HRESULT (LPOLESTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, int> SetDocString;

            [NativeTypeName("HRESULT (LPOLESTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, int> SetHelpFileName;

            [NativeTypeName("HRESULT (DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> SetHelpContext;

            [NativeTypeName("HRESULT (LCID) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> SetLcid;

            [NativeTypeName("HRESULT (UINT) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> SetLibFlags;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> SaveAllChanges;
        }
    }

    [Guid("0002040F-0000-0000-C000-000000000046")]
    [NativeTypeName("struct ICreateTypeLib2 : ICreateTypeLib")]
    [NativeInheritance("ICreateTypeLib")]
    public unsafe partial struct ICreateTypeLib2 : ICreateTypeLib2.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ICreateTypeLib2));

        public Vtbl<ICreateTypeLib2>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((ICreateTypeLib2*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((ICreateTypeLib2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((ICreateTypeLib2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int CreateTypeInfo([NativeTypeName("LPOLESTR")] char* szName, [NativeTypeName("TYPEKIND")] tagTYPEKIND tkind, ICreateTypeInfo** ppCTInfo)
        {
            return lpVtbl->CreateTypeInfo((ICreateTypeLib2*)Unsafe.AsPointer(ref this), szName, tkind, ppCTInfo);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPOLESTR")] char* szName)
        {
            return lpVtbl->SetName((ICreateTypeLib2*)Unsafe.AsPointer(ref this), szName);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetVersion([NativeTypeName("WORD")] ushort wMajorVerNum, [NativeTypeName("WORD")] ushort wMinorVerNum)
        {
            return lpVtbl->SetVersion((ICreateTypeLib2*)Unsafe.AsPointer(ref this), wMajorVerNum, wMinorVerNum);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetGuid([NativeTypeName("const GUID &")] Guid* guid)
        {
            return lpVtbl->SetGuid((ICreateTypeLib2*)Unsafe.AsPointer(ref this), guid);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetDocString([NativeTypeName("LPOLESTR")] char* szDoc)
        {
            return lpVtbl->SetDocString((ICreateTypeLib2*)Unsafe.AsPointer(ref this), szDoc);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetHelpFileName([NativeTypeName("LPOLESTR")] char* szHelpFileName)
        {
            return lpVtbl->SetHelpFileName((ICreateTypeLib2*)Unsafe.AsPointer(ref this), szHelpFileName);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetHelpContext([NativeTypeName("DWORD")] uint dwHelpContext)
        {
            return lpVtbl->SetHelpContext((ICreateTypeLib2*)Unsafe.AsPointer(ref this), dwHelpContext);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetLcid([NativeTypeName("LCID")] uint lcid)
        {
            return lpVtbl->SetLcid((ICreateTypeLib2*)Unsafe.AsPointer(ref this), lcid);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetLibFlags(uint uLibFlags)
        {
            return lpVtbl->SetLibFlags((ICreateTypeLib2*)Unsafe.AsPointer(ref this), uLibFlags);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SaveAllChanges()
        {
            return lpVtbl->SaveAllChanges((ICreateTypeLib2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int DeleteTypeInfo([NativeTypeName("LPOLESTR")] char* szName)
        {
            return lpVtbl->DeleteTypeInfo((ICreateTypeLib2*)Unsafe.AsPointer(ref this), szName);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetCustData([NativeTypeName("const GUID &")] Guid* guid, VARIANT* pVarVal)
        {
            return lpVtbl->SetCustData((ICreateTypeLib2*)Unsafe.AsPointer(ref this), guid, pVarVal);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetHelpStringContext([NativeTypeName("ULONG")] uint dwHelpStringContext)
        {
            return lpVtbl->SetHelpStringContext((ICreateTypeLib2*)Unsafe.AsPointer(ref this), dwHelpStringContext);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetHelpStringDll([NativeTypeName("LPOLESTR")] char* szFileName)
        {
            return lpVtbl->SetHelpStringDll((ICreateTypeLib2*)Unsafe.AsPointer(ref this), szFileName);
        }

        public interface Interface : ICreateTypeLib.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int DeleteTypeInfo([NativeTypeName("LPOLESTR")] char* szName);

            [return: NativeTypeName("HRESULT")]
            int SetCustData([NativeTypeName("const GUID &")] Guid* guid, VARIANT* pVarVal);

            [return: NativeTypeName("HRESULT")]
            int SetHelpStringContext([NativeTypeName("ULONG")] uint dwHelpStringContext);

            [return: NativeTypeName("HRESULT")]
            int SetHelpStringDll([NativeTypeName("LPOLESTR")] char* szFileName);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (LPOLESTR, TYPEKIND, ICreateTypeInfo **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, tagTYPEKIND, ICreateTypeInfo**, int> CreateTypeInfo;

            [NativeTypeName("HRESULT (LPOLESTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, int> SetName;

            [NativeTypeName("HRESULT (WORD, WORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ushort, ushort, int> SetVersion;

            [NativeTypeName("HRESULT (const GUID &) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, int> SetGuid;

            [NativeTypeName("HRESULT (LPOLESTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, int> SetDocString;

            [NativeTypeName("HRESULT (LPOLESTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, int> SetHelpFileName;

            [NativeTypeName("HRESULT (DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> SetHelpContext;

            [NativeTypeName("HRESULT (LCID) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> SetLcid;

            [NativeTypeName("HRESULT (UINT) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> SetLibFlags;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> SaveAllChanges;

            [NativeTypeName("HRESULT (LPOLESTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, int> DeleteTypeInfo;

            [NativeTypeName("HRESULT (const GUID &, VARIANT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, VARIANT*, int> SetCustData;

            [NativeTypeName("HRESULT (ULONG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> SetHelpStringContext;

            [NativeTypeName("HRESULT (LPOLESTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, int> SetHelpStringDll;
        }
    }

    [Guid("00020400-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IDispatch : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IDispatch : IDispatch.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDispatch));

        public Vtbl<IDispatch>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IDispatch*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IDispatch*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IDispatch*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetTypeInfoCount(uint* pctinfo)
        {
            return lpVtbl->GetTypeInfoCount((IDispatch*)Unsafe.AsPointer(ref this), pctinfo);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetTypeInfo(uint iTInfo, [NativeTypeName("LCID")] uint lcid, ITypeInfo** ppTInfo)
        {
            return lpVtbl->GetTypeInfo((IDispatch*)Unsafe.AsPointer(ref this), iTInfo, lcid, ppTInfo);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetIDsOfNames([NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("LPOLESTR *")] char** rgszNames, uint cNames, [NativeTypeName("LCID")] uint lcid, [NativeTypeName("DISPID *")] int* rgDispId)
        {
            return lpVtbl->GetIDsOfNames((IDispatch*)Unsafe.AsPointer(ref this), riid, rgszNames, cNames, lcid, rgDispId);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Invoke([NativeTypeName("DISPID")] int dispIdMember, [NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("LCID")] uint lcid, [NativeTypeName("WORD")] ushort wFlags, [NativeTypeName("DISPPARAMS *")] tagDISPPARAMS* pDispParams, VARIANT* pVarResult, [NativeTypeName("EXCEPINFO *")] tagEXCEPINFO* pExcepInfo, uint* puArgErr)
        {
            return lpVtbl->Invoke((IDispatch*)Unsafe.AsPointer(ref this), dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int GetTypeInfoCount(uint* pctinfo);

            [return: NativeTypeName("HRESULT")]
            int GetTypeInfo(uint iTInfo, [NativeTypeName("LCID")] uint lcid, ITypeInfo** ppTInfo);

            [return: NativeTypeName("HRESULT")]
            int GetIDsOfNames([NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("LPOLESTR *")] char** rgszNames, uint cNames, [NativeTypeName("LCID")] uint lcid, [NativeTypeName("DISPID *")] int* rgDispId);

            [return: NativeTypeName("HRESULT")]
            int Invoke([NativeTypeName("DISPID")] int dispIdMember, [NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("LCID")] uint lcid, [NativeTypeName("WORD")] ushort wFlags, [NativeTypeName("DISPPARAMS *")] tagDISPPARAMS* pDispParams, VARIANT* pVarResult, [NativeTypeName("EXCEPINFO *")] tagEXCEPINFO* pExcepInfo, uint* puArgErr);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (UINT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, int> GetTypeInfoCount;

            [NativeTypeName("HRESULT (UINT, LCID, ITypeInfo **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint, ITypeInfo**, int> GetTypeInfo;

            [NativeTypeName("HRESULT (const IID &, LPOLESTR *, UINT, LCID, DISPID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, char**, uint, uint, int*, int> GetIDsOfNames;

            [NativeTypeName("HRESULT (DISPID, const IID &, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, Guid*, uint, ushort, tagDISPPARAMS*, VARIANT*, tagEXCEPINFO*, uint*, int> Invoke;
        }
    }

    [Guid("00020404-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IEnumVARIANT : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IEnumVARIANT : IEnumVARIANT.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IEnumVARIANT));

        public Vtbl<IEnumVARIANT>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IEnumVARIANT*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IEnumVARIANT*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IEnumVARIANT*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Next([NativeTypeName("ULONG")] uint celt, VARIANT* rgVar, [NativeTypeName("ULONG *")] uint* pCeltFetched)
        {
            return lpVtbl->Next((IEnumVARIANT*)Unsafe.AsPointer(ref this), celt, rgVar, pCeltFetched);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Skip([NativeTypeName("ULONG")] uint celt)
        {
            return lpVtbl->Skip((IEnumVARIANT*)Unsafe.AsPointer(ref this), celt);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Reset()
        {
            return lpVtbl->Reset((IEnumVARIANT*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Clone(IEnumVARIANT** ppEnum)
        {
            return lpVtbl->Clone((IEnumVARIANT*)Unsafe.AsPointer(ref this), ppEnum);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Next([NativeTypeName("ULONG")] uint celt, VARIANT* rgVar, [NativeTypeName("ULONG *")] uint* pCeltFetched);

            [return: NativeTypeName("HRESULT")]
            int Skip([NativeTypeName("ULONG")] uint celt);

            [return: NativeTypeName("HRESULT")]
            int Reset();

            [return: NativeTypeName("HRESULT")]
            int Clone(IEnumVARIANT** ppEnum);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (ULONG, VARIANT *, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, VARIANT*, uint*, int> Next;

            [NativeTypeName("HRESULT (ULONG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> Skip;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> Reset;

            [NativeTypeName("HRESULT (IEnumVARIANT **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IEnumVARIANT**, int> Clone;
        }
    }

    public enum tagDESCKIND
    {
        DESCKIND_NONE = 0,
        DESCKIND_FUNCDESC = (DESCKIND_NONE + 1),
        DESCKIND_VARDESC = (DESCKIND_FUNCDESC + 1),
        DESCKIND_TYPECOMP = (DESCKIND_VARDESC + 1),
        DESCKIND_IMPLICITAPPOBJ = (DESCKIND_TYPECOMP + 1),
        DESCKIND_MAX = (DESCKIND_IMPLICITAPPOBJ + 1),
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe partial struct tagBINDPTR
    {
        [FieldOffset(0)]
        [NativeTypeName("FUNCDESC *")]
        public tagFUNCDESC* lpfuncdesc;

        [FieldOffset(0)]
        [NativeTypeName("VARDESC *")]
        public tagVARDESC* lpvardesc;

        [FieldOffset(0)]
        public ITypeComp* lptcomp;
    }

    [Guid("00020403-0000-0000-C000-000000000046")]
    [NativeTypeName("struct ITypeComp : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ITypeComp : ITypeComp.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ITypeComp));

        public Vtbl<ITypeComp>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((ITypeComp*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((ITypeComp*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((ITypeComp*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Bind([NativeTypeName("LPOLESTR")] char* szName, [NativeTypeName("ULONG")] uint lHashVal, [NativeTypeName("WORD")] ushort wFlags, ITypeInfo** ppTInfo, [NativeTypeName("DESCKIND *")] tagDESCKIND* pDescKind, [NativeTypeName("BINDPTR *")] tagBINDPTR* pBindPtr)
        {
            return lpVtbl->Bind((ITypeComp*)Unsafe.AsPointer(ref this), szName, lHashVal, wFlags, ppTInfo, pDescKind, pBindPtr);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int BindType([NativeTypeName("LPOLESTR")] char* szName, [NativeTypeName("ULONG")] uint lHashVal, ITypeInfo** ppTInfo, ITypeComp** ppTComp)
        {
            return lpVtbl->BindType((ITypeComp*)Unsafe.AsPointer(ref this), szName, lHashVal, ppTInfo, ppTComp);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Bind([NativeTypeName("LPOLESTR")] char* szName, [NativeTypeName("ULONG")] uint lHashVal, [NativeTypeName("WORD")] ushort wFlags, ITypeInfo** ppTInfo, [NativeTypeName("DESCKIND *")] tagDESCKIND* pDescKind, [NativeTypeName("BINDPTR *")] tagBINDPTR* pBindPtr);

            [return: NativeTypeName("HRESULT")]
            int BindType([NativeTypeName("LPOLESTR")] char* szName, [NativeTypeName("ULONG")] uint lHashVal, ITypeInfo** ppTInfo, ITypeComp** ppTComp);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (LPOLESTR, ULONG, WORD, ITypeInfo **, DESCKIND *, BINDPTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, uint, ushort, ITypeInfo**, tagDESCKIND*, tagBINDPTR*, int> Bind;

            [NativeTypeName("HRESULT (LPOLESTR, ULONG, ITypeInfo **, ITypeComp **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, uint, ITypeInfo**, ITypeComp**, int> BindType;
        }
    }

    [Guid("00020401-0000-0000-C000-000000000046")]
    [NativeTypeName("struct ITypeInfo : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ITypeInfo : ITypeInfo.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ITypeInfo));

        public Vtbl<ITypeInfo>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((ITypeInfo*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((ITypeInfo*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((ITypeInfo*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetTypeAttr([NativeTypeName("TYPEATTR **")] tagTYPEATTR** ppTypeAttr)
        {
            return lpVtbl->GetTypeAttr((ITypeInfo*)Unsafe.AsPointer(ref this), ppTypeAttr);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetTypeComp(ITypeComp** ppTComp)
        {
            return lpVtbl->GetTypeComp((ITypeInfo*)Unsafe.AsPointer(ref this), ppTComp);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetFuncDesc(uint index, [NativeTypeName("FUNCDESC **")] tagFUNCDESC** ppFuncDesc)
        {
            return lpVtbl->GetFuncDesc((ITypeInfo*)Unsafe.AsPointer(ref this), index, ppFuncDesc);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetVarDesc(uint index, [NativeTypeName("VARDESC **")] tagVARDESC** ppVarDesc)
        {
            return lpVtbl->GetVarDesc((ITypeInfo*)Unsafe.AsPointer(ref this), index, ppVarDesc);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetNames([NativeTypeName("MEMBERID")] int memid, [NativeTypeName("BSTR *")] char** rgBstrNames, uint cMaxNames, uint* pcNames)
        {
            return lpVtbl->GetNames((ITypeInfo*)Unsafe.AsPointer(ref this), memid, rgBstrNames, cMaxNames, pcNames);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetRefTypeOfImplType(uint index, [NativeTypeName("HREFTYPE *")] uint* pRefType)
        {
            return lpVtbl->GetRefTypeOfImplType((ITypeInfo*)Unsafe.AsPointer(ref this), index, pRefType);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetImplTypeFlags(uint index, int* pImplTypeFlags)
        {
            return lpVtbl->GetImplTypeFlags((ITypeInfo*)Unsafe.AsPointer(ref this), index, pImplTypeFlags);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetIDsOfNames([NativeTypeName("LPOLESTR *")] char** rgszNames, uint cNames, [NativeTypeName("MEMBERID *")] int* pMemId)
        {
            return lpVtbl->GetIDsOfNames((ITypeInfo*)Unsafe.AsPointer(ref this), rgszNames, cNames, pMemId);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Invoke([NativeTypeName("PVOID")] void* pvInstance, [NativeTypeName("MEMBERID")] int memid, [NativeTypeName("WORD")] ushort wFlags, [NativeTypeName("DISPPARAMS *")] tagDISPPARAMS* pDispParams, VARIANT* pVarResult, [NativeTypeName("EXCEPINFO *")] tagEXCEPINFO* pExcepInfo, uint* puArgErr)
        {
            return lpVtbl->Invoke((ITypeInfo*)Unsafe.AsPointer(ref this), pvInstance, memid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetDocumentation([NativeTypeName("MEMBERID")] int memid, [NativeTypeName("BSTR *")] char** pBstrName, [NativeTypeName("BSTR *")] char** pBstrDocString, [NativeTypeName("DWORD *")] uint* pdwHelpContext, [NativeTypeName("BSTR *")] char** pBstrHelpFile)
        {
            return lpVtbl->GetDocumentation((ITypeInfo*)Unsafe.AsPointer(ref this), memid, pBstrName, pBstrDocString, pdwHelpContext, pBstrHelpFile);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetDllEntry([NativeTypeName("MEMBERID")] int memid, [NativeTypeName("INVOKEKIND")] tagINVOKEKIND invKind, [NativeTypeName("BSTR *")] char** pBstrDllName, [NativeTypeName("BSTR *")] char** pBstrName, [NativeTypeName("WORD *")] ushort* pwOrdinal)
        {
            return lpVtbl->GetDllEntry((ITypeInfo*)Unsafe.AsPointer(ref this), memid, invKind, pBstrDllName, pBstrName, pwOrdinal);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetRefTypeInfo([NativeTypeName("HREFTYPE")] uint hRefType, ITypeInfo** ppTInfo)
        {
            return lpVtbl->GetRefTypeInfo((ITypeInfo*)Unsafe.AsPointer(ref this), hRefType, ppTInfo);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int AddressOfMember([NativeTypeName("MEMBERID")] int memid, [NativeTypeName("INVOKEKIND")] tagINVOKEKIND invKind, [NativeTypeName("PVOID *")] void** ppv)
        {
            return lpVtbl->AddressOfMember((ITypeInfo*)Unsafe.AsPointer(ref this), memid, invKind, ppv);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int CreateInstance(IUnknown* pUnkOuter, [NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("PVOID *")] void** ppvObj)
        {
            return lpVtbl->CreateInstance((ITypeInfo*)Unsafe.AsPointer(ref this), pUnkOuter, riid, ppvObj);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetMops([NativeTypeName("MEMBERID")] int memid, [NativeTypeName("BSTR *")] char** pBstrMops)
        {
            return lpVtbl->GetMops((ITypeInfo*)Unsafe.AsPointer(ref this), memid, pBstrMops);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetContainingTypeLib(ITypeLib** ppTLib, uint* pIndex)
        {
            return lpVtbl->GetContainingTypeLib((ITypeInfo*)Unsafe.AsPointer(ref this), ppTLib, pIndex);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ReleaseTypeAttr([NativeTypeName("TYPEATTR *")] tagTYPEATTR* pTypeAttr)
        {
            lpVtbl->ReleaseTypeAttr((ITypeInfo*)Unsafe.AsPointer(ref this), pTypeAttr);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ReleaseFuncDesc([NativeTypeName("FUNCDESC *")] tagFUNCDESC* pFuncDesc)
        {
            lpVtbl->ReleaseFuncDesc((ITypeInfo*)Unsafe.AsPointer(ref this), pFuncDesc);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ReleaseVarDesc([NativeTypeName("VARDESC *")] tagVARDESC* pVarDesc)
        {
            lpVtbl->ReleaseVarDesc((ITypeInfo*)Unsafe.AsPointer(ref this), pVarDesc);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int GetTypeAttr([NativeTypeName("TYPEATTR **")] tagTYPEATTR** ppTypeAttr);

            [return: NativeTypeName("HRESULT")]
            int GetTypeComp(ITypeComp** ppTComp);

            [return: NativeTypeName("HRESULT")]
            int GetFuncDesc(uint index, [NativeTypeName("FUNCDESC **")] tagFUNCDESC** ppFuncDesc);

            [return: NativeTypeName("HRESULT")]
            int GetVarDesc(uint index, [NativeTypeName("VARDESC **")] tagVARDESC** ppVarDesc);

            [return: NativeTypeName("HRESULT")]
            int GetNames([NativeTypeName("MEMBERID")] int memid, [NativeTypeName("BSTR *")] char** rgBstrNames, uint cMaxNames, uint* pcNames);

            [return: NativeTypeName("HRESULT")]
            int GetRefTypeOfImplType(uint index, [NativeTypeName("HREFTYPE *")] uint* pRefType);

            [return: NativeTypeName("HRESULT")]
            int GetImplTypeFlags(uint index, int* pImplTypeFlags);

            [return: NativeTypeName("HRESULT")]
            int GetIDsOfNames([NativeTypeName("LPOLESTR *")] char** rgszNames, uint cNames, [NativeTypeName("MEMBERID *")] int* pMemId);

            [return: NativeTypeName("HRESULT")]
            int Invoke([NativeTypeName("PVOID")] void* pvInstance, [NativeTypeName("MEMBERID")] int memid, [NativeTypeName("WORD")] ushort wFlags, [NativeTypeName("DISPPARAMS *")] tagDISPPARAMS* pDispParams, VARIANT* pVarResult, [NativeTypeName("EXCEPINFO *")] tagEXCEPINFO* pExcepInfo, uint* puArgErr);

            [return: NativeTypeName("HRESULT")]
            int GetDocumentation([NativeTypeName("MEMBERID")] int memid, [NativeTypeName("BSTR *")] char** pBstrName, [NativeTypeName("BSTR *")] char** pBstrDocString, [NativeTypeName("DWORD *")] uint* pdwHelpContext, [NativeTypeName("BSTR *")] char** pBstrHelpFile);

            [return: NativeTypeName("HRESULT")]
            int GetDllEntry([NativeTypeName("MEMBERID")] int memid, [NativeTypeName("INVOKEKIND")] tagINVOKEKIND invKind, [NativeTypeName("BSTR *")] char** pBstrDllName, [NativeTypeName("BSTR *")] char** pBstrName, [NativeTypeName("WORD *")] ushort* pwOrdinal);

            [return: NativeTypeName("HRESULT")]
            int GetRefTypeInfo([NativeTypeName("HREFTYPE")] uint hRefType, ITypeInfo** ppTInfo);

            [return: NativeTypeName("HRESULT")]
            int AddressOfMember([NativeTypeName("MEMBERID")] int memid, [NativeTypeName("INVOKEKIND")] tagINVOKEKIND invKind, [NativeTypeName("PVOID *")] void** ppv);

            [return: NativeTypeName("HRESULT")]
            int CreateInstance(IUnknown* pUnkOuter, [NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("PVOID *")] void** ppvObj);

            [return: NativeTypeName("HRESULT")]
            int GetMops([NativeTypeName("MEMBERID")] int memid, [NativeTypeName("BSTR *")] char** pBstrMops);

            [return: NativeTypeName("HRESULT")]
            int GetContainingTypeLib(ITypeLib** ppTLib, uint* pIndex);

            void ReleaseTypeAttr([NativeTypeName("TYPEATTR *")] tagTYPEATTR* pTypeAttr);

            void ReleaseFuncDesc([NativeTypeName("FUNCDESC *")] tagFUNCDESC* pFuncDesc);

            void ReleaseVarDesc([NativeTypeName("VARDESC *")] tagVARDESC* pVarDesc);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (TYPEATTR **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagTYPEATTR**, int> GetTypeAttr;

            [NativeTypeName("HRESULT (ITypeComp **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ITypeComp**, int> GetTypeComp;

            [NativeTypeName("HRESULT (UINT, FUNCDESC **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, tagFUNCDESC**, int> GetFuncDesc;

            [NativeTypeName("HRESULT (UINT, VARDESC **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, tagVARDESC**, int> GetVarDesc;

            [NativeTypeName("HRESULT (MEMBERID, BSTR *, UINT, UINT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, char**, uint, uint*, int> GetNames;

            [NativeTypeName("HRESULT (UINT, HREFTYPE *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint*, int> GetRefTypeOfImplType;

            [NativeTypeName("HRESULT (UINT, INT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int*, int> GetImplTypeFlags;

            [NativeTypeName("HRESULT (LPOLESTR *, UINT, MEMBERID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char**, uint, int*, int> GetIDsOfNames;

            [NativeTypeName("HRESULT (PVOID, MEMBERID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*, int, ushort, tagDISPPARAMS*, VARIANT*, tagEXCEPINFO*, uint*, int> Invoke;

            [NativeTypeName("HRESULT (MEMBERID, BSTR *, BSTR *, DWORD *, BSTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, char**, char**, uint*, char**, int> GetDocumentation;

            [NativeTypeName("HRESULT (MEMBERID, INVOKEKIND, BSTR *, BSTR *, WORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, tagINVOKEKIND, char**, char**, ushort*, int> GetDllEntry;

            [NativeTypeName("HRESULT (HREFTYPE, ITypeInfo **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, ITypeInfo**, int> GetRefTypeInfo;

            [NativeTypeName("HRESULT (MEMBERID, INVOKEKIND, PVOID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, tagINVOKEKIND, void**, int> AddressOfMember;

            [NativeTypeName("HRESULT (IUnknown *, const IID &, PVOID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IUnknown*, Guid*, void**, int> CreateInstance;

            [NativeTypeName("HRESULT (MEMBERID, BSTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, char**, int> GetMops;

            [NativeTypeName("HRESULT (ITypeLib **, UINT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ITypeLib**, uint*, int> GetContainingTypeLib;

            [NativeTypeName("void (TYPEATTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagTYPEATTR*, void> ReleaseTypeAttr;

            [NativeTypeName("void (FUNCDESC *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagFUNCDESC*, void> ReleaseFuncDesc;

            [NativeTypeName("void (VARDESC *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagVARDESC*, void> ReleaseVarDesc;
        }
    }

    [Guid("00020412-0000-0000-C000-000000000046")]
    [NativeTypeName("struct ITypeInfo2 : ITypeInfo")]
    [NativeInheritance("ITypeInfo")]
    public unsafe partial struct ITypeInfo2 : ITypeInfo2.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ITypeInfo2));

        public Vtbl<ITypeInfo2>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((ITypeInfo2*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((ITypeInfo2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((ITypeInfo2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetTypeAttr([NativeTypeName("TYPEATTR **")] tagTYPEATTR** ppTypeAttr)
        {
            return lpVtbl->GetTypeAttr((ITypeInfo2*)Unsafe.AsPointer(ref this), ppTypeAttr);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetTypeComp(ITypeComp** ppTComp)
        {
            return lpVtbl->GetTypeComp((ITypeInfo2*)Unsafe.AsPointer(ref this), ppTComp);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetFuncDesc(uint index, [NativeTypeName("FUNCDESC **")] tagFUNCDESC** ppFuncDesc)
        {
            return lpVtbl->GetFuncDesc((ITypeInfo2*)Unsafe.AsPointer(ref this), index, ppFuncDesc);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetVarDesc(uint index, [NativeTypeName("VARDESC **")] tagVARDESC** ppVarDesc)
        {
            return lpVtbl->GetVarDesc((ITypeInfo2*)Unsafe.AsPointer(ref this), index, ppVarDesc);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetNames([NativeTypeName("MEMBERID")] int memid, [NativeTypeName("BSTR *")] char** rgBstrNames, uint cMaxNames, uint* pcNames)
        {
            return lpVtbl->GetNames((ITypeInfo2*)Unsafe.AsPointer(ref this), memid, rgBstrNames, cMaxNames, pcNames);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetRefTypeOfImplType(uint index, [NativeTypeName("HREFTYPE *")] uint* pRefType)
        {
            return lpVtbl->GetRefTypeOfImplType((ITypeInfo2*)Unsafe.AsPointer(ref this), index, pRefType);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetImplTypeFlags(uint index, int* pImplTypeFlags)
        {
            return lpVtbl->GetImplTypeFlags((ITypeInfo2*)Unsafe.AsPointer(ref this), index, pImplTypeFlags);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetIDsOfNames([NativeTypeName("LPOLESTR *")] char** rgszNames, uint cNames, [NativeTypeName("MEMBERID *")] int* pMemId)
        {
            return lpVtbl->GetIDsOfNames((ITypeInfo2*)Unsafe.AsPointer(ref this), rgszNames, cNames, pMemId);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Invoke([NativeTypeName("PVOID")] void* pvInstance, [NativeTypeName("MEMBERID")] int memid, [NativeTypeName("WORD")] ushort wFlags, [NativeTypeName("DISPPARAMS *")] tagDISPPARAMS* pDispParams, VARIANT* pVarResult, [NativeTypeName("EXCEPINFO *")] tagEXCEPINFO* pExcepInfo, uint* puArgErr)
        {
            return lpVtbl->Invoke((ITypeInfo2*)Unsafe.AsPointer(ref this), pvInstance, memid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetDocumentation([NativeTypeName("MEMBERID")] int memid, [NativeTypeName("BSTR *")] char** pBstrName, [NativeTypeName("BSTR *")] char** pBstrDocString, [NativeTypeName("DWORD *")] uint* pdwHelpContext, [NativeTypeName("BSTR *")] char** pBstrHelpFile)
        {
            return lpVtbl->GetDocumentation((ITypeInfo2*)Unsafe.AsPointer(ref this), memid, pBstrName, pBstrDocString, pdwHelpContext, pBstrHelpFile);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetDllEntry([NativeTypeName("MEMBERID")] int memid, [NativeTypeName("INVOKEKIND")] tagINVOKEKIND invKind, [NativeTypeName("BSTR *")] char** pBstrDllName, [NativeTypeName("BSTR *")] char** pBstrName, [NativeTypeName("WORD *")] ushort* pwOrdinal)
        {
            return lpVtbl->GetDllEntry((ITypeInfo2*)Unsafe.AsPointer(ref this), memid, invKind, pBstrDllName, pBstrName, pwOrdinal);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetRefTypeInfo([NativeTypeName("HREFTYPE")] uint hRefType, ITypeInfo** ppTInfo)
        {
            return lpVtbl->GetRefTypeInfo((ITypeInfo2*)Unsafe.AsPointer(ref this), hRefType, ppTInfo);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int AddressOfMember([NativeTypeName("MEMBERID")] int memid, [NativeTypeName("INVOKEKIND")] tagINVOKEKIND invKind, [NativeTypeName("PVOID *")] void** ppv)
        {
            return lpVtbl->AddressOfMember((ITypeInfo2*)Unsafe.AsPointer(ref this), memid, invKind, ppv);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int CreateInstance(IUnknown* pUnkOuter, [NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("PVOID *")] void** ppvObj)
        {
            return lpVtbl->CreateInstance((ITypeInfo2*)Unsafe.AsPointer(ref this), pUnkOuter, riid, ppvObj);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetMops([NativeTypeName("MEMBERID")] int memid, [NativeTypeName("BSTR *")] char** pBstrMops)
        {
            return lpVtbl->GetMops((ITypeInfo2*)Unsafe.AsPointer(ref this), memid, pBstrMops);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetContainingTypeLib(ITypeLib** ppTLib, uint* pIndex)
        {
            return lpVtbl->GetContainingTypeLib((ITypeInfo2*)Unsafe.AsPointer(ref this), ppTLib, pIndex);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ReleaseTypeAttr([NativeTypeName("TYPEATTR *")] tagTYPEATTR* pTypeAttr)
        {
            lpVtbl->ReleaseTypeAttr((ITypeInfo2*)Unsafe.AsPointer(ref this), pTypeAttr);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ReleaseFuncDesc([NativeTypeName("FUNCDESC *")] tagFUNCDESC* pFuncDesc)
        {
            lpVtbl->ReleaseFuncDesc((ITypeInfo2*)Unsafe.AsPointer(ref this), pFuncDesc);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ReleaseVarDesc([NativeTypeName("VARDESC *")] tagVARDESC* pVarDesc)
        {
            lpVtbl->ReleaseVarDesc((ITypeInfo2*)Unsafe.AsPointer(ref this), pVarDesc);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetTypeKind([NativeTypeName("TYPEKIND *")] tagTYPEKIND* pTypeKind)
        {
            return lpVtbl->GetTypeKind((ITypeInfo2*)Unsafe.AsPointer(ref this), pTypeKind);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetTypeFlags([NativeTypeName("ULONG *")] uint* pTypeFlags)
        {
            return lpVtbl->GetTypeFlags((ITypeInfo2*)Unsafe.AsPointer(ref this), pTypeFlags);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetFuncIndexOfMemId([NativeTypeName("MEMBERID")] int memid, [NativeTypeName("INVOKEKIND")] tagINVOKEKIND invKind, uint* pFuncIndex)
        {
            return lpVtbl->GetFuncIndexOfMemId((ITypeInfo2*)Unsafe.AsPointer(ref this), memid, invKind, pFuncIndex);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetVarIndexOfMemId([NativeTypeName("MEMBERID")] int memid, uint* pVarIndex)
        {
            return lpVtbl->GetVarIndexOfMemId((ITypeInfo2*)Unsafe.AsPointer(ref this), memid, pVarIndex);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetCustData([NativeTypeName("const GUID &")] Guid* guid, VARIANT* pVarVal)
        {
            return lpVtbl->GetCustData((ITypeInfo2*)Unsafe.AsPointer(ref this), guid, pVarVal);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetFuncCustData(uint index, [NativeTypeName("const GUID &")] Guid* guid, VARIANT* pVarVal)
        {
            return lpVtbl->GetFuncCustData((ITypeInfo2*)Unsafe.AsPointer(ref this), index, guid, pVarVal);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetParamCustData(uint indexFunc, uint indexParam, [NativeTypeName("const GUID &")] Guid* guid, VARIANT* pVarVal)
        {
            return lpVtbl->GetParamCustData((ITypeInfo2*)Unsafe.AsPointer(ref this), indexFunc, indexParam, guid, pVarVal);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetVarCustData(uint index, [NativeTypeName("const GUID &")] Guid* guid, VARIANT* pVarVal)
        {
            return lpVtbl->GetVarCustData((ITypeInfo2*)Unsafe.AsPointer(ref this), index, guid, pVarVal);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetImplTypeCustData(uint index, [NativeTypeName("const GUID &")] Guid* guid, VARIANT* pVarVal)
        {
            return lpVtbl->GetImplTypeCustData((ITypeInfo2*)Unsafe.AsPointer(ref this), index, guid, pVarVal);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetDocumentation2([NativeTypeName("MEMBERID")] int memid, [NativeTypeName("LCID")] uint lcid, [NativeTypeName("BSTR *")] char** pbstrHelpString, [NativeTypeName("DWORD *")] uint* pdwHelpStringContext, [NativeTypeName("BSTR *")] char** pbstrHelpStringDll)
        {
            return lpVtbl->GetDocumentation2((ITypeInfo2*)Unsafe.AsPointer(ref this), memid, lcid, pbstrHelpString, pdwHelpStringContext, pbstrHelpStringDll);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetAllCustData([NativeTypeName("CUSTDATA *")] tagCUSTDATA* pCustData)
        {
            return lpVtbl->GetAllCustData((ITypeInfo2*)Unsafe.AsPointer(ref this), pCustData);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetAllFuncCustData(uint index, [NativeTypeName("CUSTDATA *")] tagCUSTDATA* pCustData)
        {
            return lpVtbl->GetAllFuncCustData((ITypeInfo2*)Unsafe.AsPointer(ref this), index, pCustData);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetAllParamCustData(uint indexFunc, uint indexParam, [NativeTypeName("CUSTDATA *")] tagCUSTDATA* pCustData)
        {
            return lpVtbl->GetAllParamCustData((ITypeInfo2*)Unsafe.AsPointer(ref this), indexFunc, indexParam, pCustData);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetAllVarCustData(uint index, [NativeTypeName("CUSTDATA *")] tagCUSTDATA* pCustData)
        {
            return lpVtbl->GetAllVarCustData((ITypeInfo2*)Unsafe.AsPointer(ref this), index, pCustData);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetAllImplTypeCustData(uint index, [NativeTypeName("CUSTDATA *")] tagCUSTDATA* pCustData)
        {
            return lpVtbl->GetAllImplTypeCustData((ITypeInfo2*)Unsafe.AsPointer(ref this), index, pCustData);
        }

        public interface Interface : ITypeInfo.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int GetTypeKind([NativeTypeName("TYPEKIND *")] tagTYPEKIND* pTypeKind);

            [return: NativeTypeName("HRESULT")]
            int GetTypeFlags([NativeTypeName("ULONG *")] uint* pTypeFlags);

            [return: NativeTypeName("HRESULT")]
            int GetFuncIndexOfMemId([NativeTypeName("MEMBERID")] int memid, [NativeTypeName("INVOKEKIND")] tagINVOKEKIND invKind, uint* pFuncIndex);

            [return: NativeTypeName("HRESULT")]
            int GetVarIndexOfMemId([NativeTypeName("MEMBERID")] int memid, uint* pVarIndex);

            [return: NativeTypeName("HRESULT")]
            int GetCustData([NativeTypeName("const GUID &")] Guid* guid, VARIANT* pVarVal);

            [return: NativeTypeName("HRESULT")]
            int GetFuncCustData(uint index, [NativeTypeName("const GUID &")] Guid* guid, VARIANT* pVarVal);

            [return: NativeTypeName("HRESULT")]
            int GetParamCustData(uint indexFunc, uint indexParam, [NativeTypeName("const GUID &")] Guid* guid, VARIANT* pVarVal);

            [return: NativeTypeName("HRESULT")]
            int GetVarCustData(uint index, [NativeTypeName("const GUID &")] Guid* guid, VARIANT* pVarVal);

            [return: NativeTypeName("HRESULT")]
            int GetImplTypeCustData(uint index, [NativeTypeName("const GUID &")] Guid* guid, VARIANT* pVarVal);

            [return: NativeTypeName("HRESULT")]
            int GetDocumentation2([NativeTypeName("MEMBERID")] int memid, [NativeTypeName("LCID")] uint lcid, [NativeTypeName("BSTR *")] char** pbstrHelpString, [NativeTypeName("DWORD *")] uint* pdwHelpStringContext, [NativeTypeName("BSTR *")] char** pbstrHelpStringDll);

            [return: NativeTypeName("HRESULT")]
            int GetAllCustData([NativeTypeName("CUSTDATA *")] tagCUSTDATA* pCustData);

            [return: NativeTypeName("HRESULT")]
            int GetAllFuncCustData(uint index, [NativeTypeName("CUSTDATA *")] tagCUSTDATA* pCustData);

            [return: NativeTypeName("HRESULT")]
            int GetAllParamCustData(uint indexFunc, uint indexParam, [NativeTypeName("CUSTDATA *")] tagCUSTDATA* pCustData);

            [return: NativeTypeName("HRESULT")]
            int GetAllVarCustData(uint index, [NativeTypeName("CUSTDATA *")] tagCUSTDATA* pCustData);

            [return: NativeTypeName("HRESULT")]
            int GetAllImplTypeCustData(uint index, [NativeTypeName("CUSTDATA *")] tagCUSTDATA* pCustData);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (TYPEATTR **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagTYPEATTR**, int> GetTypeAttr;

            [NativeTypeName("HRESULT (ITypeComp **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ITypeComp**, int> GetTypeComp;

            [NativeTypeName("HRESULT (UINT, FUNCDESC **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, tagFUNCDESC**, int> GetFuncDesc;

            [NativeTypeName("HRESULT (UINT, VARDESC **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, tagVARDESC**, int> GetVarDesc;

            [NativeTypeName("HRESULT (MEMBERID, BSTR *, UINT, UINT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, char**, uint, uint*, int> GetNames;

            [NativeTypeName("HRESULT (UINT, HREFTYPE *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint*, int> GetRefTypeOfImplType;

            [NativeTypeName("HRESULT (UINT, INT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int*, int> GetImplTypeFlags;

            [NativeTypeName("HRESULT (LPOLESTR *, UINT, MEMBERID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char**, uint, int*, int> GetIDsOfNames;

            [NativeTypeName("HRESULT (PVOID, MEMBERID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*, int, ushort, tagDISPPARAMS*, VARIANT*, tagEXCEPINFO*, uint*, int> Invoke;

            [NativeTypeName("HRESULT (MEMBERID, BSTR *, BSTR *, DWORD *, BSTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, char**, char**, uint*, char**, int> GetDocumentation;

            [NativeTypeName("HRESULT (MEMBERID, INVOKEKIND, BSTR *, BSTR *, WORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, tagINVOKEKIND, char**, char**, ushort*, int> GetDllEntry;

            [NativeTypeName("HRESULT (HREFTYPE, ITypeInfo **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, ITypeInfo**, int> GetRefTypeInfo;

            [NativeTypeName("HRESULT (MEMBERID, INVOKEKIND, PVOID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, tagINVOKEKIND, void**, int> AddressOfMember;

            [NativeTypeName("HRESULT (IUnknown *, const IID &, PVOID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IUnknown*, Guid*, void**, int> CreateInstance;

            [NativeTypeName("HRESULT (MEMBERID, BSTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, char**, int> GetMops;

            [NativeTypeName("HRESULT (ITypeLib **, UINT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ITypeLib**, uint*, int> GetContainingTypeLib;

            [NativeTypeName("void (TYPEATTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagTYPEATTR*, void> ReleaseTypeAttr;

            [NativeTypeName("void (FUNCDESC *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagFUNCDESC*, void> ReleaseFuncDesc;

            [NativeTypeName("void (VARDESC *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagVARDESC*, void> ReleaseVarDesc;

            [NativeTypeName("HRESULT (TYPEKIND *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagTYPEKIND*, int> GetTypeKind;

            [NativeTypeName("HRESULT (ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, int> GetTypeFlags;

            [NativeTypeName("HRESULT (MEMBERID, INVOKEKIND, UINT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, tagINVOKEKIND, uint*, int> GetFuncIndexOfMemId;

            [NativeTypeName("HRESULT (MEMBERID, UINT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, uint*, int> GetVarIndexOfMemId;

            [NativeTypeName("HRESULT (const GUID &, VARIANT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, VARIANT*, int> GetCustData;

            [NativeTypeName("HRESULT (UINT, const GUID &, VARIANT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, Guid*, VARIANT*, int> GetFuncCustData;

            [NativeTypeName("HRESULT (UINT, UINT, const GUID &, VARIANT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint, Guid*, VARIANT*, int> GetParamCustData;

            [NativeTypeName("HRESULT (UINT, const GUID &, VARIANT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, Guid*, VARIANT*, int> GetVarCustData;

            [NativeTypeName("HRESULT (UINT, const GUID &, VARIANT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, Guid*, VARIANT*, int> GetImplTypeCustData;

            [NativeTypeName("HRESULT (MEMBERID, LCID, BSTR *, DWORD *, BSTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, uint, char**, uint*, char**, int> GetDocumentation2;

            [NativeTypeName("HRESULT (CUSTDATA *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagCUSTDATA*, int> GetAllCustData;

            [NativeTypeName("HRESULT (UINT, CUSTDATA *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, tagCUSTDATA*, int> GetAllFuncCustData;

            [NativeTypeName("HRESULT (UINT, UINT, CUSTDATA *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint, tagCUSTDATA*, int> GetAllParamCustData;

            [NativeTypeName("HRESULT (UINT, CUSTDATA *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, tagCUSTDATA*, int> GetAllVarCustData;

            [NativeTypeName("HRESULT (UINT, CUSTDATA *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, tagCUSTDATA*, int> GetAllImplTypeCustData;
        }
    }

    public enum tagSYSKIND
    {
        SYS_WIN16 = 0,
        SYS_WIN32 = (SYS_WIN16 + 1),
        SYS_MAC = (SYS_WIN32 + 1),
        SYS_WIN64 = (SYS_MAC + 1),
    }

    public enum tagLIBFLAGS
    {
        LIBFLAG_FRESTRICTED = 0x1,
        LIBFLAG_FCONTROL = 0x2,
        LIBFLAG_FHIDDEN = 0x4,
        LIBFLAG_FHASDISKIMAGE = 0x8,
    }

    public partial struct tagTLIBATTR
    {
        public Guid guid;

        [NativeTypeName("LCID")]
        public uint lcid;

        [NativeTypeName("SYSKIND")]
        public tagSYSKIND syskind;

        [NativeTypeName("WORD")]
        public ushort wMajorVerNum;

        [NativeTypeName("WORD")]
        public ushort wMinorVerNum;

        [NativeTypeName("WORD")]
        public ushort wLibFlags;
    }

    [Guid("00020402-0000-0000-C000-000000000046")]
    [NativeTypeName("struct ITypeLib : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ITypeLib : ITypeLib.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ITypeLib));

        public Vtbl<ITypeLib>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((ITypeLib*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((ITypeLib*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((ITypeLib*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint GetTypeInfoCount()
        {
            return lpVtbl->GetTypeInfoCount((ITypeLib*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetTypeInfo(uint index, ITypeInfo** ppTInfo)
        {
            return lpVtbl->GetTypeInfo((ITypeLib*)Unsafe.AsPointer(ref this), index, ppTInfo);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetTypeInfoType(uint index, [NativeTypeName("TYPEKIND *")] tagTYPEKIND* pTKind)
        {
            return lpVtbl->GetTypeInfoType((ITypeLib*)Unsafe.AsPointer(ref this), index, pTKind);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetTypeInfoOfGuid([NativeTypeName("const GUID &")] Guid* guid, ITypeInfo** ppTinfo)
        {
            return lpVtbl->GetTypeInfoOfGuid((ITypeLib*)Unsafe.AsPointer(ref this), guid, ppTinfo);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetLibAttr([NativeTypeName("TLIBATTR **")] tagTLIBATTR** ppTLibAttr)
        {
            return lpVtbl->GetLibAttr((ITypeLib*)Unsafe.AsPointer(ref this), ppTLibAttr);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetTypeComp(ITypeComp** ppTComp)
        {
            return lpVtbl->GetTypeComp((ITypeLib*)Unsafe.AsPointer(ref this), ppTComp);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetDocumentation(int index, [NativeTypeName("BSTR *")] char** pBstrName, [NativeTypeName("BSTR *")] char** pBstrDocString, [NativeTypeName("DWORD *")] uint* pdwHelpContext, [NativeTypeName("BSTR *")] char** pBstrHelpFile)
        {
            return lpVtbl->GetDocumentation((ITypeLib*)Unsafe.AsPointer(ref this), index, pBstrName, pBstrDocString, pdwHelpContext, pBstrHelpFile);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int IsName([NativeTypeName("LPOLESTR")] char* szNameBuf, [NativeTypeName("ULONG")] uint lHashVal, [NativeTypeName("BOOL *")] int* pfName)
        {
            return lpVtbl->IsName((ITypeLib*)Unsafe.AsPointer(ref this), szNameBuf, lHashVal, pfName);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int FindName([NativeTypeName("LPOLESTR")] char* szNameBuf, [NativeTypeName("ULONG")] uint lHashVal, ITypeInfo** ppTInfo, [NativeTypeName("MEMBERID *")] int* rgMemId, ushort* pcFound)
        {
            return lpVtbl->FindName((ITypeLib*)Unsafe.AsPointer(ref this), szNameBuf, lHashVal, ppTInfo, rgMemId, pcFound);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ReleaseTLibAttr([NativeTypeName("TLIBATTR *")] tagTLIBATTR* pTLibAttr)
        {
            lpVtbl->ReleaseTLibAttr((ITypeLib*)Unsafe.AsPointer(ref this), pTLibAttr);
        }

        public interface Interface : IUnknown.Interface
        {
            uint GetTypeInfoCount();

            [return: NativeTypeName("HRESULT")]
            int GetTypeInfo(uint index, ITypeInfo** ppTInfo);

            [return: NativeTypeName("HRESULT")]
            int GetTypeInfoType(uint index, [NativeTypeName("TYPEKIND *")] tagTYPEKIND* pTKind);

            [return: NativeTypeName("HRESULT")]
            int GetTypeInfoOfGuid([NativeTypeName("const GUID &")] Guid* guid, ITypeInfo** ppTinfo);

            [return: NativeTypeName("HRESULT")]
            int GetLibAttr([NativeTypeName("TLIBATTR **")] tagTLIBATTR** ppTLibAttr);

            [return: NativeTypeName("HRESULT")]
            int GetTypeComp(ITypeComp** ppTComp);

            [return: NativeTypeName("HRESULT")]
            int GetDocumentation(int index, [NativeTypeName("BSTR *")] char** pBstrName, [NativeTypeName("BSTR *")] char** pBstrDocString, [NativeTypeName("DWORD *")] uint* pdwHelpContext, [NativeTypeName("BSTR *")] char** pBstrHelpFile);

            [return: NativeTypeName("HRESULT")]
            int IsName([NativeTypeName("LPOLESTR")] char* szNameBuf, [NativeTypeName("ULONG")] uint lHashVal, [NativeTypeName("BOOL *")] int* pfName);

            [return: NativeTypeName("HRESULT")]
            int FindName([NativeTypeName("LPOLESTR")] char* szNameBuf, [NativeTypeName("ULONG")] uint lHashVal, ITypeInfo** ppTInfo, [NativeTypeName("MEMBERID *")] int* rgMemId, ushort* pcFound);

            void ReleaseTLibAttr([NativeTypeName("TLIBATTR *")] tagTLIBATTR* pTLibAttr);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("UINT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> GetTypeInfoCount;

            [NativeTypeName("HRESULT (UINT, ITypeInfo **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, ITypeInfo**, int> GetTypeInfo;

            [NativeTypeName("HRESULT (UINT, TYPEKIND *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, tagTYPEKIND*, int> GetTypeInfoType;

            [NativeTypeName("HRESULT (const GUID &, ITypeInfo **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, ITypeInfo**, int> GetTypeInfoOfGuid;

            [NativeTypeName("HRESULT (TLIBATTR **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagTLIBATTR**, int> GetLibAttr;

            [NativeTypeName("HRESULT (ITypeComp **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ITypeComp**, int> GetTypeComp;

            [NativeTypeName("HRESULT (INT, BSTR *, BSTR *, DWORD *, BSTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, char**, char**, uint*, char**, int> GetDocumentation;

            [NativeTypeName("HRESULT (LPOLESTR, ULONG, BOOL *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, uint, int*, int> IsName;

            [NativeTypeName("HRESULT (LPOLESTR, ULONG, ITypeInfo **, MEMBERID *, USHORT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, uint, ITypeInfo**, int*, ushort*, int> FindName;

            [NativeTypeName("void (TLIBATTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagTLIBATTR*, void> ReleaseTLibAttr;
        }
    }

    [Guid("00020411-0000-0000-C000-000000000046")]
    [NativeTypeName("struct ITypeLib2 : ITypeLib")]
    [NativeInheritance("ITypeLib")]
    public unsafe partial struct ITypeLib2 : ITypeLib2.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ITypeLib2));

        public Vtbl<ITypeLib2>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((ITypeLib2*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((ITypeLib2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((ITypeLib2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint GetTypeInfoCount()
        {
            return lpVtbl->GetTypeInfoCount((ITypeLib2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetTypeInfo(uint index, ITypeInfo** ppTInfo)
        {
            return lpVtbl->GetTypeInfo((ITypeLib2*)Unsafe.AsPointer(ref this), index, ppTInfo);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetTypeInfoType(uint index, [NativeTypeName("TYPEKIND *")] tagTYPEKIND* pTKind)
        {
            return lpVtbl->GetTypeInfoType((ITypeLib2*)Unsafe.AsPointer(ref this), index, pTKind);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetTypeInfoOfGuid([NativeTypeName("const GUID &")] Guid* guid, ITypeInfo** ppTinfo)
        {
            return lpVtbl->GetTypeInfoOfGuid((ITypeLib2*)Unsafe.AsPointer(ref this), guid, ppTinfo);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetLibAttr([NativeTypeName("TLIBATTR **")] tagTLIBATTR** ppTLibAttr)
        {
            return lpVtbl->GetLibAttr((ITypeLib2*)Unsafe.AsPointer(ref this), ppTLibAttr);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetTypeComp(ITypeComp** ppTComp)
        {
            return lpVtbl->GetTypeComp((ITypeLib2*)Unsafe.AsPointer(ref this), ppTComp);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetDocumentation(int index, [NativeTypeName("BSTR *")] char** pBstrName, [NativeTypeName("BSTR *")] char** pBstrDocString, [NativeTypeName("DWORD *")] uint* pdwHelpContext, [NativeTypeName("BSTR *")] char** pBstrHelpFile)
        {
            return lpVtbl->GetDocumentation((ITypeLib2*)Unsafe.AsPointer(ref this), index, pBstrName, pBstrDocString, pdwHelpContext, pBstrHelpFile);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int IsName([NativeTypeName("LPOLESTR")] char* szNameBuf, [NativeTypeName("ULONG")] uint lHashVal, [NativeTypeName("BOOL *")] int* pfName)
        {
            return lpVtbl->IsName((ITypeLib2*)Unsafe.AsPointer(ref this), szNameBuf, lHashVal, pfName);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int FindName([NativeTypeName("LPOLESTR")] char* szNameBuf, [NativeTypeName("ULONG")] uint lHashVal, ITypeInfo** ppTInfo, [NativeTypeName("MEMBERID *")] int* rgMemId, ushort* pcFound)
        {
            return lpVtbl->FindName((ITypeLib2*)Unsafe.AsPointer(ref this), szNameBuf, lHashVal, ppTInfo, rgMemId, pcFound);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ReleaseTLibAttr([NativeTypeName("TLIBATTR *")] tagTLIBATTR* pTLibAttr)
        {
            lpVtbl->ReleaseTLibAttr((ITypeLib2*)Unsafe.AsPointer(ref this), pTLibAttr);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetCustData([NativeTypeName("const GUID &")] Guid* guid, VARIANT* pVarVal)
        {
            return lpVtbl->GetCustData((ITypeLib2*)Unsafe.AsPointer(ref this), guid, pVarVal);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetLibStatistics([NativeTypeName("ULONG *")] uint* pcUniqueNames, [NativeTypeName("ULONG *")] uint* pcchUniqueNames)
        {
            return lpVtbl->GetLibStatistics((ITypeLib2*)Unsafe.AsPointer(ref this), pcUniqueNames, pcchUniqueNames);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetDocumentation2(int index, [NativeTypeName("LCID")] uint lcid, [NativeTypeName("BSTR *")] char** pbstrHelpString, [NativeTypeName("DWORD *")] uint* pdwHelpStringContext, [NativeTypeName("BSTR *")] char** pbstrHelpStringDll)
        {
            return lpVtbl->GetDocumentation2((ITypeLib2*)Unsafe.AsPointer(ref this), index, lcid, pbstrHelpString, pdwHelpStringContext, pbstrHelpStringDll);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetAllCustData([NativeTypeName("CUSTDATA *")] tagCUSTDATA* pCustData)
        {
            return lpVtbl->GetAllCustData((ITypeLib2*)Unsafe.AsPointer(ref this), pCustData);
        }

        public interface Interface : ITypeLib.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int GetCustData([NativeTypeName("const GUID &")] Guid* guid, VARIANT* pVarVal);

            [return: NativeTypeName("HRESULT")]
            int GetLibStatistics([NativeTypeName("ULONG *")] uint* pcUniqueNames, [NativeTypeName("ULONG *")] uint* pcchUniqueNames);

            [return: NativeTypeName("HRESULT")]
            int GetDocumentation2(int index, [NativeTypeName("LCID")] uint lcid, [NativeTypeName("BSTR *")] char** pbstrHelpString, [NativeTypeName("DWORD *")] uint* pdwHelpStringContext, [NativeTypeName("BSTR *")] char** pbstrHelpStringDll);

            [return: NativeTypeName("HRESULT")]
            int GetAllCustData([NativeTypeName("CUSTDATA *")] tagCUSTDATA* pCustData);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("UINT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> GetTypeInfoCount;

            [NativeTypeName("HRESULT (UINT, ITypeInfo **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, ITypeInfo**, int> GetTypeInfo;

            [NativeTypeName("HRESULT (UINT, TYPEKIND *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, tagTYPEKIND*, int> GetTypeInfoType;

            [NativeTypeName("HRESULT (const GUID &, ITypeInfo **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, ITypeInfo**, int> GetTypeInfoOfGuid;

            [NativeTypeName("HRESULT (TLIBATTR **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagTLIBATTR**, int> GetLibAttr;

            [NativeTypeName("HRESULT (ITypeComp **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ITypeComp**, int> GetTypeComp;

            [NativeTypeName("HRESULT (INT, BSTR *, BSTR *, DWORD *, BSTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, char**, char**, uint*, char**, int> GetDocumentation;

            [NativeTypeName("HRESULT (LPOLESTR, ULONG, BOOL *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, uint, int*, int> IsName;

            [NativeTypeName("HRESULT (LPOLESTR, ULONG, ITypeInfo **, MEMBERID *, USHORT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, uint, ITypeInfo**, int*, ushort*, int> FindName;

            [NativeTypeName("void (TLIBATTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagTLIBATTR*, void> ReleaseTLibAttr;

            [NativeTypeName("HRESULT (const GUID &, VARIANT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, VARIANT*, int> GetCustData;

            [NativeTypeName("HRESULT (ULONG *, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, uint*, int> GetLibStatistics;

            [NativeTypeName("HRESULT (INT, LCID, BSTR *, DWORD *, BSTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, uint, char**, uint*, char**, int> GetDocumentation2;

            [NativeTypeName("HRESULT (CUSTDATA *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagCUSTDATA*, int> GetAllCustData;
        }
    }

    public enum tagCHANGEKIND
    {
        CHANGEKIND_ADDMEMBER = 0,
        CHANGEKIND_DELETEMEMBER = (CHANGEKIND_ADDMEMBER + 1),
        CHANGEKIND_SETNAMES = (CHANGEKIND_DELETEMEMBER + 1),
        CHANGEKIND_SETDOCUMENTATION = (CHANGEKIND_SETNAMES + 1),
        CHANGEKIND_GENERAL = (CHANGEKIND_SETDOCUMENTATION + 1),
        CHANGEKIND_INVALIDATE = (CHANGEKIND_GENERAL + 1),
        CHANGEKIND_CHANGEFAILED = (CHANGEKIND_INVALIDATE + 1),
        CHANGEKIND_MAX = (CHANGEKIND_CHANGEFAILED + 1),
    }

    [Guid("00020410-0000-0000-C000-000000000046")]
    [NativeTypeName("struct ITypeChangeEvents : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ITypeChangeEvents : ITypeChangeEvents.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ITypeChangeEvents));

        public Vtbl<ITypeChangeEvents>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((ITypeChangeEvents*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((ITypeChangeEvents*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((ITypeChangeEvents*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int RequestTypeChange([NativeTypeName("CHANGEKIND")] tagCHANGEKIND changeKind, ITypeInfo* pTInfoBefore, [NativeTypeName("LPOLESTR")] char* pStrName, int* pfCancel)
        {
            return lpVtbl->RequestTypeChange((ITypeChangeEvents*)Unsafe.AsPointer(ref this), changeKind, pTInfoBefore, pStrName, pfCancel);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int AfterTypeChange([NativeTypeName("CHANGEKIND")] tagCHANGEKIND changeKind, ITypeInfo* pTInfoAfter, [NativeTypeName("LPOLESTR")] char* pStrName)
        {
            return lpVtbl->AfterTypeChange((ITypeChangeEvents*)Unsafe.AsPointer(ref this), changeKind, pTInfoAfter, pStrName);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int RequestTypeChange([NativeTypeName("CHANGEKIND")] tagCHANGEKIND changeKind, ITypeInfo* pTInfoBefore, [NativeTypeName("LPOLESTR")] char* pStrName, int* pfCancel);

            [return: NativeTypeName("HRESULT")]
            int AfterTypeChange([NativeTypeName("CHANGEKIND")] tagCHANGEKIND changeKind, ITypeInfo* pTInfoAfter, [NativeTypeName("LPOLESTR")] char* pStrName);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (CHANGEKIND, ITypeInfo *, LPOLESTR, INT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagCHANGEKIND, ITypeInfo*, char*, int*, int> RequestTypeChange;

            [NativeTypeName("HRESULT (CHANGEKIND, ITypeInfo *, LPOLESTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagCHANGEKIND, ITypeInfo*, char*, int> AfterTypeChange;
        }
    }

    [Guid("1CF2B120-547D-101B-8E65-08002B2BD119")]
    [NativeTypeName("struct IErrorInfo : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IErrorInfo : IErrorInfo.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IErrorInfo));

        public Vtbl<IErrorInfo>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IErrorInfo*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IErrorInfo*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IErrorInfo*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetGUID(Guid* pGUID)
        {
            return lpVtbl->GetGUID((IErrorInfo*)Unsafe.AsPointer(ref this), pGUID);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetSource([NativeTypeName("BSTR *")] char** pBstrSource)
        {
            return lpVtbl->GetSource((IErrorInfo*)Unsafe.AsPointer(ref this), pBstrSource);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetDescription([NativeTypeName("BSTR *")] char** pBstrDescription)
        {
            return lpVtbl->GetDescription((IErrorInfo*)Unsafe.AsPointer(ref this), pBstrDescription);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetHelpFile([NativeTypeName("BSTR *")] char** pBstrHelpFile)
        {
            return lpVtbl->GetHelpFile((IErrorInfo*)Unsafe.AsPointer(ref this), pBstrHelpFile);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetHelpContext([NativeTypeName("DWORD *")] uint* pdwHelpContext)
        {
            return lpVtbl->GetHelpContext((IErrorInfo*)Unsafe.AsPointer(ref this), pdwHelpContext);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int GetGUID(Guid* pGUID);

            [return: NativeTypeName("HRESULT")]
            int GetSource([NativeTypeName("BSTR *")] char** pBstrSource);

            [return: NativeTypeName("HRESULT")]
            int GetDescription([NativeTypeName("BSTR *")] char** pBstrDescription);

            [return: NativeTypeName("HRESULT")]
            int GetHelpFile([NativeTypeName("BSTR *")] char** pBstrHelpFile);

            [return: NativeTypeName("HRESULT")]
            int GetHelpContext([NativeTypeName("DWORD *")] uint* pdwHelpContext);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (GUID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, int> GetGUID;

            [NativeTypeName("HRESULT (BSTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char**, int> GetSource;

            [NativeTypeName("HRESULT (BSTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char**, int> GetDescription;

            [NativeTypeName("HRESULT (BSTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char**, int> GetHelpFile;

            [NativeTypeName("HRESULT (DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, int> GetHelpContext;
        }
    }

    [Guid("22F03340-547D-101B-8E65-08002B2BD119")]
    [NativeTypeName("struct ICreateErrorInfo : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ICreateErrorInfo : ICreateErrorInfo.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ICreateErrorInfo));

        public Vtbl<ICreateErrorInfo>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((ICreateErrorInfo*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((ICreateErrorInfo*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((ICreateErrorInfo*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetGUID([NativeTypeName("const GUID &")] Guid* rguid)
        {
            return lpVtbl->SetGUID((ICreateErrorInfo*)Unsafe.AsPointer(ref this), rguid);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetSource([NativeTypeName("LPOLESTR")] char* szSource)
        {
            return lpVtbl->SetSource((ICreateErrorInfo*)Unsafe.AsPointer(ref this), szSource);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetDescription([NativeTypeName("LPOLESTR")] char* szDescription)
        {
            return lpVtbl->SetDescription((ICreateErrorInfo*)Unsafe.AsPointer(ref this), szDescription);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetHelpFile([NativeTypeName("LPOLESTR")] char* szHelpFile)
        {
            return lpVtbl->SetHelpFile((ICreateErrorInfo*)Unsafe.AsPointer(ref this), szHelpFile);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetHelpContext([NativeTypeName("DWORD")] uint dwHelpContext)
        {
            return lpVtbl->SetHelpContext((ICreateErrorInfo*)Unsafe.AsPointer(ref this), dwHelpContext);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int SetGUID([NativeTypeName("const GUID &")] Guid* rguid);

            [return: NativeTypeName("HRESULT")]
            int SetSource([NativeTypeName("LPOLESTR")] char* szSource);

            [return: NativeTypeName("HRESULT")]
            int SetDescription([NativeTypeName("LPOLESTR")] char* szDescription);

            [return: NativeTypeName("HRESULT")]
            int SetHelpFile([NativeTypeName("LPOLESTR")] char* szHelpFile);

            [return: NativeTypeName("HRESULT")]
            int SetHelpContext([NativeTypeName("DWORD")] uint dwHelpContext);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (const GUID &) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, int> SetGUID;

            [NativeTypeName("HRESULT (LPOLESTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, int> SetSource;

            [NativeTypeName("HRESULT (LPOLESTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, int> SetDescription;

            [NativeTypeName("HRESULT (LPOLESTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, int> SetHelpFile;

            [NativeTypeName("HRESULT (DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> SetHelpContext;
        }
    }

    [Guid("DF0B3D60-548F-101B-8E65-08002B2BD119")]
    [NativeTypeName("struct ISupportErrorInfo : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ISupportErrorInfo : ISupportErrorInfo.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ISupportErrorInfo));

        public Vtbl<ISupportErrorInfo>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((ISupportErrorInfo*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((ISupportErrorInfo*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((ISupportErrorInfo*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int InterfaceSupportsErrorInfo([NativeTypeName("const IID &")] Guid* riid)
        {
            return lpVtbl->InterfaceSupportsErrorInfo((ISupportErrorInfo*)Unsafe.AsPointer(ref this), riid);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int InterfaceSupportsErrorInfo([NativeTypeName("const IID &")] Guid* riid);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (const IID &) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, int> InterfaceSupportsErrorInfo;
        }
    }

    [Guid("0000002E-0000-0000-C000-000000000046")]
    [NativeTypeName("struct ITypeFactory : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ITypeFactory : ITypeFactory.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ITypeFactory));

        public Vtbl<ITypeFactory>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((ITypeFactory*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((ITypeFactory*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((ITypeFactory*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int CreateFromTypeInfo(ITypeInfo* pTypeInfo, [NativeTypeName("const IID &")] Guid* riid, IUnknown** ppv)
        {
            return lpVtbl->CreateFromTypeInfo((ITypeFactory*)Unsafe.AsPointer(ref this), pTypeInfo, riid, ppv);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int CreateFromTypeInfo(ITypeInfo* pTypeInfo, [NativeTypeName("const IID &")] Guid* riid, IUnknown** ppv);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (ITypeInfo *, const IID &, IUnknown **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ITypeInfo*, Guid*, IUnknown**, int> CreateFromTypeInfo;
        }
    }

    [Guid("0000002D-0000-0000-C000-000000000046")]
    [NativeTypeName("struct ITypeMarshal : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ITypeMarshal : ITypeMarshal.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ITypeMarshal));

        public Vtbl<ITypeMarshal>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((ITypeMarshal*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((ITypeMarshal*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((ITypeMarshal*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Size([NativeTypeName("PVOID")] void* pvType, [NativeTypeName("DWORD")] uint dwDestContext, [NativeTypeName("PVOID")] void* pvDestContext, [NativeTypeName("ULONG *")] uint* pSize)
        {
            return lpVtbl->Size((ITypeMarshal*)Unsafe.AsPointer(ref this), pvType, dwDestContext, pvDestContext, pSize);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Marshal([NativeTypeName("PVOID")] void* pvType, [NativeTypeName("DWORD")] uint dwDestContext, [NativeTypeName("PVOID")] void* pvDestContext, [NativeTypeName("ULONG")] uint cbBufferLength, byte* pBuffer, [NativeTypeName("ULONG *")] uint* pcbWritten)
        {
            return lpVtbl->Marshal((ITypeMarshal*)Unsafe.AsPointer(ref this), pvType, dwDestContext, pvDestContext, cbBufferLength, pBuffer, pcbWritten);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Unmarshal([NativeTypeName("PVOID")] void* pvType, [NativeTypeName("DWORD")] uint dwFlags, [NativeTypeName("ULONG")] uint cbBufferLength, byte* pBuffer, [NativeTypeName("ULONG *")] uint* pcbRead)
        {
            return lpVtbl->Unmarshal((ITypeMarshal*)Unsafe.AsPointer(ref this), pvType, dwFlags, cbBufferLength, pBuffer, pcbRead);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Free([NativeTypeName("PVOID")] void* pvType)
        {
            return lpVtbl->Free((ITypeMarshal*)Unsafe.AsPointer(ref this), pvType);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Size([NativeTypeName("PVOID")] void* pvType, [NativeTypeName("DWORD")] uint dwDestContext, [NativeTypeName("PVOID")] void* pvDestContext, [NativeTypeName("ULONG *")] uint* pSize);

            [return: NativeTypeName("HRESULT")]
            int Marshal([NativeTypeName("PVOID")] void* pvType, [NativeTypeName("DWORD")] uint dwDestContext, [NativeTypeName("PVOID")] void* pvDestContext, [NativeTypeName("ULONG")] uint cbBufferLength, byte* pBuffer, [NativeTypeName("ULONG *")] uint* pcbWritten);

            [return: NativeTypeName("HRESULT")]
            int Unmarshal([NativeTypeName("PVOID")] void* pvType, [NativeTypeName("DWORD")] uint dwFlags, [NativeTypeName("ULONG")] uint cbBufferLength, byte* pBuffer, [NativeTypeName("ULONG *")] uint* pcbRead);

            [return: NativeTypeName("HRESULT")]
            int Free([NativeTypeName("PVOID")] void* pvType);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (PVOID, DWORD, PVOID, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*, uint, void*, uint*, int> Size;

            [NativeTypeName("HRESULT (PVOID, DWORD, PVOID, ULONG, BYTE *, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*, uint, void*, uint, byte*, uint*, int> Marshal;

            [NativeTypeName("HRESULT (PVOID, DWORD, ULONG, BYTE *, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*, uint, uint, byte*, uint*, int> Unmarshal;

            [NativeTypeName("HRESULT (PVOID) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*, int> Free;
        }
    }

    [Guid("0000002F-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IRecordInfo : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IRecordInfo : IRecordInfo.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IRecordInfo));

        public Vtbl<IRecordInfo>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IRecordInfo*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IRecordInfo*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IRecordInfo*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int RecordInit([NativeTypeName("PVOID")] void* pvNew)
        {
            return lpVtbl->RecordInit((IRecordInfo*)Unsafe.AsPointer(ref this), pvNew);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int RecordClear([NativeTypeName("PVOID")] void* pvExisting)
        {
            return lpVtbl->RecordClear((IRecordInfo*)Unsafe.AsPointer(ref this), pvExisting);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int RecordCopy([NativeTypeName("PVOID")] void* pvExisting, [NativeTypeName("PVOID")] void* pvNew)
        {
            return lpVtbl->RecordCopy((IRecordInfo*)Unsafe.AsPointer(ref this), pvExisting, pvNew);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetGuid(Guid* pguid)
        {
            return lpVtbl->GetGuid((IRecordInfo*)Unsafe.AsPointer(ref this), pguid);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetName([NativeTypeName("BSTR *")] char** pbstrName)
        {
            return lpVtbl->GetName((IRecordInfo*)Unsafe.AsPointer(ref this), pbstrName);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetSize([NativeTypeName("ULONG *")] uint* pcbSize)
        {
            return lpVtbl->GetSize((IRecordInfo*)Unsafe.AsPointer(ref this), pcbSize);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetTypeInfo(ITypeInfo** ppTypeInfo)
        {
            return lpVtbl->GetTypeInfo((IRecordInfo*)Unsafe.AsPointer(ref this), ppTypeInfo);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetField([NativeTypeName("PVOID")] void* pvData, [NativeTypeName("LPCOLESTR")] char* szFieldName, VARIANT* pvarField)
        {
            return lpVtbl->GetField((IRecordInfo*)Unsafe.AsPointer(ref this), pvData, szFieldName, pvarField);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetFieldNoCopy([NativeTypeName("PVOID")] void* pvData, [NativeTypeName("LPCOLESTR")] char* szFieldName, VARIANT* pvarField, [NativeTypeName("PVOID *")] void** ppvDataCArray)
        {
            return lpVtbl->GetFieldNoCopy((IRecordInfo*)Unsafe.AsPointer(ref this), pvData, szFieldName, pvarField, ppvDataCArray);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int PutField([NativeTypeName("ULONG")] uint wFlags, [NativeTypeName("PVOID")] void* pvData, [NativeTypeName("LPCOLESTR")] char* szFieldName, VARIANT* pvarField)
        {
            return lpVtbl->PutField((IRecordInfo*)Unsafe.AsPointer(ref this), wFlags, pvData, szFieldName, pvarField);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int PutFieldNoCopy([NativeTypeName("ULONG")] uint wFlags, [NativeTypeName("PVOID")] void* pvData, [NativeTypeName("LPCOLESTR")] char* szFieldName, VARIANT* pvarField)
        {
            return lpVtbl->PutFieldNoCopy((IRecordInfo*)Unsafe.AsPointer(ref this), wFlags, pvData, szFieldName, pvarField);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetFieldNames([NativeTypeName("ULONG *")] uint* pcNames, [NativeTypeName("BSTR *")] char** rgBstrNames)
        {
            return lpVtbl->GetFieldNames((IRecordInfo*)Unsafe.AsPointer(ref this), pcNames, rgBstrNames);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("BOOL")]
        public int IsMatchingType(IRecordInfo* pRecordInfo)
        {
            return lpVtbl->IsMatchingType((IRecordInfo*)Unsafe.AsPointer(ref this), pRecordInfo);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("PVOID")]
        public void* RecordCreate()
        {
            return lpVtbl->RecordCreate((IRecordInfo*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int RecordCreateCopy([NativeTypeName("PVOID")] void* pvSource, [NativeTypeName("PVOID *")] void** ppvDest)
        {
            return lpVtbl->RecordCreateCopy((IRecordInfo*)Unsafe.AsPointer(ref this), pvSource, ppvDest);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int RecordDestroy([NativeTypeName("PVOID")] void* pvRecord)
        {
            return lpVtbl->RecordDestroy((IRecordInfo*)Unsafe.AsPointer(ref this), pvRecord);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int RecordInit([NativeTypeName("PVOID")] void* pvNew);

            [return: NativeTypeName("HRESULT")]
            int RecordClear([NativeTypeName("PVOID")] void* pvExisting);

            [return: NativeTypeName("HRESULT")]
            int RecordCopy([NativeTypeName("PVOID")] void* pvExisting, [NativeTypeName("PVOID")] void* pvNew);

            [return: NativeTypeName("HRESULT")]
            int GetGuid(Guid* pguid);

            [return: NativeTypeName("HRESULT")]
            int GetName([NativeTypeName("BSTR *")] char** pbstrName);

            [return: NativeTypeName("HRESULT")]
            int GetSize([NativeTypeName("ULONG *")] uint* pcbSize);

            [return: NativeTypeName("HRESULT")]
            int GetTypeInfo(ITypeInfo** ppTypeInfo);

            [return: NativeTypeName("HRESULT")]
            int GetField([NativeTypeName("PVOID")] void* pvData, [NativeTypeName("LPCOLESTR")] char* szFieldName, VARIANT* pvarField);

            [return: NativeTypeName("HRESULT")]
            int GetFieldNoCopy([NativeTypeName("PVOID")] void* pvData, [NativeTypeName("LPCOLESTR")] char* szFieldName, VARIANT* pvarField, [NativeTypeName("PVOID *")] void** ppvDataCArray);

            [return: NativeTypeName("HRESULT")]
            int PutField([NativeTypeName("ULONG")] uint wFlags, [NativeTypeName("PVOID")] void* pvData, [NativeTypeName("LPCOLESTR")] char* szFieldName, VARIANT* pvarField);

            [return: NativeTypeName("HRESULT")]
            int PutFieldNoCopy([NativeTypeName("ULONG")] uint wFlags, [NativeTypeName("PVOID")] void* pvData, [NativeTypeName("LPCOLESTR")] char* szFieldName, VARIANT* pvarField);

            [return: NativeTypeName("HRESULT")]
            int GetFieldNames([NativeTypeName("ULONG *")] uint* pcNames, [NativeTypeName("BSTR *")] char** rgBstrNames);

            [return: NativeTypeName("BOOL")]
            int IsMatchingType(IRecordInfo* pRecordInfo);

            [return: NativeTypeName("PVOID")]
            void* RecordCreate();

            [return: NativeTypeName("HRESULT")]
            int RecordCreateCopy([NativeTypeName("PVOID")] void* pvSource, [NativeTypeName("PVOID *")] void** ppvDest);

            [return: NativeTypeName("HRESULT")]
            int RecordDestroy([NativeTypeName("PVOID")] void* pvRecord);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (PVOID) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*, int> RecordInit;

            [NativeTypeName("HRESULT (PVOID) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*, int> RecordClear;

            [NativeTypeName("HRESULT (PVOID, PVOID) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*, void*, int> RecordCopy;

            [NativeTypeName("HRESULT (GUID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, int> GetGuid;

            [NativeTypeName("HRESULT (BSTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char**, int> GetName;

            [NativeTypeName("HRESULT (ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, int> GetSize;

            [NativeTypeName("HRESULT (ITypeInfo **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ITypeInfo**, int> GetTypeInfo;

            [NativeTypeName("HRESULT (PVOID, LPCOLESTR, VARIANT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*, char*, VARIANT*, int> GetField;

            [NativeTypeName("HRESULT (PVOID, LPCOLESTR, VARIANT *, PVOID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*, char*, VARIANT*, void**, int> GetFieldNoCopy;

            [NativeTypeName("HRESULT (ULONG, PVOID, LPCOLESTR, VARIANT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, void*, char*, VARIANT*, int> PutField;

            [NativeTypeName("HRESULT (ULONG, PVOID, LPCOLESTR, VARIANT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, void*, char*, VARIANT*, int> PutFieldNoCopy;

            [NativeTypeName("HRESULT (ULONG *, BSTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, char**, int> GetFieldNames;

            [NativeTypeName("BOOL (IRecordInfo *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IRecordInfo*, int> IsMatchingType;

            [NativeTypeName("PVOID () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*> RecordCreate;

            [NativeTypeName("HRESULT (PVOID, PVOID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*, void**, int> RecordCreateCopy;

            [NativeTypeName("HRESULT (PVOID) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*, int> RecordDestroy;
        }
    }

    [Guid("3127CA40-446E-11CE-8135-00AA004BB851")]
    [NativeTypeName("struct IErrorLog : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IErrorLog : IErrorLog.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IErrorLog));

        public Vtbl<IErrorLog>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IErrorLog*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IErrorLog*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IErrorLog*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int AddError([NativeTypeName("LPCOLESTR")] char* pszPropName, [NativeTypeName("EXCEPINFO *")] tagEXCEPINFO* pExcepInfo)
        {
            return lpVtbl->AddError((IErrorLog*)Unsafe.AsPointer(ref this), pszPropName, pExcepInfo);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int AddError([NativeTypeName("LPCOLESTR")] char* pszPropName, [NativeTypeName("EXCEPINFO *")] tagEXCEPINFO* pExcepInfo);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (LPCOLESTR, EXCEPINFO *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, tagEXCEPINFO*, int> AddError;
        }
    }

    [Guid("55272A00-42CB-11CE-8135-00AA004BB851")]
    [NativeTypeName("struct IPropertyBag : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IPropertyBag : IPropertyBag.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IPropertyBag));

        public Vtbl<IPropertyBag>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IPropertyBag*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IPropertyBag*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IPropertyBag*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Read([NativeTypeName("LPCOLESTR")] char* pszPropName, VARIANT* pVar, IErrorLog* pErrorLog)
        {
            return lpVtbl->Read((IPropertyBag*)Unsafe.AsPointer(ref this), pszPropName, pVar, pErrorLog);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Write([NativeTypeName("LPCOLESTR")] char* pszPropName, VARIANT* pVar)
        {
            return lpVtbl->Write((IPropertyBag*)Unsafe.AsPointer(ref this), pszPropName, pVar);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Read([NativeTypeName("LPCOLESTR")] char* pszPropName, VARIANT* pVar, IErrorLog* pErrorLog);

            [return: NativeTypeName("HRESULT")]
            int Write([NativeTypeName("LPCOLESTR")] char* pszPropName, VARIANT* pVar);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (LPCOLESTR, VARIANT *, IErrorLog *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, VARIANT*, IErrorLog*, int> Read;

            [NativeTypeName("HRESULT (LPCOLESTR, VARIANT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, VARIANT*, int> Write;
        }
    }

    [Guid("ED6A8A2A-B160-4E77-8F73-AA7435CD5C27")]
    [NativeTypeName("struct ITypeLibRegistrationReader : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ITypeLibRegistrationReader : ITypeLibRegistrationReader.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ITypeLibRegistrationReader));

        public Vtbl<ITypeLibRegistrationReader>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((ITypeLibRegistrationReader*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((ITypeLibRegistrationReader*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((ITypeLibRegistrationReader*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int EnumTypeLibRegistrations(IEnumUnknown** ppEnumUnknown)
        {
            return lpVtbl->EnumTypeLibRegistrations((ITypeLibRegistrationReader*)Unsafe.AsPointer(ref this), ppEnumUnknown);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int EnumTypeLibRegistrations(IEnumUnknown** ppEnumUnknown);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (IEnumUnknown **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IEnumUnknown**, int> EnumTypeLibRegistrations;
        }
    }

    [Guid("76A3E735-02DF-4A12-98EB-043AD3600AF3")]
    [NativeTypeName("struct ITypeLibRegistration : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ITypeLibRegistration : ITypeLibRegistration.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ITypeLibRegistration));

        public Vtbl<ITypeLibRegistration>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((ITypeLibRegistration*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((ITypeLibRegistration*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((ITypeLibRegistration*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetGuid(Guid* pGuid)
        {
            return lpVtbl->GetGuid((ITypeLibRegistration*)Unsafe.AsPointer(ref this), pGuid);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetVersion([NativeTypeName("BSTR *")] char** pVersion)
        {
            return lpVtbl->GetVersion((ITypeLibRegistration*)Unsafe.AsPointer(ref this), pVersion);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetLcid([NativeTypeName("LCID *")] uint* pLcid)
        {
            return lpVtbl->GetLcid((ITypeLibRegistration*)Unsafe.AsPointer(ref this), pLcid);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetWin32Path([NativeTypeName("BSTR *")] char** pWin32Path)
        {
            return lpVtbl->GetWin32Path((ITypeLibRegistration*)Unsafe.AsPointer(ref this), pWin32Path);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetWin64Path([NativeTypeName("BSTR *")] char** pWin64Path)
        {
            return lpVtbl->GetWin64Path((ITypeLibRegistration*)Unsafe.AsPointer(ref this), pWin64Path);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetDisplayName([NativeTypeName("BSTR *")] char** pDisplayName)
        {
            return lpVtbl->GetDisplayName((ITypeLibRegistration*)Unsafe.AsPointer(ref this), pDisplayName);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetFlags([NativeTypeName("DWORD *")] uint* pFlags)
        {
            return lpVtbl->GetFlags((ITypeLibRegistration*)Unsafe.AsPointer(ref this), pFlags);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetHelpDir([NativeTypeName("BSTR *")] char** pHelpDir)
        {
            return lpVtbl->GetHelpDir((ITypeLibRegistration*)Unsafe.AsPointer(ref this), pHelpDir);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int GetGuid(Guid* pGuid);

            [return: NativeTypeName("HRESULT")]
            int GetVersion([NativeTypeName("BSTR *")] char** pVersion);

            [return: NativeTypeName("HRESULT")]
            int GetLcid([NativeTypeName("LCID *")] uint* pLcid);

            [return: NativeTypeName("HRESULT")]
            int GetWin32Path([NativeTypeName("BSTR *")] char** pWin32Path);

            [return: NativeTypeName("HRESULT")]
            int GetWin64Path([NativeTypeName("BSTR *")] char** pWin64Path);

            [return: NativeTypeName("HRESULT")]
            int GetDisplayName([NativeTypeName("BSTR *")] char** pDisplayName);

            [return: NativeTypeName("HRESULT")]
            int GetFlags([NativeTypeName("DWORD *")] uint* pFlags);

            [return: NativeTypeName("HRESULT")]
            int GetHelpDir([NativeTypeName("BSTR *")] char** pHelpDir);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (GUID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, int> GetGuid;

            [NativeTypeName("HRESULT (BSTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char**, int> GetVersion;

            [NativeTypeName("HRESULT (LCID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, int> GetLcid;

            [NativeTypeName("HRESULT (BSTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char**, int> GetWin32Path;

            [NativeTypeName("HRESULT (BSTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char**, int> GetWin64Path;

            [NativeTypeName("HRESULT (BSTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char**, int> GetDisplayName;

            [NativeTypeName("HRESULT (DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, int> GetFlags;

            [NativeTypeName("HRESULT (BSTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char**, int> GetHelpDir;
        }
    }

    public unsafe partial struct tagVersionedStream
    {
        public Guid guidVersion;

        public IStream* pStream;
    }

    public unsafe partial struct tagCAC
    {
        [NativeTypeName("ULONG")]
        public uint cElems;

        [NativeTypeName("CHAR *")]
        public sbyte* pElems;
    }

    public unsafe partial struct tagCAUB
    {
        [NativeTypeName("ULONG")]
        public uint cElems;

        [NativeTypeName("UCHAR *")]
        public byte* pElems;
    }

    public unsafe partial struct tagCAI
    {
        [NativeTypeName("ULONG")]
        public uint cElems;

        public short* pElems;
    }

    public unsafe partial struct tagCAUI
    {
        [NativeTypeName("ULONG")]
        public uint cElems;

        public ushort* pElems;
    }

    public unsafe partial struct tagCAL
    {
        [NativeTypeName("ULONG")]
        public uint cElems;

        [NativeTypeName("LONG *")]
        public int* pElems;
    }

    public unsafe partial struct tagCAUL
    {
        [NativeTypeName("ULONG")]
        public uint cElems;

        [NativeTypeName("ULONG *")]
        public uint* pElems;
    }

    public unsafe partial struct tagCAFLT
    {
        [NativeTypeName("ULONG")]
        public uint cElems;

        public float* pElems;
    }

    public unsafe partial struct tagCADBL
    {
        [NativeTypeName("ULONG")]
        public uint cElems;

        public double* pElems;
    }

    public unsafe partial struct tagCACY
    {
        [NativeTypeName("ULONG")]
        public uint cElems;

        public CY* pElems;
    }

    public unsafe partial struct tagCADATE
    {
        [NativeTypeName("ULONG")]
        public uint cElems;

        [NativeTypeName("DATE *")]
        public double* pElems;
    }

    public unsafe partial struct tagCABSTR
    {
        [NativeTypeName("ULONG")]
        public uint cElems;

        [NativeTypeName("BSTR *")]
        public char** pElems;
    }

    public unsafe partial struct tagCABSTRBLOB
    {
        [NativeTypeName("ULONG")]
        public uint cElems;

        [NativeTypeName("BSTRBLOB *")]
        public tagBSTRBLOB* pElems;
    }

    public unsafe partial struct tagCABOOL
    {
        [NativeTypeName("ULONG")]
        public uint cElems;

        [NativeTypeName("VARIANT_BOOL *")]
        public short* pElems;
    }

    public unsafe partial struct tagCASCODE
    {
        [NativeTypeName("ULONG")]
        public uint cElems;

        [NativeTypeName("SCODE *")]
        public int* pElems;
    }

    public unsafe partial struct tagCAPROPVARIANT
    {
        [NativeTypeName("ULONG")]
        public uint cElems;

        public PROPVARIANT* pElems;
    }

    public unsafe partial struct tagCAH
    {
        [NativeTypeName("ULONG")]
        public uint cElems;

        [NativeTypeName("LARGE_INTEGER *")]
        public long* pElems;
    }

    public unsafe partial struct tagCAUH
    {
        [NativeTypeName("ULONG")]
        public uint cElems;

        [NativeTypeName("ULARGE_INTEGER *")]
        public ulong* pElems;
    }

    public unsafe partial struct tagCALPSTR
    {
        [NativeTypeName("ULONG")]
        public uint cElems;

        [NativeTypeName("LPSTR *")]
        public sbyte** pElems;
    }

    public unsafe partial struct tagCALPWSTR
    {
        [NativeTypeName("ULONG")]
        public uint cElems;

        [NativeTypeName("LPWSTR *")]
        public char** pElems;
    }

    public unsafe partial struct tagCAFILETIME
    {
        [NativeTypeName("ULONG")]
        public uint cElems;

        public FILETIME* pElems;
    }

    public unsafe partial struct tagCACLIPDATA
    {
        [NativeTypeName("ULONG")]
        public uint cElems;

        [NativeTypeName("CLIPDATA *")]
        public tagCLIPDATA* pElems;
    }

    public unsafe partial struct tagCACLSID
    {
        [NativeTypeName("ULONG")]
        public uint cElems;

        [NativeTypeName("CLSID *")]
        public Guid* pElems;
    }

    public unsafe partial struct PROPVARIANT
    {
        [NativeTypeName("__AnonymousRecord_propidlbase_L303_C3")]
        public _Anonymous_e__Union Anonymous;

        [UnscopedRef]
        public ref ushort vt
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.vt;
            }
        }

        [UnscopedRef]
        public ref ushort wReserved1
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.wReserved1;
            }
        }

        [UnscopedRef]
        public ref ushort wReserved2
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.wReserved2;
            }
        }

        [UnscopedRef]
        public ref ushort wReserved3
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.wReserved3;
            }
        }

        [UnscopedRef]
        public ref sbyte cVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.cVal;
            }
        }

        [UnscopedRef]
        public ref byte bVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.bVal;
            }
        }

        [UnscopedRef]
        public ref short iVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.iVal;
            }
        }

        [UnscopedRef]
        public ref ushort uiVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.uiVal;
            }
        }

        [UnscopedRef]
        public ref int lVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.lVal;
            }
        }

        [UnscopedRef]
        public ref uint ulVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.ulVal;
            }
        }

        [UnscopedRef]
        public ref int intVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.intVal;
            }
        }

        [UnscopedRef]
        public ref uint uintVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.uintVal;
            }
        }

        [UnscopedRef]
        public ref long hVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.hVal;
            }
        }

        [UnscopedRef]
        public ref ulong uhVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.uhVal;
            }
        }

        [UnscopedRef]
        public ref float fltVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.fltVal;
            }
        }

        [UnscopedRef]
        public ref double dblVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.dblVal;
            }
        }

        [UnscopedRef]
        public ref short boolVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.boolVal;
            }
        }

        [UnscopedRef]
        public ref short __OBSOLETE__VARIANT_BOOL
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.__OBSOLETE__VARIANT_BOOL;
            }
        }

        [UnscopedRef]
        public ref int scode
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.scode;
            }
        }

        [UnscopedRef]
        public ref CY cyVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.cyVal;
            }
        }

        [UnscopedRef]
        public ref double date
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.date;
            }
        }

        [UnscopedRef]
        public ref FILETIME filetime
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.filetime;
            }
        }

        [UnscopedRef]
        public ref Guid* puuid
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.puuid;
            }
        }

        [UnscopedRef]
        public ref tagCLIPDATA* pclipdata
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pclipdata;
            }
        }

        [UnscopedRef]
        public ref char* bstrVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.bstrVal;
            }
        }

        [UnscopedRef]
        public ref tagBSTRBLOB bstrblobVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.bstrblobVal;
            }
        }

        [UnscopedRef]
        public ref BLOB blob
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.blob;
            }
        }

        [UnscopedRef]
        public ref sbyte* pszVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pszVal;
            }
        }

        [UnscopedRef]
        public ref char* pwszVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pwszVal;
            }
        }

        [UnscopedRef]
        public ref IUnknown* punkVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.punkVal;
            }
        }

        [UnscopedRef]
        public ref IDispatch* pdispVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pdispVal;
            }
        }

        [UnscopedRef]
        public ref IStream* pStream
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pStream;
            }
        }

        [UnscopedRef]
        public ref IStorage* pStorage
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pStorage;
            }
        }

        [UnscopedRef]
        public ref tagVersionedStream* pVersionedStream
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pVersionedStream;
            }
        }

        [UnscopedRef]
        public ref SAFEARRAY* parray
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.parray;
            }
        }

        [UnscopedRef]
        public ref tagCAC cac
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.cac;
            }
        }

        [UnscopedRef]
        public ref tagCAUB caub
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.caub;
            }
        }

        [UnscopedRef]
        public ref tagCAI cai
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.cai;
            }
        }

        [UnscopedRef]
        public ref tagCAUI caui
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.caui;
            }
        }

        [UnscopedRef]
        public ref tagCAL cal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.cal;
            }
        }

        [UnscopedRef]
        public ref tagCAUL caul
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.caul;
            }
        }

        [UnscopedRef]
        public ref tagCAH cah
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.cah;
            }
        }

        [UnscopedRef]
        public ref tagCAUH cauh
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.cauh;
            }
        }

        [UnscopedRef]
        public ref tagCAFLT caflt
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.caflt;
            }
        }

        [UnscopedRef]
        public ref tagCADBL cadbl
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.cadbl;
            }
        }

        [UnscopedRef]
        public ref tagCABOOL cabool
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.cabool;
            }
        }

        [UnscopedRef]
        public ref tagCASCODE cascode
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.cascode;
            }
        }

        [UnscopedRef]
        public ref tagCACY cacy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.cacy;
            }
        }

        [UnscopedRef]
        public ref tagCADATE cadate
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.cadate;
            }
        }

        [UnscopedRef]
        public ref tagCAFILETIME cafiletime
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.cafiletime;
            }
        }

        [UnscopedRef]
        public ref tagCACLSID cauuid
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.cauuid;
            }
        }

        [UnscopedRef]
        public ref tagCACLIPDATA caclipdata
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.caclipdata;
            }
        }

        [UnscopedRef]
        public ref tagCABSTR cabstr
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.cabstr;
            }
        }

        [UnscopedRef]
        public ref tagCABSTRBLOB cabstrblob
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.cabstrblob;
            }
        }

        [UnscopedRef]
        public ref tagCALPSTR calpstr
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.calpstr;
            }
        }

        [UnscopedRef]
        public ref tagCALPWSTR calpwstr
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.calpwstr;
            }
        }

        [UnscopedRef]
        public ref tagCAPROPVARIANT capropvar
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.capropvar;
            }
        }

        [UnscopedRef]
        public ref sbyte* pcVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pcVal;
            }
        }

        [UnscopedRef]
        public ref byte* pbVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pbVal;
            }
        }

        [UnscopedRef]
        public ref short* piVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.piVal;
            }
        }

        [UnscopedRef]
        public ref ushort* puiVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.puiVal;
            }
        }

        [UnscopedRef]
        public ref int* plVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.plVal;
            }
        }

        [UnscopedRef]
        public ref uint* pulVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pulVal;
            }
        }

        [UnscopedRef]
        public ref int* pintVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pintVal;
            }
        }

        [UnscopedRef]
        public ref uint* puintVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.puintVal;
            }
        }

        [UnscopedRef]
        public ref float* pfltVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pfltVal;
            }
        }

        [UnscopedRef]
        public ref double* pdblVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pdblVal;
            }
        }

        [UnscopedRef]
        public ref short* pboolVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pboolVal;
            }
        }

        [UnscopedRef]
        public ref DEC* pdecVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pdecVal;
            }
        }

        [UnscopedRef]
        public ref int* pscode
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pscode;
            }
        }

        [UnscopedRef]
        public ref CY* pcyVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pcyVal;
            }
        }

        [UnscopedRef]
        public ref double* pdate
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pdate;
            }
        }

        [UnscopedRef]
        public ref char** pbstrVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pbstrVal;
            }
        }

        [UnscopedRef]
        public ref IUnknown** ppunkVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.ppunkVal;
            }
        }

        [UnscopedRef]
        public ref IDispatch** ppdispVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.ppdispVal;
            }
        }

        [UnscopedRef]
        public ref SAFEARRAY** pparray
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pparray;
            }
        }

        [UnscopedRef]
        public ref PROPVARIANT* pvarVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.Anonymous_1.Anonymous_2.pvarVal;
            }
        }

        [UnscopedRef]
        public ref DEC decVal
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.decVal;
            }
        }

        [StructLayout(LayoutKind.Explicit)]
        public unsafe partial struct _Anonymous_e__Union
        {
            [FieldOffset(0)]
            [NativeTypeName("__AnonymousRecord_propidlbase_L305_C1")]
            public _Anonymous_1_e__Struct Anonymous_1;

            [FieldOffset(0)]
            [NativeTypeName("DECIMAL")]
            public DEC decVal;

            public unsafe partial struct _Anonymous_1_e__Struct
            {
                [NativeTypeName("VARTYPE")]
                public ushort vt;

                [NativeTypeName("PROPVAR_PAD1")]
                public ushort wReserved1;

                [NativeTypeName("PROPVAR_PAD2")]
                public ushort wReserved2;

                [NativeTypeName("PROPVAR_PAD3")]
                public ushort wReserved3;

                [NativeTypeName("__AnonymousRecord_propidlbase_L311_C43")]
                public _Anonymous_2_e__Union Anonymous_2;

                [StructLayout(LayoutKind.Explicit)]
                public unsafe partial struct _Anonymous_2_e__Union
                {
                    [FieldOffset(0)]
                    [NativeTypeName("CHAR")]
                    public sbyte cVal;

                    [FieldOffset(0)]
                    [NativeTypeName("UCHAR")]
                    public byte bVal;

                    [FieldOffset(0)]
                    public short iVal;

                    [FieldOffset(0)]
                    public ushort uiVal;

                    [FieldOffset(0)]
                    [NativeTypeName("LONG")]
                    public int lVal;

                    [FieldOffset(0)]
                    [NativeTypeName("ULONG")]
                    public uint ulVal;

                    [FieldOffset(0)]
                    public int intVal;

                    [FieldOffset(0)]
                    public uint uintVal;

                    [FieldOffset(0)]
                    [NativeTypeName("LARGE_INTEGER")]
                    public long hVal;

                    [FieldOffset(0)]
                    [NativeTypeName("ULARGE_INTEGER")]
                    public ulong uhVal;

                    [FieldOffset(0)]
                    public float fltVal;

                    [FieldOffset(0)]
                    public double dblVal;

                    [FieldOffset(0)]
                    [NativeTypeName("VARIANT_BOOL")]
                    public short boolVal;

                    [FieldOffset(0)]
                    [NativeTypeName("VARIANT_BOOL")]
                    public short __OBSOLETE__VARIANT_BOOL;

                    [FieldOffset(0)]
                    [NativeTypeName("SCODE")]
                    public int scode;

                    [FieldOffset(0)]
                    public CY cyVal;

                    [FieldOffset(0)]
                    [NativeTypeName("DATE")]
                    public double date;

                    [FieldOffset(0)]
                    public FILETIME filetime;

                    [FieldOffset(0)]
                    [NativeTypeName("CLSID *")]
                    public Guid* puuid;

                    [FieldOffset(0)]
                    [NativeTypeName("CLIPDATA *")]
                    public tagCLIPDATA* pclipdata;

                    [FieldOffset(0)]
                    [NativeTypeName("BSTR")]
                    public char* bstrVal;

                    [FieldOffset(0)]
                    [NativeTypeName("BSTRBLOB")]
                    public tagBSTRBLOB bstrblobVal;

                    [FieldOffset(0)]
                    public BLOB blob;

                    [FieldOffset(0)]
                    [NativeTypeName("LPSTR")]
                    public sbyte* pszVal;

                    [FieldOffset(0)]
                    [NativeTypeName("LPWSTR")]
                    public char* pwszVal;

                    [FieldOffset(0)]
                    public IUnknown* punkVal;

                    [FieldOffset(0)]
                    public IDispatch* pdispVal;

                    [FieldOffset(0)]
                    public IStream* pStream;

                    [FieldOffset(0)]
                    public IStorage* pStorage;

                    [FieldOffset(0)]
                    [NativeTypeName("LPVERSIONEDSTREAM")]
                    public tagVersionedStream* pVersionedStream;

                    [FieldOffset(0)]
                    [NativeTypeName("LPSAFEARRAY")]
                    public SAFEARRAY* parray;

                    [FieldOffset(0)]
                    [NativeTypeName("CAC")]
                    public tagCAC cac;

                    [FieldOffset(0)]
                    [NativeTypeName("CAUB")]
                    public tagCAUB caub;

                    [FieldOffset(0)]
                    [NativeTypeName("CAI")]
                    public tagCAI cai;

                    [FieldOffset(0)]
                    [NativeTypeName("CAUI")]
                    public tagCAUI caui;

                    [FieldOffset(0)]
                    [NativeTypeName("CAL")]
                    public tagCAL cal;

                    [FieldOffset(0)]
                    [NativeTypeName("CAUL")]
                    public tagCAUL caul;

                    [FieldOffset(0)]
                    [NativeTypeName("CAH")]
                    public tagCAH cah;

                    [FieldOffset(0)]
                    [NativeTypeName("CAUH")]
                    public tagCAUH cauh;

                    [FieldOffset(0)]
                    [NativeTypeName("CAFLT")]
                    public tagCAFLT caflt;

                    [FieldOffset(0)]
                    [NativeTypeName("CADBL")]
                    public tagCADBL cadbl;

                    [FieldOffset(0)]
                    [NativeTypeName("CABOOL")]
                    public tagCABOOL cabool;

                    [FieldOffset(0)]
                    [NativeTypeName("CASCODE")]
                    public tagCASCODE cascode;

                    [FieldOffset(0)]
                    [NativeTypeName("CACY")]
                    public tagCACY cacy;

                    [FieldOffset(0)]
                    [NativeTypeName("CADATE")]
                    public tagCADATE cadate;

                    [FieldOffset(0)]
                    [NativeTypeName("CAFILETIME")]
                    public tagCAFILETIME cafiletime;

                    [FieldOffset(0)]
                    [NativeTypeName("CACLSID")]
                    public tagCACLSID cauuid;

                    [FieldOffset(0)]
                    [NativeTypeName("CACLIPDATA")]
                    public tagCACLIPDATA caclipdata;

                    [FieldOffset(0)]
                    [NativeTypeName("CABSTR")]
                    public tagCABSTR cabstr;

                    [FieldOffset(0)]
                    [NativeTypeName("CABSTRBLOB")]
                    public tagCABSTRBLOB cabstrblob;

                    [FieldOffset(0)]
                    [NativeTypeName("CALPSTR")]
                    public tagCALPSTR calpstr;

                    [FieldOffset(0)]
                    [NativeTypeName("CALPWSTR")]
                    public tagCALPWSTR calpwstr;

                    [FieldOffset(0)]
                    [NativeTypeName("CAPROPVARIANT")]
                    public tagCAPROPVARIANT capropvar;

                    [FieldOffset(0)]
                    [NativeTypeName("CHAR *")]
                    public sbyte* pcVal;

                    [FieldOffset(0)]
                    [NativeTypeName("UCHAR *")]
                    public byte* pbVal;

                    [FieldOffset(0)]
                    public short* piVal;

                    [FieldOffset(0)]
                    public ushort* puiVal;

                    [FieldOffset(0)]
                    [NativeTypeName("LONG *")]
                    public int* plVal;

                    [FieldOffset(0)]
                    [NativeTypeName("ULONG *")]
                    public uint* pulVal;

                    [FieldOffset(0)]
                    public int* pintVal;

                    [FieldOffset(0)]
                    public uint* puintVal;

                    [FieldOffset(0)]
                    public float* pfltVal;

                    [FieldOffset(0)]
                    public double* pdblVal;

                    [FieldOffset(0)]
                    [NativeTypeName("VARIANT_BOOL *")]
                    public short* pboolVal;

                    [FieldOffset(0)]
                    [NativeTypeName("DECIMAL *")]
                    public DEC* pdecVal;

                    [FieldOffset(0)]
                    [NativeTypeName("SCODE *")]
                    public int* pscode;

                    [FieldOffset(0)]
                    public CY* pcyVal;

                    [FieldOffset(0)]
                    [NativeTypeName("DATE *")]
                    public double* pdate;

                    [FieldOffset(0)]
                    [NativeTypeName("BSTR *")]
                    public char** pbstrVal;

                    [FieldOffset(0)]
                    public IUnknown** ppunkVal;

                    [FieldOffset(0)]
                    public IDispatch** ppdispVal;

                    [FieldOffset(0)]
                    [NativeTypeName("LPSAFEARRAY *")]
                    public SAFEARRAY** pparray;

                    [FieldOffset(0)]
                    public PROPVARIANT* pvarVal;
                }
            }
        }
    }

    public unsafe partial struct tagPROPSPEC
    {
        [NativeTypeName("ULONG")]
        public uint ulKind;

        [NativeTypeName("__AnonymousRecord_propidlbase_L452_C43")]
        public _Anonymous_e__Union Anonymous;

        [UnscopedRef]
        public ref uint propid
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.propid;
            }
        }

        [UnscopedRef]
        public ref char* lpwstr
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                return ref Anonymous.lpwstr;
            }
        }

        [StructLayout(LayoutKind.Explicit)]
        public unsafe partial struct _Anonymous_e__Union
        {
            [FieldOffset(0)]
            [NativeTypeName("PROPID")]
            public uint propid;

            [FieldOffset(0)]
            [NativeTypeName("LPOLESTR")]
            public char* lpwstr;
        }
    }

    public unsafe partial struct tagSTATPROPSTG
    {
        [NativeTypeName("LPOLESTR")]
        public char* lpwstrName;

        [NativeTypeName("PROPID")]
        public uint propid;

        [NativeTypeName("VARTYPE")]
        public ushort vt;
    }

    public partial struct tagSTATPROPSETSTG
    {
        [NativeTypeName("FMTID")]
        public Guid fmtid;

        [NativeTypeName("CLSID")]
        public Guid clsid;

        [NativeTypeName("DWORD")]
        public uint grfFlags;

        public FILETIME mtime;

        public FILETIME ctime;

        public FILETIME atime;

        [NativeTypeName("DWORD")]
        public uint dwOSVersion;
    }

    [Guid("00000138-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IPropertyStorage : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IPropertyStorage : IPropertyStorage.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IPropertyStorage));

        public Vtbl<IPropertyStorage>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IPropertyStorage*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IPropertyStorage*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IPropertyStorage*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ReadMultiple([NativeTypeName("ULONG")] uint cpspec, [NativeTypeName("const PROPSPEC[]")] tagPROPSPEC* rgpspec, [NativeTypeName("PROPVARIANT[]")] PROPVARIANT* rgpropvar)
        {
            return lpVtbl->ReadMultiple((IPropertyStorage*)Unsafe.AsPointer(ref this), cpspec, rgpspec, rgpropvar);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int WriteMultiple([NativeTypeName("ULONG")] uint cpspec, [NativeTypeName("const PROPSPEC[]")] tagPROPSPEC* rgpspec, [NativeTypeName("const PROPVARIANT[]")] PROPVARIANT* rgpropvar, [NativeTypeName("PROPID")] uint propidNameFirst)
        {
            return lpVtbl->WriteMultiple((IPropertyStorage*)Unsafe.AsPointer(ref this), cpspec, rgpspec, rgpropvar, propidNameFirst);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int DeleteMultiple([NativeTypeName("ULONG")] uint cpspec, [NativeTypeName("const PROPSPEC[]")] tagPROPSPEC* rgpspec)
        {
            return lpVtbl->DeleteMultiple((IPropertyStorage*)Unsafe.AsPointer(ref this), cpspec, rgpspec);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ReadPropertyNames([NativeTypeName("ULONG")] uint cpropid, [NativeTypeName("const PROPID[]")] uint* rgpropid, [NativeTypeName("LPOLESTR[]")] char** rglpwstrName)
        {
            return lpVtbl->ReadPropertyNames((IPropertyStorage*)Unsafe.AsPointer(ref this), cpropid, rgpropid, rglpwstrName);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int WritePropertyNames([NativeTypeName("ULONG")] uint cpropid, [NativeTypeName("const PROPID[]")] uint* rgpropid, [NativeTypeName("const LPOLESTR[]")] char** rglpwstrName)
        {
            return lpVtbl->WritePropertyNames((IPropertyStorage*)Unsafe.AsPointer(ref this), cpropid, rgpropid, rglpwstrName);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int DeletePropertyNames([NativeTypeName("ULONG")] uint cpropid, [NativeTypeName("const PROPID[]")] uint* rgpropid)
        {
            return lpVtbl->DeletePropertyNames((IPropertyStorage*)Unsafe.AsPointer(ref this), cpropid, rgpropid);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Commit([NativeTypeName("DWORD")] uint grfCommitFlags)
        {
            return lpVtbl->Commit((IPropertyStorage*)Unsafe.AsPointer(ref this), grfCommitFlags);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Revert()
        {
            return lpVtbl->Revert((IPropertyStorage*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Enum(IEnumSTATPROPSTG** ppenum)
        {
            return lpVtbl->Enum((IPropertyStorage*)Unsafe.AsPointer(ref this), ppenum);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetTimes([NativeTypeName("const FILETIME *")] FILETIME* pctime, [NativeTypeName("const FILETIME *")] FILETIME* patime, [NativeTypeName("const FILETIME *")] FILETIME* pmtime)
        {
            return lpVtbl->SetTimes((IPropertyStorage*)Unsafe.AsPointer(ref this), pctime, patime, pmtime);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetClass([NativeTypeName("const IID &")] Guid* clsid)
        {
            return lpVtbl->SetClass((IPropertyStorage*)Unsafe.AsPointer(ref this), clsid);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Stat([NativeTypeName("STATPROPSETSTG *")] tagSTATPROPSETSTG* pstatpsstg)
        {
            return lpVtbl->Stat((IPropertyStorage*)Unsafe.AsPointer(ref this), pstatpsstg);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int ReadMultiple([NativeTypeName("ULONG")] uint cpspec, [NativeTypeName("const PROPSPEC[]")] tagPROPSPEC* rgpspec, [NativeTypeName("PROPVARIANT[]")] PROPVARIANT* rgpropvar);

            [return: NativeTypeName("HRESULT")]
            int WriteMultiple([NativeTypeName("ULONG")] uint cpspec, [NativeTypeName("const PROPSPEC[]")] tagPROPSPEC* rgpspec, [NativeTypeName("const PROPVARIANT[]")] PROPVARIANT* rgpropvar, [NativeTypeName("PROPID")] uint propidNameFirst);

            [return: NativeTypeName("HRESULT")]
            int DeleteMultiple([NativeTypeName("ULONG")] uint cpspec, [NativeTypeName("const PROPSPEC[]")] tagPROPSPEC* rgpspec);

            [return: NativeTypeName("HRESULT")]
            int ReadPropertyNames([NativeTypeName("ULONG")] uint cpropid, [NativeTypeName("const PROPID[]")] uint* rgpropid, [NativeTypeName("LPOLESTR[]")] char** rglpwstrName);

            [return: NativeTypeName("HRESULT")]
            int WritePropertyNames([NativeTypeName("ULONG")] uint cpropid, [NativeTypeName("const PROPID[]")] uint* rgpropid, [NativeTypeName("const LPOLESTR[]")] char** rglpwstrName);

            [return: NativeTypeName("HRESULT")]
            int DeletePropertyNames([NativeTypeName("ULONG")] uint cpropid, [NativeTypeName("const PROPID[]")] uint* rgpropid);

            [return: NativeTypeName("HRESULT")]
            int Commit([NativeTypeName("DWORD")] uint grfCommitFlags);

            [return: NativeTypeName("HRESULT")]
            int Revert();

            [return: NativeTypeName("HRESULT")]
            int Enum(IEnumSTATPROPSTG** ppenum);

            [return: NativeTypeName("HRESULT")]
            int SetTimes([NativeTypeName("const FILETIME *")] FILETIME* pctime, [NativeTypeName("const FILETIME *")] FILETIME* patime, [NativeTypeName("const FILETIME *")] FILETIME* pmtime);

            [return: NativeTypeName("HRESULT")]
            int SetClass([NativeTypeName("const IID &")] Guid* clsid);

            [return: NativeTypeName("HRESULT")]
            int Stat([NativeTypeName("STATPROPSETSTG *")] tagSTATPROPSETSTG* pstatpsstg);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (ULONG, const PROPSPEC *, PROPVARIANT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, tagPROPSPEC*, PROPVARIANT*, int> ReadMultiple;

            [NativeTypeName("HRESULT (ULONG, const PROPSPEC *, const PROPVARIANT *, PROPID) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, tagPROPSPEC*, PROPVARIANT*, uint, int> WriteMultiple;

            [NativeTypeName("HRESULT (ULONG, const PROPSPEC *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, tagPROPSPEC*, int> DeleteMultiple;

            [NativeTypeName("HRESULT (ULONG, const PROPID *, LPOLESTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint*, char**, int> ReadPropertyNames;

            [NativeTypeName("HRESULT (ULONG, const PROPID *, const LPOLESTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint*, char**, int> WritePropertyNames;

            [NativeTypeName("HRESULT (ULONG, const PROPID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint*, int> DeletePropertyNames;

            [NativeTypeName("HRESULT (DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> Commit;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> Revert;

            [NativeTypeName("HRESULT (IEnumSTATPROPSTG **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IEnumSTATPROPSTG**, int> Enum;

            [NativeTypeName("HRESULT (const FILETIME *, const FILETIME *, const FILETIME *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, FILETIME*, FILETIME*, FILETIME*, int> SetTimes;

            [NativeTypeName("HRESULT (const IID &) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, int> SetClass;

            [NativeTypeName("HRESULT (STATPROPSETSTG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagSTATPROPSETSTG*, int> Stat;
        }
    }

    [Guid("0000013A-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IPropertySetStorage : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IPropertySetStorage : IPropertySetStorage.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IPropertySetStorage));

        public Vtbl<IPropertySetStorage>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IPropertySetStorage*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IPropertySetStorage*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IPropertySetStorage*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Create([NativeTypeName("const IID &")] Guid* rfmtid, [NativeTypeName("const CLSID *")] Guid* pclsid, [NativeTypeName("DWORD")] uint grfFlags, [NativeTypeName("DWORD")] uint grfMode, IPropertyStorage** ppprstg)
        {
            return lpVtbl->Create((IPropertySetStorage*)Unsafe.AsPointer(ref this), rfmtid, pclsid, grfFlags, grfMode, ppprstg);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Open([NativeTypeName("const IID &")] Guid* rfmtid, [NativeTypeName("DWORD")] uint grfMode, IPropertyStorage** ppprstg)
        {
            return lpVtbl->Open((IPropertySetStorage*)Unsafe.AsPointer(ref this), rfmtid, grfMode, ppprstg);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Delete([NativeTypeName("const IID &")] Guid* rfmtid)
        {
            return lpVtbl->Delete((IPropertySetStorage*)Unsafe.AsPointer(ref this), rfmtid);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Enum(IEnumSTATPROPSETSTG** ppenum)
        {
            return lpVtbl->Enum((IPropertySetStorage*)Unsafe.AsPointer(ref this), ppenum);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Create([NativeTypeName("const IID &")] Guid* rfmtid, [NativeTypeName("const CLSID *")] Guid* pclsid, [NativeTypeName("DWORD")] uint grfFlags, [NativeTypeName("DWORD")] uint grfMode, IPropertyStorage** ppprstg);

            [return: NativeTypeName("HRESULT")]
            int Open([NativeTypeName("const IID &")] Guid* rfmtid, [NativeTypeName("DWORD")] uint grfMode, IPropertyStorage** ppprstg);

            [return: NativeTypeName("HRESULT")]
            int Delete([NativeTypeName("const IID &")] Guid* rfmtid);

            [return: NativeTypeName("HRESULT")]
            int Enum(IEnumSTATPROPSETSTG** ppenum);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (const IID &, const CLSID *, DWORD, DWORD, IPropertyStorage **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, Guid*, uint, uint, IPropertyStorage**, int> Create;

            [NativeTypeName("HRESULT (const IID &, DWORD, IPropertyStorage **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, uint, IPropertyStorage**, int> Open;

            [NativeTypeName("HRESULT (const IID &) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, int> Delete;

            [NativeTypeName("HRESULT (IEnumSTATPROPSETSTG **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IEnumSTATPROPSETSTG**, int> Enum;
        }
    }

    [Guid("00000139-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IEnumSTATPROPSTG : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IEnumSTATPROPSTG : IEnumSTATPROPSTG.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IEnumSTATPROPSTG));

        public Vtbl<IEnumSTATPROPSTG>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IEnumSTATPROPSTG*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IEnumSTATPROPSTG*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IEnumSTATPROPSTG*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Next([NativeTypeName("ULONG")] uint celt, [NativeTypeName("STATPROPSTG *")] tagSTATPROPSTG* rgelt, [NativeTypeName("ULONG *")] uint* pceltFetched)
        {
            return lpVtbl->Next((IEnumSTATPROPSTG*)Unsafe.AsPointer(ref this), celt, rgelt, pceltFetched);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Skip([NativeTypeName("ULONG")] uint celt)
        {
            return lpVtbl->Skip((IEnumSTATPROPSTG*)Unsafe.AsPointer(ref this), celt);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Reset()
        {
            return lpVtbl->Reset((IEnumSTATPROPSTG*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Clone(IEnumSTATPROPSTG** ppenum)
        {
            return lpVtbl->Clone((IEnumSTATPROPSTG*)Unsafe.AsPointer(ref this), ppenum);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Next([NativeTypeName("ULONG")] uint celt, [NativeTypeName("STATPROPSTG *")] tagSTATPROPSTG* rgelt, [NativeTypeName("ULONG *")] uint* pceltFetched);

            [return: NativeTypeName("HRESULT")]
            int Skip([NativeTypeName("ULONG")] uint celt);

            [return: NativeTypeName("HRESULT")]
            int Reset();

            [return: NativeTypeName("HRESULT")]
            int Clone(IEnumSTATPROPSTG** ppenum);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (ULONG, STATPROPSTG *, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, tagSTATPROPSTG*, uint*, int> Next;

            [NativeTypeName("HRESULT (ULONG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> Skip;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> Reset;

            [NativeTypeName("HRESULT (IEnumSTATPROPSTG **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IEnumSTATPROPSTG**, int> Clone;
        }
    }

    [Guid("0000013B-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IEnumSTATPROPSETSTG : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IEnumSTATPROPSETSTG : IEnumSTATPROPSETSTG.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IEnumSTATPROPSETSTG));

        public Vtbl<IEnumSTATPROPSETSTG>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IEnumSTATPROPSETSTG*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IEnumSTATPROPSETSTG*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IEnumSTATPROPSETSTG*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Next([NativeTypeName("ULONG")] uint celt, [NativeTypeName("STATPROPSETSTG *")] tagSTATPROPSETSTG* rgelt, [NativeTypeName("ULONG *")] uint* pceltFetched)
        {
            return lpVtbl->Next((IEnumSTATPROPSETSTG*)Unsafe.AsPointer(ref this), celt, rgelt, pceltFetched);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Skip([NativeTypeName("ULONG")] uint celt)
        {
            return lpVtbl->Skip((IEnumSTATPROPSETSTG*)Unsafe.AsPointer(ref this), celt);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Reset()
        {
            return lpVtbl->Reset((IEnumSTATPROPSETSTG*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Clone(IEnumSTATPROPSETSTG** ppenum)
        {
            return lpVtbl->Clone((IEnumSTATPROPSETSTG*)Unsafe.AsPointer(ref this), ppenum);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Next([NativeTypeName("ULONG")] uint celt, [NativeTypeName("STATPROPSETSTG *")] tagSTATPROPSETSTG* rgelt, [NativeTypeName("ULONG *")] uint* pceltFetched);

            [return: NativeTypeName("HRESULT")]
            int Skip([NativeTypeName("ULONG")] uint celt);

            [return: NativeTypeName("HRESULT")]
            int Reset();

            [return: NativeTypeName("HRESULT")]
            int Clone(IEnumSTATPROPSETSTG** ppenum);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (ULONG, STATPROPSETSTG *, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, tagSTATPROPSETSTG*, uint*, int> Next;

            [NativeTypeName("HRESULT (ULONG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> Skip;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> Reset;

            [NativeTypeName("HRESULT (IEnumSTATPROPSETSTG **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IEnumSTATPROPSETSTG**, int> Clone;
        }
    }

    [Guid("00000111-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IOleAdviseHolder : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IOleAdviseHolder : IOleAdviseHolder.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IOleAdviseHolder));

        public Vtbl<IOleAdviseHolder>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IOleAdviseHolder*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IOleAdviseHolder*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IOleAdviseHolder*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Advise(IAdviseSink* pAdvise, [NativeTypeName("DWORD *")] uint* pdwConnection)
        {
            return lpVtbl->Advise((IOleAdviseHolder*)Unsafe.AsPointer(ref this), pAdvise, pdwConnection);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Unadvise([NativeTypeName("DWORD")] uint dwConnection)
        {
            return lpVtbl->Unadvise((IOleAdviseHolder*)Unsafe.AsPointer(ref this), dwConnection);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int EnumAdvise(IEnumSTATDATA** ppenumAdvise)
        {
            return lpVtbl->EnumAdvise((IOleAdviseHolder*)Unsafe.AsPointer(ref this), ppenumAdvise);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SendOnRename(IMoniker* pmk)
        {
            return lpVtbl->SendOnRename((IOleAdviseHolder*)Unsafe.AsPointer(ref this), pmk);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SendOnSave()
        {
            return lpVtbl->SendOnSave((IOleAdviseHolder*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SendOnClose()
        {
            return lpVtbl->SendOnClose((IOleAdviseHolder*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Advise(IAdviseSink* pAdvise, [NativeTypeName("DWORD *")] uint* pdwConnection);

            [return: NativeTypeName("HRESULT")]
            int Unadvise([NativeTypeName("DWORD")] uint dwConnection);

            [return: NativeTypeName("HRESULT")]
            int EnumAdvise(IEnumSTATDATA** ppenumAdvise);

            [return: NativeTypeName("HRESULT")]
            int SendOnRename(IMoniker* pmk);

            [return: NativeTypeName("HRESULT")]
            int SendOnSave();

            [return: NativeTypeName("HRESULT")]
            int SendOnClose();
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (IAdviseSink *, DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IAdviseSink*, uint*, int> Advise;

            [NativeTypeName("HRESULT (DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> Unadvise;

            [NativeTypeName("HRESULT (IEnumSTATDATA **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IEnumSTATDATA**, int> EnumAdvise;

            [NativeTypeName("HRESULT (IMoniker *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IMoniker*, int> SendOnRename;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> SendOnSave;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> SendOnClose;
        }
    }

    [Guid("0000011E-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IOleCache : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IOleCache : IOleCache.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IOleCache));

        public Vtbl<IOleCache>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IOleCache*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IOleCache*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IOleCache*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Cache([NativeTypeName("FORMATETC *")] tagFORMATETC* pformatetc, [NativeTypeName("DWORD")] uint advf, [NativeTypeName("DWORD *")] uint* pdwConnection)
        {
            return lpVtbl->Cache((IOleCache*)Unsafe.AsPointer(ref this), pformatetc, advf, pdwConnection);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Uncache([NativeTypeName("DWORD")] uint dwConnection)
        {
            return lpVtbl->Uncache((IOleCache*)Unsafe.AsPointer(ref this), dwConnection);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int EnumCache(IEnumSTATDATA** ppenumSTATDATA)
        {
            return lpVtbl->EnumCache((IOleCache*)Unsafe.AsPointer(ref this), ppenumSTATDATA);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int InitCache(IDataObject* pDataObject)
        {
            return lpVtbl->InitCache((IOleCache*)Unsafe.AsPointer(ref this), pDataObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetData([NativeTypeName("FORMATETC *")] tagFORMATETC* pformatetc, [NativeTypeName("STGMEDIUM *")] tagSTGMEDIUM* pmedium, [NativeTypeName("BOOL")] int fRelease)
        {
            return lpVtbl->SetData((IOleCache*)Unsafe.AsPointer(ref this), pformatetc, pmedium, fRelease);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Cache([NativeTypeName("FORMATETC *")] tagFORMATETC* pformatetc, [NativeTypeName("DWORD")] uint advf, [NativeTypeName("DWORD *")] uint* pdwConnection);

            [return: NativeTypeName("HRESULT")]
            int Uncache([NativeTypeName("DWORD")] uint dwConnection);

            [return: NativeTypeName("HRESULT")]
            int EnumCache(IEnumSTATDATA** ppenumSTATDATA);

            [return: NativeTypeName("HRESULT")]
            int InitCache(IDataObject* pDataObject);

            [return: NativeTypeName("HRESULT")]
            int SetData([NativeTypeName("FORMATETC *")] tagFORMATETC* pformatetc, [NativeTypeName("STGMEDIUM *")] tagSTGMEDIUM* pmedium, [NativeTypeName("BOOL")] int fRelease);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (FORMATETC *, DWORD, DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagFORMATETC*, uint, uint*, int> Cache;

            [NativeTypeName("HRESULT (DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> Uncache;

            [NativeTypeName("HRESULT (IEnumSTATDATA **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IEnumSTATDATA**, int> EnumCache;

            [NativeTypeName("HRESULT (IDataObject *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IDataObject*, int> InitCache;

            [NativeTypeName("HRESULT (FORMATETC *, STGMEDIUM *, BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagFORMATETC*, tagSTGMEDIUM*, int, int> SetData;
        }
    }

    public enum tagDISCARDCACHE
    {
        DISCARDCACHE_SAVEIFDIRTY = 0,
        DISCARDCACHE_NOSAVE = 1,
    }

    [Guid("00000128-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IOleCache2 : IOleCache")]
    [NativeInheritance("IOleCache")]
    public unsafe partial struct IOleCache2 : IOleCache2.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IOleCache2));

        public Vtbl<IOleCache2>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IOleCache2*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IOleCache2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IOleCache2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Cache([NativeTypeName("FORMATETC *")] tagFORMATETC* pformatetc, [NativeTypeName("DWORD")] uint advf, [NativeTypeName("DWORD *")] uint* pdwConnection)
        {
            return lpVtbl->Cache((IOleCache2*)Unsafe.AsPointer(ref this), pformatetc, advf, pdwConnection);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Uncache([NativeTypeName("DWORD")] uint dwConnection)
        {
            return lpVtbl->Uncache((IOleCache2*)Unsafe.AsPointer(ref this), dwConnection);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int EnumCache(IEnumSTATDATA** ppenumSTATDATA)
        {
            return lpVtbl->EnumCache((IOleCache2*)Unsafe.AsPointer(ref this), ppenumSTATDATA);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int InitCache(IDataObject* pDataObject)
        {
            return lpVtbl->InitCache((IOleCache2*)Unsafe.AsPointer(ref this), pDataObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetData([NativeTypeName("FORMATETC *")] tagFORMATETC* pformatetc, [NativeTypeName("STGMEDIUM *")] tagSTGMEDIUM* pmedium, [NativeTypeName("BOOL")] int fRelease)
        {
            return lpVtbl->SetData((IOleCache2*)Unsafe.AsPointer(ref this), pformatetc, pmedium, fRelease);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int UpdateCache([NativeTypeName("LPDATAOBJECT")] IDataObject* pDataObject, [NativeTypeName("DWORD")] uint grfUpdf, [NativeTypeName("LPVOID")] void* pReserved)
        {
            return lpVtbl->UpdateCache((IOleCache2*)Unsafe.AsPointer(ref this), pDataObject, grfUpdf, pReserved);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int DiscardCache([NativeTypeName("DWORD")] uint dwDiscardOptions)
        {
            return lpVtbl->DiscardCache((IOleCache2*)Unsafe.AsPointer(ref this), dwDiscardOptions);
        }

        public interface Interface : IOleCache.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int UpdateCache([NativeTypeName("LPDATAOBJECT")] IDataObject* pDataObject, [NativeTypeName("DWORD")] uint grfUpdf, [NativeTypeName("LPVOID")] void* pReserved);

            [return: NativeTypeName("HRESULT")]
            int DiscardCache([NativeTypeName("DWORD")] uint dwDiscardOptions);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (FORMATETC *, DWORD, DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagFORMATETC*, uint, uint*, int> Cache;

            [NativeTypeName("HRESULT (DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> Uncache;

            [NativeTypeName("HRESULT (IEnumSTATDATA **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IEnumSTATDATA**, int> EnumCache;

            [NativeTypeName("HRESULT (IDataObject *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IDataObject*, int> InitCache;

            [NativeTypeName("HRESULT (FORMATETC *, STGMEDIUM *, BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagFORMATETC*, tagSTGMEDIUM*, int, int> SetData;

            [NativeTypeName("HRESULT (LPDATAOBJECT, DWORD, LPVOID) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IDataObject*, uint, void*, int> UpdateCache;

            [NativeTypeName("HRESULT (DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> DiscardCache;
        }
    }

    [Guid("00000129-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IOleCacheControl : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IOleCacheControl : IOleCacheControl.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IOleCacheControl));

        public Vtbl<IOleCacheControl>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IOleCacheControl*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IOleCacheControl*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IOleCacheControl*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnRun([NativeTypeName("LPDATAOBJECT")] IDataObject* pDataObject)
        {
            return lpVtbl->OnRun((IOleCacheControl*)Unsafe.AsPointer(ref this), pDataObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnStop()
        {
            return lpVtbl->OnStop((IOleCacheControl*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int OnRun([NativeTypeName("LPDATAOBJECT")] IDataObject* pDataObject);

            [return: NativeTypeName("HRESULT")]
            int OnStop();
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (LPDATAOBJECT) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IDataObject*, int> OnRun;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> OnStop;
        }
    }

    [Guid("0000011A-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IParseDisplayName : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IParseDisplayName : IParseDisplayName.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IParseDisplayName));

        public Vtbl<IParseDisplayName>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IParseDisplayName*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IParseDisplayName*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IParseDisplayName*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ParseDisplayName(IBindCtx* pbc, [NativeTypeName("LPOLESTR")] char* pszDisplayName, [NativeTypeName("ULONG *")] uint* pchEaten, IMoniker** ppmkOut)
        {
            return lpVtbl->ParseDisplayName((IParseDisplayName*)Unsafe.AsPointer(ref this), pbc, pszDisplayName, pchEaten, ppmkOut);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int ParseDisplayName(IBindCtx* pbc, [NativeTypeName("LPOLESTR")] char* pszDisplayName, [NativeTypeName("ULONG *")] uint* pchEaten, IMoniker** ppmkOut);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (IBindCtx *, LPOLESTR, ULONG *, IMoniker **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IBindCtx*, char*, uint*, IMoniker**, int> ParseDisplayName;
        }
    }

    [Guid("0000011B-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IOleContainer : IParseDisplayName")]
    [NativeInheritance("IParseDisplayName")]
    public unsafe partial struct IOleContainer : IOleContainer.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IOleContainer));

        public Vtbl<IOleContainer>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IOleContainer*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IOleContainer*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IOleContainer*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ParseDisplayName(IBindCtx* pbc, [NativeTypeName("LPOLESTR")] char* pszDisplayName, [NativeTypeName("ULONG *")] uint* pchEaten, IMoniker** ppmkOut)
        {
            return lpVtbl->ParseDisplayName((IOleContainer*)Unsafe.AsPointer(ref this), pbc, pszDisplayName, pchEaten, ppmkOut);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int EnumObjects([NativeTypeName("DWORD")] uint grfFlags, IEnumUnknown** ppenum)
        {
            return lpVtbl->EnumObjects((IOleContainer*)Unsafe.AsPointer(ref this), grfFlags, ppenum);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int LockContainer([NativeTypeName("BOOL")] int fLock)
        {
            return lpVtbl->LockContainer((IOleContainer*)Unsafe.AsPointer(ref this), fLock);
        }

        public interface Interface : IParseDisplayName.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int EnumObjects([NativeTypeName("DWORD")] uint grfFlags, IEnumUnknown** ppenum);

            [return: NativeTypeName("HRESULT")]
            int LockContainer([NativeTypeName("BOOL")] int fLock);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (IBindCtx *, LPOLESTR, ULONG *, IMoniker **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IBindCtx*, char*, uint*, IMoniker**, int> ParseDisplayName;

            [NativeTypeName("HRESULT (DWORD, IEnumUnknown **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, IEnumUnknown**, int> EnumObjects;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> LockContainer;
        }
    }

    [Guid("00000118-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IOleClientSite : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IOleClientSite : IOleClientSite.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IOleClientSite));

        public Vtbl<IOleClientSite>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IOleClientSite*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IOleClientSite*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IOleClientSite*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SaveObject()
        {
            return lpVtbl->SaveObject((IOleClientSite*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetMoniker([NativeTypeName("DWORD")] uint dwAssign, [NativeTypeName("DWORD")] uint dwWhichMoniker, IMoniker** ppmk)
        {
            return lpVtbl->GetMoniker((IOleClientSite*)Unsafe.AsPointer(ref this), dwAssign, dwWhichMoniker, ppmk);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetContainer(IOleContainer** ppContainer)
        {
            return lpVtbl->GetContainer((IOleClientSite*)Unsafe.AsPointer(ref this), ppContainer);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ShowObject()
        {
            return lpVtbl->ShowObject((IOleClientSite*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnShowWindow([NativeTypeName("BOOL")] int fShow)
        {
            return lpVtbl->OnShowWindow((IOleClientSite*)Unsafe.AsPointer(ref this), fShow);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int RequestNewObjectLayout()
        {
            return lpVtbl->RequestNewObjectLayout((IOleClientSite*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int SaveObject();

            [return: NativeTypeName("HRESULT")]
            int GetMoniker([NativeTypeName("DWORD")] uint dwAssign, [NativeTypeName("DWORD")] uint dwWhichMoniker, IMoniker** ppmk);

            [return: NativeTypeName("HRESULT")]
            int GetContainer(IOleContainer** ppContainer);

            [return: NativeTypeName("HRESULT")]
            int ShowObject();

            [return: NativeTypeName("HRESULT")]
            int OnShowWindow([NativeTypeName("BOOL")] int fShow);

            [return: NativeTypeName("HRESULT")]
            int RequestNewObjectLayout();
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> SaveObject;

            [NativeTypeName("HRESULT (DWORD, DWORD, IMoniker **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint, IMoniker**, int> GetMoniker;

            [NativeTypeName("HRESULT (IOleContainer **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IOleContainer**, int> GetContainer;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> ShowObject;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> OnShowWindow;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> RequestNewObjectLayout;
        }
    }

    public enum tagOLEGETMONIKER
    {
        OLEGETMONIKER_ONLYIFTHERE = 1,
        OLEGETMONIKER_FORCEASSIGN = 2,
        OLEGETMONIKER_UNASSIGN = 3,
        OLEGETMONIKER_TEMPFORUSER = 4,
    }

    public enum tagOLEWHICHMK
    {
        OLEWHICHMK_CONTAINER = 1,
        OLEWHICHMK_OBJREL = 2,
        OLEWHICHMK_OBJFULL = 3,
    }

    public enum tagUSERCLASSTYPE
    {
        USERCLASSTYPE_FULL = 1,
        USERCLASSTYPE_SHORT = 2,
        USERCLASSTYPE_APPNAME = 3,
    }

    public enum tagOLEMISC
    {
        OLEMISC_RECOMPOSEONRESIZE = 0x1,
        OLEMISC_ONLYICONIC = 0x2,
        OLEMISC_INSERTNOTREPLACE = 0x4,
        OLEMISC_STATIC = 0x8,
        OLEMISC_CANTLINKINSIDE = 0x10,
        OLEMISC_CANLINKBYOLE1 = 0x20,
        OLEMISC_ISLINKOBJECT = 0x40,
        OLEMISC_INSIDEOUT = 0x80,
        OLEMISC_ACTIVATEWHENVISIBLE = 0x100,
        OLEMISC_RENDERINGISDEVICEINDEPENDENT = 0x200,
        OLEMISC_INVISIBLEATRUNTIME = 0x400,
        OLEMISC_ALWAYSRUN = 0x800,
        OLEMISC_ACTSLIKEBUTTON = 0x1000,
        OLEMISC_ACTSLIKELABEL = 0x2000,
        OLEMISC_NOUIACTIVATE = 0x4000,
        OLEMISC_ALIGNABLE = 0x8000,
        OLEMISC_SIMPLEFRAME = 0x10000,
        OLEMISC_SETCLIENTSITEFIRST = 0x20000,
        OLEMISC_IMEMODE = 0x40000,
        OLEMISC_IGNOREACTIVATEWHENVISIBLE = 0x80000,
        OLEMISC_WANTSTOMENUMERGE = 0x100000,
        OLEMISC_SUPPORTSMULTILEVELUNDO = 0x200000,
    }

    public enum tagOLECLOSE
    {
        OLECLOSE_SAVEIFDIRTY = 0,
        OLECLOSE_NOSAVE = 1,
        OLECLOSE_PROMPTSAVE = 2,
    }

    [Guid("00000112-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IOleObject : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IOleObject : IOleObject.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IOleObject));

        public Vtbl<IOleObject>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IOleObject*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IOleObject*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IOleObject*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetClientSite(IOleClientSite* pClientSite)
        {
            return lpVtbl->SetClientSite((IOleObject*)Unsafe.AsPointer(ref this), pClientSite);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetClientSite(IOleClientSite** ppClientSite)
        {
            return lpVtbl->GetClientSite((IOleObject*)Unsafe.AsPointer(ref this), ppClientSite);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetHostNames([NativeTypeName("LPCOLESTR")] char* szContainerApp, [NativeTypeName("LPCOLESTR")] char* szContainerObj)
        {
            return lpVtbl->SetHostNames((IOleObject*)Unsafe.AsPointer(ref this), szContainerApp, szContainerObj);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Close([NativeTypeName("DWORD")] uint dwSaveOption)
        {
            return lpVtbl->Close((IOleObject*)Unsafe.AsPointer(ref this), dwSaveOption);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetMoniker([NativeTypeName("DWORD")] uint dwWhichMoniker, IMoniker* pmk)
        {
            return lpVtbl->SetMoniker((IOleObject*)Unsafe.AsPointer(ref this), dwWhichMoniker, pmk);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetMoniker([NativeTypeName("DWORD")] uint dwAssign, [NativeTypeName("DWORD")] uint dwWhichMoniker, IMoniker** ppmk)
        {
            return lpVtbl->GetMoniker((IOleObject*)Unsafe.AsPointer(ref this), dwAssign, dwWhichMoniker, ppmk);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int InitFromData(IDataObject* pDataObject, [NativeTypeName("BOOL")] int fCreation, [NativeTypeName("DWORD")] uint dwReserved)
        {
            return lpVtbl->InitFromData((IOleObject*)Unsafe.AsPointer(ref this), pDataObject, fCreation, dwReserved);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetClipboardData([NativeTypeName("DWORD")] uint dwReserved, IDataObject** ppDataObject)
        {
            return lpVtbl->GetClipboardData((IOleObject*)Unsafe.AsPointer(ref this), dwReserved, ppDataObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int DoVerb([NativeTypeName("LONG")] int iVerb, [NativeTypeName("LPMSG")] MSG* lpmsg, IOleClientSite* pActiveSite, [NativeTypeName("LONG")] int lindex, [NativeTypeName("HWND")] nint* hwndParent, [NativeTypeName("LPCRECT")] RECT* lprcPosRect)
        {
            return lpVtbl->DoVerb((IOleObject*)Unsafe.AsPointer(ref this), iVerb, lpmsg, pActiveSite, lindex, hwndParent, lprcPosRect);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int EnumVerbs(IEnumOLEVERB** ppEnumOleVerb)
        {
            return lpVtbl->EnumVerbs((IOleObject*)Unsafe.AsPointer(ref this), ppEnumOleVerb);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Update()
        {
            return lpVtbl->Update((IOleObject*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int IsUpToDate()
        {
            return lpVtbl->IsUpToDate((IOleObject*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetUserClassID([NativeTypeName("CLSID *")] Guid* pClsid)
        {
            return lpVtbl->GetUserClassID((IOleObject*)Unsafe.AsPointer(ref this), pClsid);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetUserType([NativeTypeName("DWORD")] uint dwFormOfType, [NativeTypeName("LPOLESTR *")] char** pszUserType)
        {
            return lpVtbl->GetUserType((IOleObject*)Unsafe.AsPointer(ref this), dwFormOfType, pszUserType);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetExtent([NativeTypeName("DWORD")] uint dwDrawAspect, [NativeTypeName("SIZEL *")] SIZE* psizel)
        {
            return lpVtbl->SetExtent((IOleObject*)Unsafe.AsPointer(ref this), dwDrawAspect, psizel);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetExtent([NativeTypeName("DWORD")] uint dwDrawAspect, [NativeTypeName("SIZEL *")] SIZE* psizel)
        {
            return lpVtbl->GetExtent((IOleObject*)Unsafe.AsPointer(ref this), dwDrawAspect, psizel);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Advise(IAdviseSink* pAdvSink, [NativeTypeName("DWORD *")] uint* pdwConnection)
        {
            return lpVtbl->Advise((IOleObject*)Unsafe.AsPointer(ref this), pAdvSink, pdwConnection);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Unadvise([NativeTypeName("DWORD")] uint dwConnection)
        {
            return lpVtbl->Unadvise((IOleObject*)Unsafe.AsPointer(ref this), dwConnection);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int EnumAdvise(IEnumSTATDATA** ppenumAdvise)
        {
            return lpVtbl->EnumAdvise((IOleObject*)Unsafe.AsPointer(ref this), ppenumAdvise);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetMiscStatus([NativeTypeName("DWORD")] uint dwAspect, [NativeTypeName("DWORD *")] uint* pdwStatus)
        {
            return lpVtbl->GetMiscStatus((IOleObject*)Unsafe.AsPointer(ref this), dwAspect, pdwStatus);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetColorScheme([NativeTypeName("LOGPALETTE *")] tagLOGPALETTE* pLogpal)
        {
            return lpVtbl->SetColorScheme((IOleObject*)Unsafe.AsPointer(ref this), pLogpal);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int SetClientSite(IOleClientSite* pClientSite);

            [return: NativeTypeName("HRESULT")]
            int GetClientSite(IOleClientSite** ppClientSite);

            [return: NativeTypeName("HRESULT")]
            int SetHostNames([NativeTypeName("LPCOLESTR")] char* szContainerApp, [NativeTypeName("LPCOLESTR")] char* szContainerObj);

            [return: NativeTypeName("HRESULT")]
            int Close([NativeTypeName("DWORD")] uint dwSaveOption);

            [return: NativeTypeName("HRESULT")]
            int SetMoniker([NativeTypeName("DWORD")] uint dwWhichMoniker, IMoniker* pmk);

            [return: NativeTypeName("HRESULT")]
            int GetMoniker([NativeTypeName("DWORD")] uint dwAssign, [NativeTypeName("DWORD")] uint dwWhichMoniker, IMoniker** ppmk);

            [return: NativeTypeName("HRESULT")]
            int InitFromData(IDataObject* pDataObject, [NativeTypeName("BOOL")] int fCreation, [NativeTypeName("DWORD")] uint dwReserved);

            [return: NativeTypeName("HRESULT")]
            int GetClipboardData([NativeTypeName("DWORD")] uint dwReserved, IDataObject** ppDataObject);

            [return: NativeTypeName("HRESULT")]
            int DoVerb([NativeTypeName("LONG")] int iVerb, [NativeTypeName("LPMSG")] MSG* lpmsg, IOleClientSite* pActiveSite, [NativeTypeName("LONG")] int lindex, [NativeTypeName("HWND")] nint* hwndParent, [NativeTypeName("LPCRECT")] RECT* lprcPosRect);

            [return: NativeTypeName("HRESULT")]
            int EnumVerbs(IEnumOLEVERB** ppEnumOleVerb);

            [return: NativeTypeName("HRESULT")]
            int Update();

            [return: NativeTypeName("HRESULT")]
            int IsUpToDate();

            [return: NativeTypeName("HRESULT")]
            int GetUserClassID([NativeTypeName("CLSID *")] Guid* pClsid);

            [return: NativeTypeName("HRESULT")]
            int GetUserType([NativeTypeName("DWORD")] uint dwFormOfType, [NativeTypeName("LPOLESTR *")] char** pszUserType);

            [return: NativeTypeName("HRESULT")]
            int SetExtent([NativeTypeName("DWORD")] uint dwDrawAspect, [NativeTypeName("SIZEL *")] SIZE* psizel);

            [return: NativeTypeName("HRESULT")]
            int GetExtent([NativeTypeName("DWORD")] uint dwDrawAspect, [NativeTypeName("SIZEL *")] SIZE* psizel);

            [return: NativeTypeName("HRESULT")]
            int Advise(IAdviseSink* pAdvSink, [NativeTypeName("DWORD *")] uint* pdwConnection);

            [return: NativeTypeName("HRESULT")]
            int Unadvise([NativeTypeName("DWORD")] uint dwConnection);

            [return: NativeTypeName("HRESULT")]
            int EnumAdvise(IEnumSTATDATA** ppenumAdvise);

            [return: NativeTypeName("HRESULT")]
            int GetMiscStatus([NativeTypeName("DWORD")] uint dwAspect, [NativeTypeName("DWORD *")] uint* pdwStatus);

            [return: NativeTypeName("HRESULT")]
            int SetColorScheme([NativeTypeName("LOGPALETTE *")] tagLOGPALETTE* pLogpal);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (IOleClientSite *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IOleClientSite*, int> SetClientSite;

            [NativeTypeName("HRESULT (IOleClientSite **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IOleClientSite**, int> GetClientSite;

            [NativeTypeName("HRESULT (LPCOLESTR, LPCOLESTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, char*, int> SetHostNames;

            [NativeTypeName("HRESULT (DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> Close;

            [NativeTypeName("HRESULT (DWORD, IMoniker *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, IMoniker*, int> SetMoniker;

            [NativeTypeName("HRESULT (DWORD, DWORD, IMoniker **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint, IMoniker**, int> GetMoniker;

            [NativeTypeName("HRESULT (IDataObject *, BOOL, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IDataObject*, int, uint, int> InitFromData;

            [NativeTypeName("HRESULT (DWORD, IDataObject **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, IDataObject**, int> GetClipboardData;

            [NativeTypeName("HRESULT (LONG, LPMSG, IOleClientSite *, LONG, HWND, LPCRECT) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, MSG*, IOleClientSite*, int, nint*, RECT*, int> DoVerb;

            [NativeTypeName("HRESULT (IEnumOLEVERB **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IEnumOLEVERB**, int> EnumVerbs;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> Update;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> IsUpToDate;

            [NativeTypeName("HRESULT (CLSID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, int> GetUserClassID;

            [NativeTypeName("HRESULT (DWORD, LPOLESTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, char**, int> GetUserType;

            [NativeTypeName("HRESULT (DWORD, SIZEL *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, SIZE*, int> SetExtent;

            [NativeTypeName("HRESULT (DWORD, SIZEL *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, SIZE*, int> GetExtent;

            [NativeTypeName("HRESULT (IAdviseSink *, DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IAdviseSink*, uint*, int> Advise;

            [NativeTypeName("HRESULT (DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> Unadvise;

            [NativeTypeName("HRESULT (IEnumSTATDATA **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IEnumSTATDATA**, int> EnumAdvise;

            [NativeTypeName("HRESULT (DWORD, DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint*, int> GetMiscStatus;

            [NativeTypeName("HRESULT (LOGPALETTE *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagLOGPALETTE*, int> SetColorScheme;
        }
    }

    public enum tagOLERENDER
    {
        OLERENDER_NONE = 0,
        OLERENDER_DRAW = 1,
        OLERENDER_FORMAT = 2,
        OLERENDER_ASIS = 3,
    }

    public partial struct tagOBJECTDESCRIPTOR
    {
        [NativeTypeName("ULONG")]
        public uint cbSize;

        [NativeTypeName("CLSID")]
        public Guid clsid;

        [NativeTypeName("DWORD")]
        public uint dwDrawAspect;

        [NativeTypeName("SIZEL")]
        public SIZE sizel;

        [NativeTypeName("POINTL")]
        public _POINTL pointl;

        [NativeTypeName("DWORD")]
        public uint dwStatus;

        [NativeTypeName("DWORD")]
        public uint dwFullUserTypeName;

        [NativeTypeName("DWORD")]
        public uint dwSrcOfCopy;
    }

    [Guid("00000114-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IOleWindow : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IOleWindow : IOleWindow.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IOleWindow));

        public Vtbl<IOleWindow>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IOleWindow*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IOleWindow*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IOleWindow*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetWindow([NativeTypeName("HWND *")] nint** phwnd)
        {
            return lpVtbl->GetWindow((IOleWindow*)Unsafe.AsPointer(ref this), phwnd);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ContextSensitiveHelp([NativeTypeName("BOOL")] int fEnterMode)
        {
            return lpVtbl->ContextSensitiveHelp((IOleWindow*)Unsafe.AsPointer(ref this), fEnterMode);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int GetWindow([NativeTypeName("HWND *")] nint** phwnd);

            [return: NativeTypeName("HRESULT")]
            int ContextSensitiveHelp([NativeTypeName("BOOL")] int fEnterMode);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (HWND *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, nint**, int> GetWindow;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> ContextSensitiveHelp;
        }
    }

    public enum tagOLEUPDATE
    {
        OLEUPDATE_ALWAYS = 1,
        OLEUPDATE_ONCALL = 3,
    }

    public enum tagOLELINKBIND
    {
        OLELINKBIND_EVENIFCLASSDIFF = 1,
    }

    [Guid("0000011D-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IOleLink : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IOleLink : IOleLink.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IOleLink));

        public Vtbl<IOleLink>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IOleLink*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IOleLink*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IOleLink*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetUpdateOptions([NativeTypeName("DWORD")] uint dwUpdateOpt)
        {
            return lpVtbl->SetUpdateOptions((IOleLink*)Unsafe.AsPointer(ref this), dwUpdateOpt);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetUpdateOptions([NativeTypeName("DWORD *")] uint* pdwUpdateOpt)
        {
            return lpVtbl->GetUpdateOptions((IOleLink*)Unsafe.AsPointer(ref this), pdwUpdateOpt);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetSourceMoniker(IMoniker* pmk, [NativeTypeName("const IID &")] Guid* rclsid)
        {
            return lpVtbl->SetSourceMoniker((IOleLink*)Unsafe.AsPointer(ref this), pmk, rclsid);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetSourceMoniker(IMoniker** ppmk)
        {
            return lpVtbl->GetSourceMoniker((IOleLink*)Unsafe.AsPointer(ref this), ppmk);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetSourceDisplayName([NativeTypeName("LPCOLESTR")] char* pszStatusText)
        {
            return lpVtbl->SetSourceDisplayName((IOleLink*)Unsafe.AsPointer(ref this), pszStatusText);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetSourceDisplayName([NativeTypeName("LPOLESTR *")] char** ppszDisplayName)
        {
            return lpVtbl->GetSourceDisplayName((IOleLink*)Unsafe.AsPointer(ref this), ppszDisplayName);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int BindToSource([NativeTypeName("DWORD")] uint bindflags, IBindCtx* pbc)
        {
            return lpVtbl->BindToSource((IOleLink*)Unsafe.AsPointer(ref this), bindflags, pbc);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int BindIfRunning()
        {
            return lpVtbl->BindIfRunning((IOleLink*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetBoundSource(IUnknown** ppunk)
        {
            return lpVtbl->GetBoundSource((IOleLink*)Unsafe.AsPointer(ref this), ppunk);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int UnbindSource()
        {
            return lpVtbl->UnbindSource((IOleLink*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Update(IBindCtx* pbc)
        {
            return lpVtbl->Update((IOleLink*)Unsafe.AsPointer(ref this), pbc);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int SetUpdateOptions([NativeTypeName("DWORD")] uint dwUpdateOpt);

            [return: NativeTypeName("HRESULT")]
            int GetUpdateOptions([NativeTypeName("DWORD *")] uint* pdwUpdateOpt);

            [return: NativeTypeName("HRESULT")]
            int SetSourceMoniker(IMoniker* pmk, [NativeTypeName("const IID &")] Guid* rclsid);

            [return: NativeTypeName("HRESULT")]
            int GetSourceMoniker(IMoniker** ppmk);

            [return: NativeTypeName("HRESULT")]
            int SetSourceDisplayName([NativeTypeName("LPCOLESTR")] char* pszStatusText);

            [return: NativeTypeName("HRESULT")]
            int GetSourceDisplayName([NativeTypeName("LPOLESTR *")] char** ppszDisplayName);

            [return: NativeTypeName("HRESULT")]
            int BindToSource([NativeTypeName("DWORD")] uint bindflags, IBindCtx* pbc);

            [return: NativeTypeName("HRESULT")]
            int BindIfRunning();

            [return: NativeTypeName("HRESULT")]
            int GetBoundSource(IUnknown** ppunk);

            [return: NativeTypeName("HRESULT")]
            int UnbindSource();

            [return: NativeTypeName("HRESULT")]
            int Update(IBindCtx* pbc);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> SetUpdateOptions;

            [NativeTypeName("HRESULT (DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, int> GetUpdateOptions;

            [NativeTypeName("HRESULT (IMoniker *, const IID &) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IMoniker*, Guid*, int> SetSourceMoniker;

            [NativeTypeName("HRESULT (IMoniker **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IMoniker**, int> GetSourceMoniker;

            [NativeTypeName("HRESULT (LPCOLESTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, int> SetSourceDisplayName;

            [NativeTypeName("HRESULT (LPOLESTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char**, int> GetSourceDisplayName;

            [NativeTypeName("HRESULT (DWORD, IBindCtx *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, IBindCtx*, int> BindToSource;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> BindIfRunning;

            [NativeTypeName("HRESULT (IUnknown **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IUnknown**, int> GetBoundSource;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> UnbindSource;

            [NativeTypeName("HRESULT (IBindCtx *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IBindCtx*, int> Update;
        }
    }

    public enum tagBINDSPEED
    {
        BINDSPEED_INDEFINITE = 1,
        BINDSPEED_MODERATE = 2,
        BINDSPEED_IMMEDIATE = 3,
    }

    public enum tagOLECONTF
    {
        OLECONTF_EMBEDDINGS = 1,
        OLECONTF_LINKS = 2,
        OLECONTF_OTHERS = 4,
        OLECONTF_ONLYUSER = 8,
        OLECONTF_ONLYIFRUNNING = 16,
    }

    [Guid("0000011C-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IOleItemContainer : IOleContainer")]
    [NativeInheritance("IOleContainer")]
    public unsafe partial struct IOleItemContainer : IOleItemContainer.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IOleItemContainer));

        public Vtbl<IOleItemContainer>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IOleItemContainer*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IOleItemContainer*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IOleItemContainer*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ParseDisplayName(IBindCtx* pbc, [NativeTypeName("LPOLESTR")] char* pszDisplayName, [NativeTypeName("ULONG *")] uint* pchEaten, IMoniker** ppmkOut)
        {
            return lpVtbl->ParseDisplayName((IOleItemContainer*)Unsafe.AsPointer(ref this), pbc, pszDisplayName, pchEaten, ppmkOut);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int EnumObjects([NativeTypeName("DWORD")] uint grfFlags, IEnumUnknown** ppenum)
        {
            return lpVtbl->EnumObjects((IOleItemContainer*)Unsafe.AsPointer(ref this), grfFlags, ppenum);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int LockContainer([NativeTypeName("BOOL")] int fLock)
        {
            return lpVtbl->LockContainer((IOleItemContainer*)Unsafe.AsPointer(ref this), fLock);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetObjectA([NativeTypeName("LPOLESTR")] char* pszItem, [NativeTypeName("DWORD")] uint dwSpeedNeeded, IBindCtx* pbc, [NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->GetObjectA((IOleItemContainer*)Unsafe.AsPointer(ref this), pszItem, dwSpeedNeeded, pbc, riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetObjectStorage([NativeTypeName("LPOLESTR")] char* pszItem, IBindCtx* pbc, [NativeTypeName("const IID &")] Guid* riid, void** ppvStorage)
        {
            return lpVtbl->GetObjectStorage((IOleItemContainer*)Unsafe.AsPointer(ref this), pszItem, pbc, riid, ppvStorage);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int IsRunning([NativeTypeName("LPOLESTR")] char* pszItem)
        {
            return lpVtbl->IsRunning((IOleItemContainer*)Unsafe.AsPointer(ref this), pszItem);
        }

        public interface Interface : IOleContainer.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int GetObjectA([NativeTypeName("LPOLESTR")] char* pszItem, [NativeTypeName("DWORD")] uint dwSpeedNeeded, IBindCtx* pbc, [NativeTypeName("const IID &")] Guid* riid, void** ppvObject);

            [return: NativeTypeName("HRESULT")]
            int GetObjectStorage([NativeTypeName("LPOLESTR")] char* pszItem, IBindCtx* pbc, [NativeTypeName("const IID &")] Guid* riid, void** ppvStorage);

            [return: NativeTypeName("HRESULT")]
            int IsRunning([NativeTypeName("LPOLESTR")] char* pszItem);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (IBindCtx *, LPOLESTR, ULONG *, IMoniker **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IBindCtx*, char*, uint*, IMoniker**, int> ParseDisplayName;

            [NativeTypeName("HRESULT (DWORD, IEnumUnknown **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, IEnumUnknown**, int> EnumObjects;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> LockContainer;

            [NativeTypeName("HRESULT (LPOLESTR, DWORD, IBindCtx *, const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, uint, IBindCtx*, Guid*, void**, int> GetObjectA;

            [NativeTypeName("HRESULT (LPOLESTR, IBindCtx *, const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, IBindCtx*, Guid*, void**, int> GetObjectStorage;

            [NativeTypeName("HRESULT (LPOLESTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, int> IsRunning;
        }
    }

    [Guid("00000115-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IOleInPlaceUIWindow : IOleWindow")]
    [NativeInheritance("IOleWindow")]
    public unsafe partial struct IOleInPlaceUIWindow : IOleInPlaceUIWindow.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IOleInPlaceUIWindow));

        public Vtbl<IOleInPlaceUIWindow>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IOleInPlaceUIWindow*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IOleInPlaceUIWindow*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IOleInPlaceUIWindow*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetWindow([NativeTypeName("HWND *")] nint** phwnd)
        {
            return lpVtbl->GetWindow((IOleInPlaceUIWindow*)Unsafe.AsPointer(ref this), phwnd);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ContextSensitiveHelp([NativeTypeName("BOOL")] int fEnterMode)
        {
            return lpVtbl->ContextSensitiveHelp((IOleInPlaceUIWindow*)Unsafe.AsPointer(ref this), fEnterMode);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetBorder([NativeTypeName("LPRECT")] RECT* lprectBorder)
        {
            return lpVtbl->GetBorder((IOleInPlaceUIWindow*)Unsafe.AsPointer(ref this), lprectBorder);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int RequestBorderSpace([NativeTypeName("LPCBORDERWIDTHS")] RECT* pborderwidths)
        {
            return lpVtbl->RequestBorderSpace((IOleInPlaceUIWindow*)Unsafe.AsPointer(ref this), pborderwidths);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetBorderSpace([NativeTypeName("LPCBORDERWIDTHS")] RECT* pborderwidths)
        {
            return lpVtbl->SetBorderSpace((IOleInPlaceUIWindow*)Unsafe.AsPointer(ref this), pborderwidths);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetActiveObject(IOleInPlaceActiveObject* pActiveObject, [NativeTypeName("LPCOLESTR")] char* pszObjName)
        {
            return lpVtbl->SetActiveObject((IOleInPlaceUIWindow*)Unsafe.AsPointer(ref this), pActiveObject, pszObjName);
        }

        public interface Interface : IOleWindow.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int GetBorder([NativeTypeName("LPRECT")] RECT* lprectBorder);

            [return: NativeTypeName("HRESULT")]
            int RequestBorderSpace([NativeTypeName("LPCBORDERWIDTHS")] RECT* pborderwidths);

            [return: NativeTypeName("HRESULT")]
            int SetBorderSpace([NativeTypeName("LPCBORDERWIDTHS")] RECT* pborderwidths);

            [return: NativeTypeName("HRESULT")]
            int SetActiveObject(IOleInPlaceActiveObject* pActiveObject, [NativeTypeName("LPCOLESTR")] char* pszObjName);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (HWND *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, nint**, int> GetWindow;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> ContextSensitiveHelp;

            [NativeTypeName("HRESULT (LPRECT) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, RECT*, int> GetBorder;

            [NativeTypeName("HRESULT (LPCBORDERWIDTHS) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, RECT*, int> RequestBorderSpace;

            [NativeTypeName("HRESULT (LPCBORDERWIDTHS) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, RECT*, int> SetBorderSpace;

            [NativeTypeName("HRESULT (IOleInPlaceActiveObject *, LPCOLESTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IOleInPlaceActiveObject*, char*, int> SetActiveObject;
        }
    }

    [Guid("00000117-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IOleInPlaceActiveObject : IOleWindow")]
    [NativeInheritance("IOleWindow")]
    public unsafe partial struct IOleInPlaceActiveObject : IOleInPlaceActiveObject.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IOleInPlaceActiveObject));

        public Vtbl<IOleInPlaceActiveObject>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IOleInPlaceActiveObject*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IOleInPlaceActiveObject*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IOleInPlaceActiveObject*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetWindow([NativeTypeName("HWND *")] nint** phwnd)
        {
            return lpVtbl->GetWindow((IOleInPlaceActiveObject*)Unsafe.AsPointer(ref this), phwnd);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ContextSensitiveHelp([NativeTypeName("BOOL")] int fEnterMode)
        {
            return lpVtbl->ContextSensitiveHelp((IOleInPlaceActiveObject*)Unsafe.AsPointer(ref this), fEnterMode);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int TranslateAcceleratorA([NativeTypeName("LPMSG")] MSG* lpmsg)
        {
            return lpVtbl->TranslateAcceleratorA((IOleInPlaceActiveObject*)Unsafe.AsPointer(ref this), lpmsg);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnFrameWindowActivate([NativeTypeName("BOOL")] int fActivate)
        {
            return lpVtbl->OnFrameWindowActivate((IOleInPlaceActiveObject*)Unsafe.AsPointer(ref this), fActivate);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnDocWindowActivate([NativeTypeName("BOOL")] int fActivate)
        {
            return lpVtbl->OnDocWindowActivate((IOleInPlaceActiveObject*)Unsafe.AsPointer(ref this), fActivate);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ResizeBorder([NativeTypeName("LPCRECT")] RECT* prcBorder, IOleInPlaceUIWindow* pUIWindow, [NativeTypeName("BOOL")] int fFrameWindow)
        {
            return lpVtbl->ResizeBorder((IOleInPlaceActiveObject*)Unsafe.AsPointer(ref this), prcBorder, pUIWindow, fFrameWindow);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int EnableModeless([NativeTypeName("BOOL")] int fEnable)
        {
            return lpVtbl->EnableModeless((IOleInPlaceActiveObject*)Unsafe.AsPointer(ref this), fEnable);
        }

        public interface Interface : IOleWindow.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int TranslateAcceleratorA([NativeTypeName("LPMSG")] MSG* lpmsg);

            [return: NativeTypeName("HRESULT")]
            int OnFrameWindowActivate([NativeTypeName("BOOL")] int fActivate);

            [return: NativeTypeName("HRESULT")]
            int OnDocWindowActivate([NativeTypeName("BOOL")] int fActivate);

            [return: NativeTypeName("HRESULT")]
            int ResizeBorder([NativeTypeName("LPCRECT")] RECT* prcBorder, IOleInPlaceUIWindow* pUIWindow, [NativeTypeName("BOOL")] int fFrameWindow);

            [return: NativeTypeName("HRESULT")]
            int EnableModeless([NativeTypeName("BOOL")] int fEnable);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (HWND *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, nint**, int> GetWindow;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> ContextSensitiveHelp;

            [NativeTypeName("HRESULT (LPMSG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, MSG*, int> TranslateAcceleratorA;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> OnFrameWindowActivate;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> OnDocWindowActivate;

            [NativeTypeName("HRESULT (LPCRECT, IOleInPlaceUIWindow *, BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, RECT*, IOleInPlaceUIWindow*, int, int> ResizeBorder;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> EnableModeless;
        }
    }

    public unsafe partial struct tagOIFI
    {
        public uint cb;

        [NativeTypeName("BOOL")]
        public int fMDIApp;

        [NativeTypeName("HWND")]
        public nint* hwndFrame;

        [NativeTypeName("HACCEL")]
        public nint* haccel;

        public uint cAccelEntries;
    }

    public partial struct tagOleMenuGroupWidths
    {
        [NativeTypeName("LONG[6]")]
        public _width_e__FixedBuffer width;

        [InlineArray(6)]
        public partial struct _width_e__FixedBuffer
        {
            public int e0;
        }
    }

    [Guid("00000116-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IOleInPlaceFrame : IOleInPlaceUIWindow")]
    [NativeInheritance("IOleInPlaceUIWindow")]
    public unsafe partial struct IOleInPlaceFrame : IOleInPlaceFrame.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IOleInPlaceFrame));

        public Vtbl<IOleInPlaceFrame>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IOleInPlaceFrame*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IOleInPlaceFrame*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IOleInPlaceFrame*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetWindow([NativeTypeName("HWND *")] nint** phwnd)
        {
            return lpVtbl->GetWindow((IOleInPlaceFrame*)Unsafe.AsPointer(ref this), phwnd);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ContextSensitiveHelp([NativeTypeName("BOOL")] int fEnterMode)
        {
            return lpVtbl->ContextSensitiveHelp((IOleInPlaceFrame*)Unsafe.AsPointer(ref this), fEnterMode);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetBorder([NativeTypeName("LPRECT")] RECT* lprectBorder)
        {
            return lpVtbl->GetBorder((IOleInPlaceFrame*)Unsafe.AsPointer(ref this), lprectBorder);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int RequestBorderSpace([NativeTypeName("LPCBORDERWIDTHS")] RECT* pborderwidths)
        {
            return lpVtbl->RequestBorderSpace((IOleInPlaceFrame*)Unsafe.AsPointer(ref this), pborderwidths);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetBorderSpace([NativeTypeName("LPCBORDERWIDTHS")] RECT* pborderwidths)
        {
            return lpVtbl->SetBorderSpace((IOleInPlaceFrame*)Unsafe.AsPointer(ref this), pborderwidths);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetActiveObject(IOleInPlaceActiveObject* pActiveObject, [NativeTypeName("LPCOLESTR")] char* pszObjName)
        {
            return lpVtbl->SetActiveObject((IOleInPlaceFrame*)Unsafe.AsPointer(ref this), pActiveObject, pszObjName);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int InsertMenus([NativeTypeName("HMENU")] nint* hmenuShared, [NativeTypeName("LPOLEMENUGROUPWIDTHS")] tagOleMenuGroupWidths* lpMenuWidths)
        {
            return lpVtbl->InsertMenus((IOleInPlaceFrame*)Unsafe.AsPointer(ref this), hmenuShared, lpMenuWidths);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetMenu([NativeTypeName("HMENU")] nint* hmenuShared, [NativeTypeName("HOLEMENU")] void* holemenu, [NativeTypeName("HWND")] nint* hwndActiveObject)
        {
            return lpVtbl->SetMenu((IOleInPlaceFrame*)Unsafe.AsPointer(ref this), hmenuShared, holemenu, hwndActiveObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int RemoveMenus([NativeTypeName("HMENU")] nint* hmenuShared)
        {
            return lpVtbl->RemoveMenus((IOleInPlaceFrame*)Unsafe.AsPointer(ref this), hmenuShared);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetStatusText([NativeTypeName("LPCOLESTR")] char* pszStatusText)
        {
            return lpVtbl->SetStatusText((IOleInPlaceFrame*)Unsafe.AsPointer(ref this), pszStatusText);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int EnableModeless([NativeTypeName("BOOL")] int fEnable)
        {
            return lpVtbl->EnableModeless((IOleInPlaceFrame*)Unsafe.AsPointer(ref this), fEnable);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int TranslateAcceleratorA([NativeTypeName("LPMSG")] MSG* lpmsg, [NativeTypeName("WORD")] ushort wID)
        {
            return lpVtbl->TranslateAcceleratorA((IOleInPlaceFrame*)Unsafe.AsPointer(ref this), lpmsg, wID);
        }

        public interface Interface : IOleInPlaceUIWindow.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int InsertMenus([NativeTypeName("HMENU")] nint* hmenuShared, [NativeTypeName("LPOLEMENUGROUPWIDTHS")] tagOleMenuGroupWidths* lpMenuWidths);

            [return: NativeTypeName("HRESULT")]
            int SetMenu([NativeTypeName("HMENU")] nint* hmenuShared, [NativeTypeName("HOLEMENU")] void* holemenu, [NativeTypeName("HWND")] nint* hwndActiveObject);

            [return: NativeTypeName("HRESULT")]
            int RemoveMenus([NativeTypeName("HMENU")] nint* hmenuShared);

            [return: NativeTypeName("HRESULT")]
            int SetStatusText([NativeTypeName("LPCOLESTR")] char* pszStatusText);

            [return: NativeTypeName("HRESULT")]
            int EnableModeless([NativeTypeName("BOOL")] int fEnable);

            [return: NativeTypeName("HRESULT")]
            int TranslateAcceleratorA([NativeTypeName("LPMSG")] MSG* lpmsg, [NativeTypeName("WORD")] ushort wID);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (HWND *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, nint**, int> GetWindow;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> ContextSensitiveHelp;

            [NativeTypeName("HRESULT (LPRECT) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, RECT*, int> GetBorder;

            [NativeTypeName("HRESULT (LPCBORDERWIDTHS) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, RECT*, int> RequestBorderSpace;

            [NativeTypeName("HRESULT (LPCBORDERWIDTHS) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, RECT*, int> SetBorderSpace;

            [NativeTypeName("HRESULT (IOleInPlaceActiveObject *, LPCOLESTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IOleInPlaceActiveObject*, char*, int> SetActiveObject;

            [NativeTypeName("HRESULT (HMENU, LPOLEMENUGROUPWIDTHS) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, nint*, tagOleMenuGroupWidths*, int> InsertMenus;

            [NativeTypeName("HRESULT (HMENU, HOLEMENU, HWND) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, nint*, void*, nint*, int> SetMenu;

            [NativeTypeName("HRESULT (HMENU) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, nint*, int> RemoveMenus;

            [NativeTypeName("HRESULT (LPCOLESTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, int> SetStatusText;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> EnableModeless;

            [NativeTypeName("HRESULT (LPMSG, WORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, MSG*, ushort, int> TranslateAcceleratorA;
        }
    }

    [Guid("00000113-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IOleInPlaceObject : IOleWindow")]
    [NativeInheritance("IOleWindow")]
    public unsafe partial struct IOleInPlaceObject : IOleInPlaceObject.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IOleInPlaceObject));

        public Vtbl<IOleInPlaceObject>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IOleInPlaceObject*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IOleInPlaceObject*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IOleInPlaceObject*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetWindow([NativeTypeName("HWND *")] nint** phwnd)
        {
            return lpVtbl->GetWindow((IOleInPlaceObject*)Unsafe.AsPointer(ref this), phwnd);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ContextSensitiveHelp([NativeTypeName("BOOL")] int fEnterMode)
        {
            return lpVtbl->ContextSensitiveHelp((IOleInPlaceObject*)Unsafe.AsPointer(ref this), fEnterMode);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int InPlaceDeactivate()
        {
            return lpVtbl->InPlaceDeactivate((IOleInPlaceObject*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int UIDeactivate()
        {
            return lpVtbl->UIDeactivate((IOleInPlaceObject*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetObjectRects([NativeTypeName("LPCRECT")] RECT* lprcPosRect, [NativeTypeName("LPCRECT")] RECT* lprcClipRect)
        {
            return lpVtbl->SetObjectRects((IOleInPlaceObject*)Unsafe.AsPointer(ref this), lprcPosRect, lprcClipRect);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ReactivateAndUndo()
        {
            return lpVtbl->ReactivateAndUndo((IOleInPlaceObject*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IOleWindow.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int InPlaceDeactivate();

            [return: NativeTypeName("HRESULT")]
            int UIDeactivate();

            [return: NativeTypeName("HRESULT")]
            int SetObjectRects([NativeTypeName("LPCRECT")] RECT* lprcPosRect, [NativeTypeName("LPCRECT")] RECT* lprcClipRect);

            [return: NativeTypeName("HRESULT")]
            int ReactivateAndUndo();
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (HWND *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, nint**, int> GetWindow;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> ContextSensitiveHelp;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> InPlaceDeactivate;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> UIDeactivate;

            [NativeTypeName("HRESULT (LPCRECT, LPCRECT) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, RECT*, RECT*, int> SetObjectRects;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> ReactivateAndUndo;
        }
    }

    [Guid("00000119-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IOleInPlaceSite : IOleWindow")]
    [NativeInheritance("IOleWindow")]
    public unsafe partial struct IOleInPlaceSite : IOleInPlaceSite.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IOleInPlaceSite));

        public Vtbl<IOleInPlaceSite>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IOleInPlaceSite*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IOleInPlaceSite*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IOleInPlaceSite*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetWindow([NativeTypeName("HWND *")] nint** phwnd)
        {
            return lpVtbl->GetWindow((IOleInPlaceSite*)Unsafe.AsPointer(ref this), phwnd);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ContextSensitiveHelp([NativeTypeName("BOOL")] int fEnterMode)
        {
            return lpVtbl->ContextSensitiveHelp((IOleInPlaceSite*)Unsafe.AsPointer(ref this), fEnterMode);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int CanInPlaceActivate()
        {
            return lpVtbl->CanInPlaceActivate((IOleInPlaceSite*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnInPlaceActivate()
        {
            return lpVtbl->OnInPlaceActivate((IOleInPlaceSite*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnUIActivate()
        {
            return lpVtbl->OnUIActivate((IOleInPlaceSite*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetWindowContext(IOleInPlaceFrame** ppFrame, IOleInPlaceUIWindow** ppDoc, [NativeTypeName("LPRECT")] RECT* lprcPosRect, [NativeTypeName("LPRECT")] RECT* lprcClipRect, [NativeTypeName("LPOLEINPLACEFRAMEINFO")] tagOIFI* lpFrameInfo)
        {
            return lpVtbl->GetWindowContext((IOleInPlaceSite*)Unsafe.AsPointer(ref this), ppFrame, ppDoc, lprcPosRect, lprcClipRect, lpFrameInfo);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Scroll(SIZE scrollExtant)
        {
            return lpVtbl->Scroll((IOleInPlaceSite*)Unsafe.AsPointer(ref this), scrollExtant);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnUIDeactivate([NativeTypeName("BOOL")] int fUndoable)
        {
            return lpVtbl->OnUIDeactivate((IOleInPlaceSite*)Unsafe.AsPointer(ref this), fUndoable);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnInPlaceDeactivate()
        {
            return lpVtbl->OnInPlaceDeactivate((IOleInPlaceSite*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int DiscardUndoState()
        {
            return lpVtbl->DiscardUndoState((IOleInPlaceSite*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int DeactivateAndUndo()
        {
            return lpVtbl->DeactivateAndUndo((IOleInPlaceSite*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnPosRectChange([NativeTypeName("LPCRECT")] RECT* lprcPosRect)
        {
            return lpVtbl->OnPosRectChange((IOleInPlaceSite*)Unsafe.AsPointer(ref this), lprcPosRect);
        }

        public interface Interface : IOleWindow.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int CanInPlaceActivate();

            [return: NativeTypeName("HRESULT")]
            int OnInPlaceActivate();

            [return: NativeTypeName("HRESULT")]
            int OnUIActivate();

            [return: NativeTypeName("HRESULT")]
            int GetWindowContext(IOleInPlaceFrame** ppFrame, IOleInPlaceUIWindow** ppDoc, [NativeTypeName("LPRECT")] RECT* lprcPosRect, [NativeTypeName("LPRECT")] RECT* lprcClipRect, [NativeTypeName("LPOLEINPLACEFRAMEINFO")] tagOIFI* lpFrameInfo);

            [return: NativeTypeName("HRESULT")]
            int Scroll(SIZE scrollExtant);

            [return: NativeTypeName("HRESULT")]
            int OnUIDeactivate([NativeTypeName("BOOL")] int fUndoable);

            [return: NativeTypeName("HRESULT")]
            int OnInPlaceDeactivate();

            [return: NativeTypeName("HRESULT")]
            int DiscardUndoState();

            [return: NativeTypeName("HRESULT")]
            int DeactivateAndUndo();

            [return: NativeTypeName("HRESULT")]
            int OnPosRectChange([NativeTypeName("LPCRECT")] RECT* lprcPosRect);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (HWND *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, nint**, int> GetWindow;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> ContextSensitiveHelp;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> CanInPlaceActivate;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> OnInPlaceActivate;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> OnUIActivate;

            [NativeTypeName("HRESULT (IOleInPlaceFrame **, IOleInPlaceUIWindow **, LPRECT, LPRECT, LPOLEINPLACEFRAMEINFO) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IOleInPlaceFrame**, IOleInPlaceUIWindow**, RECT*, RECT*, tagOIFI*, int> GetWindowContext;

            [NativeTypeName("HRESULT (SIZE) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, SIZE, int> Scroll;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> OnUIDeactivate;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> OnInPlaceDeactivate;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> DiscardUndoState;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> DeactivateAndUndo;

            [NativeTypeName("HRESULT (LPCRECT) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, RECT*, int> OnPosRectChange;
        }
    }

    [Guid("0000012A-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IContinue : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IContinue : IContinue.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IContinue));

        public Vtbl<IContinue>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IContinue*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IContinue*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IContinue*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int FContinue()
        {
            return lpVtbl->FContinue((IContinue*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int FContinue();
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> FContinue;
        }
    }

    [Guid("0000010D-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IViewObject : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IViewObject : IViewObject.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IViewObject));

        public Vtbl<IViewObject>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IViewObject*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IViewObject*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IViewObject*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Draw([NativeTypeName("DWORD")] uint dwDrawAspect, [NativeTypeName("LONG")] int lindex, void* pvAspect, [NativeTypeName("DVTARGETDEVICE *")] tagDVTARGETDEVICE* ptd, [NativeTypeName("HDC")] nint* hdcTargetDev, [NativeTypeName("HDC")] nint* hdcDraw, [NativeTypeName("LPCRECTL")] RECTL* lprcBounds, [NativeTypeName("LPCRECTL")] RECTL* lprcWBounds, [NativeTypeName("BOOL (*)(ULONG_PTR) __attribute__((stdcall))")] delegate* unmanaged[Stdcall]<ulong, int> pfnContinue, [NativeTypeName("ULONG_PTR")] ulong dwContinue)
        {
            return lpVtbl->Draw((IViewObject*)Unsafe.AsPointer(ref this), dwDrawAspect, lindex, pvAspect, ptd, hdcTargetDev, hdcDraw, lprcBounds, lprcWBounds, pfnContinue, dwContinue);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetColorSet([NativeTypeName("DWORD")] uint dwDrawAspect, [NativeTypeName("LONG")] int lindex, void* pvAspect, [NativeTypeName("DVTARGETDEVICE *")] tagDVTARGETDEVICE* ptd, [NativeTypeName("HDC")] nint* hicTargetDev, [NativeTypeName("LOGPALETTE **")] tagLOGPALETTE** ppColorSet)
        {
            return lpVtbl->GetColorSet((IViewObject*)Unsafe.AsPointer(ref this), dwDrawAspect, lindex, pvAspect, ptd, hicTargetDev, ppColorSet);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Freeze([NativeTypeName("DWORD")] uint dwDrawAspect, [NativeTypeName("LONG")] int lindex, void* pvAspect, [NativeTypeName("DWORD *")] uint* pdwFreeze)
        {
            return lpVtbl->Freeze((IViewObject*)Unsafe.AsPointer(ref this), dwDrawAspect, lindex, pvAspect, pdwFreeze);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Unfreeze([NativeTypeName("DWORD")] uint dwFreeze)
        {
            return lpVtbl->Unfreeze((IViewObject*)Unsafe.AsPointer(ref this), dwFreeze);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetAdvise([NativeTypeName("DWORD")] uint aspects, [NativeTypeName("DWORD")] uint advf, IAdviseSink* pAdvSink)
        {
            return lpVtbl->SetAdvise((IViewObject*)Unsafe.AsPointer(ref this), aspects, advf, pAdvSink);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetAdvise([NativeTypeName("DWORD *")] uint* pAspects, [NativeTypeName("DWORD *")] uint* pAdvf, IAdviseSink** ppAdvSink)
        {
            return lpVtbl->GetAdvise((IViewObject*)Unsafe.AsPointer(ref this), pAspects, pAdvf, ppAdvSink);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Draw([NativeTypeName("DWORD")] uint dwDrawAspect, [NativeTypeName("LONG")] int lindex, void* pvAspect, [NativeTypeName("DVTARGETDEVICE *")] tagDVTARGETDEVICE* ptd, [NativeTypeName("HDC")] nint* hdcTargetDev, [NativeTypeName("HDC")] nint* hdcDraw, [NativeTypeName("LPCRECTL")] RECTL* lprcBounds, [NativeTypeName("LPCRECTL")] RECTL* lprcWBounds, [NativeTypeName("BOOL (*)(ULONG_PTR) __attribute__((stdcall))")] delegate* unmanaged[Stdcall]<ulong, int> pfnContinue, [NativeTypeName("ULONG_PTR")] ulong dwContinue);

            [return: NativeTypeName("HRESULT")]
            int GetColorSet([NativeTypeName("DWORD")] uint dwDrawAspect, [NativeTypeName("LONG")] int lindex, void* pvAspect, [NativeTypeName("DVTARGETDEVICE *")] tagDVTARGETDEVICE* ptd, [NativeTypeName("HDC")] nint* hicTargetDev, [NativeTypeName("LOGPALETTE **")] tagLOGPALETTE** ppColorSet);

            [return: NativeTypeName("HRESULT")]
            int Freeze([NativeTypeName("DWORD")] uint dwDrawAspect, [NativeTypeName("LONG")] int lindex, void* pvAspect, [NativeTypeName("DWORD *")] uint* pdwFreeze);

            [return: NativeTypeName("HRESULT")]
            int Unfreeze([NativeTypeName("DWORD")] uint dwFreeze);

            [return: NativeTypeName("HRESULT")]
            int SetAdvise([NativeTypeName("DWORD")] uint aspects, [NativeTypeName("DWORD")] uint advf, IAdviseSink* pAdvSink);

            [return: NativeTypeName("HRESULT")]
            int GetAdvise([NativeTypeName("DWORD *")] uint* pAspects, [NativeTypeName("DWORD *")] uint* pAdvf, IAdviseSink** ppAdvSink);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (DWORD, LONG, void *, DVTARGETDEVICE *, HDC, HDC, LPCRECTL, LPCRECTL, BOOL (*)(ULONG_PTR) __attribute__((stdcall)), ULONG_PTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int, void*, tagDVTARGETDEVICE*, nint*, nint*, RECTL*, RECTL*, delegate* unmanaged[Stdcall]<ulong, int>, ulong, int> Draw;

            [NativeTypeName("HRESULT (DWORD, LONG, void *, DVTARGETDEVICE *, HDC, LOGPALETTE **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int, void*, tagDVTARGETDEVICE*, nint*, tagLOGPALETTE**, int> GetColorSet;

            [NativeTypeName("HRESULT (DWORD, LONG, void *, DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int, void*, uint*, int> Freeze;

            [NativeTypeName("HRESULT (DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> Unfreeze;

            [NativeTypeName("HRESULT (DWORD, DWORD, IAdviseSink *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint, IAdviseSink*, int> SetAdvise;

            [NativeTypeName("HRESULT (DWORD *, DWORD *, IAdviseSink **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, uint*, IAdviseSink**, int> GetAdvise;
        }
    }

    [Guid("00000127-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IViewObject2 : IViewObject")]
    [NativeInheritance("IViewObject")]
    public unsafe partial struct IViewObject2 : IViewObject2.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IViewObject2));

        public Vtbl<IViewObject2>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IViewObject2*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IViewObject2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IViewObject2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Draw([NativeTypeName("DWORD")] uint dwDrawAspect, [NativeTypeName("LONG")] int lindex, void* pvAspect, [NativeTypeName("DVTARGETDEVICE *")] tagDVTARGETDEVICE* ptd, [NativeTypeName("HDC")] nint* hdcTargetDev, [NativeTypeName("HDC")] nint* hdcDraw, [NativeTypeName("LPCRECTL")] RECTL* lprcBounds, [NativeTypeName("LPCRECTL")] RECTL* lprcWBounds, [NativeTypeName("BOOL (*)(ULONG_PTR) __attribute__((stdcall))")] delegate* unmanaged[Stdcall]<ulong, int> pfnContinue, [NativeTypeName("ULONG_PTR")] ulong dwContinue)
        {
            return lpVtbl->Draw((IViewObject2*)Unsafe.AsPointer(ref this), dwDrawAspect, lindex, pvAspect, ptd, hdcTargetDev, hdcDraw, lprcBounds, lprcWBounds, pfnContinue, dwContinue);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetColorSet([NativeTypeName("DWORD")] uint dwDrawAspect, [NativeTypeName("LONG")] int lindex, void* pvAspect, [NativeTypeName("DVTARGETDEVICE *")] tagDVTARGETDEVICE* ptd, [NativeTypeName("HDC")] nint* hicTargetDev, [NativeTypeName("LOGPALETTE **")] tagLOGPALETTE** ppColorSet)
        {
            return lpVtbl->GetColorSet((IViewObject2*)Unsafe.AsPointer(ref this), dwDrawAspect, lindex, pvAspect, ptd, hicTargetDev, ppColorSet);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Freeze([NativeTypeName("DWORD")] uint dwDrawAspect, [NativeTypeName("LONG")] int lindex, void* pvAspect, [NativeTypeName("DWORD *")] uint* pdwFreeze)
        {
            return lpVtbl->Freeze((IViewObject2*)Unsafe.AsPointer(ref this), dwDrawAspect, lindex, pvAspect, pdwFreeze);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Unfreeze([NativeTypeName("DWORD")] uint dwFreeze)
        {
            return lpVtbl->Unfreeze((IViewObject2*)Unsafe.AsPointer(ref this), dwFreeze);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetAdvise([NativeTypeName("DWORD")] uint aspects, [NativeTypeName("DWORD")] uint advf, IAdviseSink* pAdvSink)
        {
            return lpVtbl->SetAdvise((IViewObject2*)Unsafe.AsPointer(ref this), aspects, advf, pAdvSink);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetAdvise([NativeTypeName("DWORD *")] uint* pAspects, [NativeTypeName("DWORD *")] uint* pAdvf, IAdviseSink** ppAdvSink)
        {
            return lpVtbl->GetAdvise((IViewObject2*)Unsafe.AsPointer(ref this), pAspects, pAdvf, ppAdvSink);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetExtent([NativeTypeName("DWORD")] uint dwDrawAspect, [NativeTypeName("LONG")] int lindex, [NativeTypeName("DVTARGETDEVICE *")] tagDVTARGETDEVICE* ptd, [NativeTypeName("LPSIZEL")] SIZE* lpsizel)
        {
            return lpVtbl->GetExtent((IViewObject2*)Unsafe.AsPointer(ref this), dwDrawAspect, lindex, ptd, lpsizel);
        }

        public interface Interface : IViewObject.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int GetExtent([NativeTypeName("DWORD")] uint dwDrawAspect, [NativeTypeName("LONG")] int lindex, [NativeTypeName("DVTARGETDEVICE *")] tagDVTARGETDEVICE* ptd, [NativeTypeName("LPSIZEL")] SIZE* lpsizel);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (DWORD, LONG, void *, DVTARGETDEVICE *, HDC, HDC, LPCRECTL, LPCRECTL, BOOL (*)(ULONG_PTR) __attribute__((stdcall)), ULONG_PTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int, void*, tagDVTARGETDEVICE*, nint*, nint*, RECTL*, RECTL*, delegate* unmanaged[Stdcall]<ulong, int>, ulong, int> Draw;

            [NativeTypeName("HRESULT (DWORD, LONG, void *, DVTARGETDEVICE *, HDC, LOGPALETTE **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int, void*, tagDVTARGETDEVICE*, nint*, tagLOGPALETTE**, int> GetColorSet;

            [NativeTypeName("HRESULT (DWORD, LONG, void *, DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int, void*, uint*, int> Freeze;

            [NativeTypeName("HRESULT (DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> Unfreeze;

            [NativeTypeName("HRESULT (DWORD, DWORD, IAdviseSink *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint, IAdviseSink*, int> SetAdvise;

            [NativeTypeName("HRESULT (DWORD *, DWORD *, IAdviseSink **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, uint*, IAdviseSink**, int> GetAdvise;

            [NativeTypeName("HRESULT (DWORD, LONG, DVTARGETDEVICE *, LPSIZEL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int, tagDVTARGETDEVICE*, SIZE*, int> GetExtent;
        }
    }

    [Guid("00000121-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IDropSource : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IDropSource : IDropSource.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDropSource));

        public Vtbl<IDropSource>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IDropSource*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IDropSource*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IDropSource*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryContinueDrag([NativeTypeName("BOOL")] int fEscapePressed, [NativeTypeName("DWORD")] uint grfKeyState)
        {
            return lpVtbl->QueryContinueDrag((IDropSource*)Unsafe.AsPointer(ref this), fEscapePressed, grfKeyState);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GiveFeedback([NativeTypeName("DWORD")] uint dwEffect)
        {
            return lpVtbl->GiveFeedback((IDropSource*)Unsafe.AsPointer(ref this), dwEffect);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int QueryContinueDrag([NativeTypeName("BOOL")] int fEscapePressed, [NativeTypeName("DWORD")] uint grfKeyState);

            [return: NativeTypeName("HRESULT")]
            int GiveFeedback([NativeTypeName("DWORD")] uint dwEffect);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (BOOL, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, uint, int> QueryContinueDrag;

            [NativeTypeName("HRESULT (DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> GiveFeedback;
        }
    }

    [Guid("00000122-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IDropTarget : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IDropTarget : IDropTarget.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDropTarget));

        public Vtbl<IDropTarget>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IDropTarget*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IDropTarget*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IDropTarget*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int DragEnter(IDataObject* pDataObj, [NativeTypeName("DWORD")] uint grfKeyState, [NativeTypeName("POINTL")] _POINTL pt, [NativeTypeName("DWORD *")] uint* pdwEffect)
        {
            return lpVtbl->DragEnter((IDropTarget*)Unsafe.AsPointer(ref this), pDataObj, grfKeyState, pt, pdwEffect);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int DragOver([NativeTypeName("DWORD")] uint grfKeyState, [NativeTypeName("POINTL")] _POINTL pt, [NativeTypeName("DWORD *")] uint* pdwEffect)
        {
            return lpVtbl->DragOver((IDropTarget*)Unsafe.AsPointer(ref this), grfKeyState, pt, pdwEffect);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int DragLeave()
        {
            return lpVtbl->DragLeave((IDropTarget*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Drop(IDataObject* pDataObj, [NativeTypeName("DWORD")] uint grfKeyState, [NativeTypeName("POINTL")] _POINTL pt, [NativeTypeName("DWORD *")] uint* pdwEffect)
        {
            return lpVtbl->Drop((IDropTarget*)Unsafe.AsPointer(ref this), pDataObj, grfKeyState, pt, pdwEffect);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int DragEnter(IDataObject* pDataObj, [NativeTypeName("DWORD")] uint grfKeyState, [NativeTypeName("POINTL")] _POINTL pt, [NativeTypeName("DWORD *")] uint* pdwEffect);

            [return: NativeTypeName("HRESULT")]
            int DragOver([NativeTypeName("DWORD")] uint grfKeyState, [NativeTypeName("POINTL")] _POINTL pt, [NativeTypeName("DWORD *")] uint* pdwEffect);

            [return: NativeTypeName("HRESULT")]
            int DragLeave();

            [return: NativeTypeName("HRESULT")]
            int Drop(IDataObject* pDataObj, [NativeTypeName("DWORD")] uint grfKeyState, [NativeTypeName("POINTL")] _POINTL pt, [NativeTypeName("DWORD *")] uint* pdwEffect);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (IDataObject *, DWORD, POINTL, DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IDataObject*, uint, _POINTL, uint*, int> DragEnter;

            [NativeTypeName("HRESULT (DWORD, POINTL, DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, _POINTL, uint*, int> DragOver;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> DragLeave;

            [NativeTypeName("HRESULT (IDataObject *, DWORD, POINTL, DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IDataObject*, uint, _POINTL, uint*, int> Drop;
        }
    }

    [Guid("0000012B-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IDropSourceNotify : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IDropSourceNotify : IDropSourceNotify.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDropSourceNotify));

        public Vtbl<IDropSourceNotify>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IDropSourceNotify*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IDropSourceNotify*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IDropSourceNotify*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int DragEnterTarget([NativeTypeName("HWND")] nint* hwndTarget)
        {
            return lpVtbl->DragEnterTarget((IDropSourceNotify*)Unsafe.AsPointer(ref this), hwndTarget);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int DragLeaveTarget()
        {
            return lpVtbl->DragLeaveTarget((IDropSourceNotify*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int DragEnterTarget([NativeTypeName("HWND")] nint* hwndTarget);

            [return: NativeTypeName("HRESULT")]
            int DragLeaveTarget();
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (HWND) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, nint*, int> DragEnterTarget;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> DragLeaveTarget;
        }
    }

    [Guid("390E3878-FD55-4E18-819D-4682081C0CFD")]
    [NativeTypeName("struct IEnterpriseDropTarget : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IEnterpriseDropTarget : IEnterpriseDropTarget.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IEnterpriseDropTarget));

        public Vtbl<IEnterpriseDropTarget>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IEnterpriseDropTarget*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IEnterpriseDropTarget*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IEnterpriseDropTarget*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetDropSourceEnterpriseId([NativeTypeName("LPCWSTR")] char* identity)
        {
            return lpVtbl->SetDropSourceEnterpriseId((IEnterpriseDropTarget*)Unsafe.AsPointer(ref this), identity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int IsEvaluatingEdpPolicy([NativeTypeName("BOOL *")] int* value)
        {
            return lpVtbl->IsEvaluatingEdpPolicy((IEnterpriseDropTarget*)Unsafe.AsPointer(ref this), value);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int SetDropSourceEnterpriseId([NativeTypeName("LPCWSTR")] char* identity);

            [return: NativeTypeName("HRESULT")]
            int IsEvaluatingEdpPolicy([NativeTypeName("BOOL *")] int* value);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (LPCWSTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, int> SetDropSourceEnterpriseId;

            [NativeTypeName("HRESULT (BOOL *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int*, int> IsEvaluatingEdpPolicy;
        }
    }

    public unsafe partial struct tagOLEVERB
    {
        [NativeTypeName("LONG")]
        public int lVerb;

        [NativeTypeName("LPOLESTR")]
        public char* lpszVerbName;

        [NativeTypeName("DWORD")]
        public uint fuFlags;

        [NativeTypeName("DWORD")]
        public uint grfAttribs;
    }

    public enum tagOLEVERBATTRIB
    {
        OLEVERBATTRIB_NEVERDIRTIES = 1,
        OLEVERBATTRIB_ONCONTAINERMENU = 2,
    }

    [Guid("00000104-0000-0000-C000-000000000046")]
    [NativeTypeName("struct IEnumOLEVERB : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IEnumOLEVERB : IEnumOLEVERB.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IEnumOLEVERB));

        public Vtbl<IEnumOLEVERB>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IEnumOLEVERB*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IEnumOLEVERB*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IEnumOLEVERB*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Next([NativeTypeName("ULONG")] uint celt, [NativeTypeName("LPOLEVERB")] tagOLEVERB* rgelt, [NativeTypeName("ULONG *")] uint* pceltFetched)
        {
            return lpVtbl->Next((IEnumOLEVERB*)Unsafe.AsPointer(ref this), celt, rgelt, pceltFetched);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Skip([NativeTypeName("ULONG")] uint celt)
        {
            return lpVtbl->Skip((IEnumOLEVERB*)Unsafe.AsPointer(ref this), celt);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Reset()
        {
            return lpVtbl->Reset((IEnumOLEVERB*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Clone(IEnumOLEVERB** ppenum)
        {
            return lpVtbl->Clone((IEnumOLEVERB*)Unsafe.AsPointer(ref this), ppenum);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Next([NativeTypeName("ULONG")] uint celt, [NativeTypeName("LPOLEVERB")] tagOLEVERB* rgelt, [NativeTypeName("ULONG *")] uint* pceltFetched);

            [return: NativeTypeName("HRESULT")]
            int Skip([NativeTypeName("ULONG")] uint celt);

            [return: NativeTypeName("HRESULT")]
            int Reset();

            [return: NativeTypeName("HRESULT")]
            int Clone(IEnumOLEVERB** ppenum);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (ULONG, LPOLEVERB, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, tagOLEVERB*, uint*, int> Next;

            [NativeTypeName("HRESULT (ULONG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> Skip;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> Reset;

            [NativeTypeName("HRESULT (IEnumOLEVERB **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IEnumOLEVERB**, int> Clone;
        }
    }

    public enum tagUASFLAGS
    {
        UAS_NORMAL = 0,
        UAS_BLOCKED = 0x1,
        UAS_NOPARENTENABLE = 0x2,
        UAS_MASK = 0x3,
    }

    public enum tagREADYSTATE
    {
        READYSTATE_UNINITIALIZED = 0,
        READYSTATE_LOADING = 1,
        READYSTATE_LOADED = 2,
        READYSTATE_INTERACTIVE = 3,
        READYSTATE_COMPLETE = 4,
    }

    public unsafe partial struct tagCONNECTDATA
    {
        public IUnknown* pUnk;

        [NativeTypeName("DWORD")]
        public uint dwCookie;
    }

    [Guid("B196B287-BAB4-101A-B69C-00AA00341D07")]
    [NativeTypeName("struct IEnumConnections : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IEnumConnections : IEnumConnections.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IEnumConnections));

        public Vtbl<IEnumConnections>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IEnumConnections*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IEnumConnections*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IEnumConnections*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Next([NativeTypeName("ULONG")] uint cConnections, [NativeTypeName("LPCONNECTDATA")] tagCONNECTDATA* rgcd, [NativeTypeName("ULONG *")] uint* pcFetched)
        {
            return lpVtbl->Next((IEnumConnections*)Unsafe.AsPointer(ref this), cConnections, rgcd, pcFetched);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Skip([NativeTypeName("ULONG")] uint cConnections)
        {
            return lpVtbl->Skip((IEnumConnections*)Unsafe.AsPointer(ref this), cConnections);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Reset()
        {
            return lpVtbl->Reset((IEnumConnections*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Clone(IEnumConnections** ppEnum)
        {
            return lpVtbl->Clone((IEnumConnections*)Unsafe.AsPointer(ref this), ppEnum);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Next([NativeTypeName("ULONG")] uint cConnections, [NativeTypeName("LPCONNECTDATA")] tagCONNECTDATA* rgcd, [NativeTypeName("ULONG *")] uint* pcFetched);

            [return: NativeTypeName("HRESULT")]
            int Skip([NativeTypeName("ULONG")] uint cConnections);

            [return: NativeTypeName("HRESULT")]
            int Reset();

            [return: NativeTypeName("HRESULT")]
            int Clone(IEnumConnections** ppEnum);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (ULONG, LPCONNECTDATA, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, tagCONNECTDATA*, uint*, int> Next;

            [NativeTypeName("HRESULT (ULONG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> Skip;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> Reset;

            [NativeTypeName("HRESULT (IEnumConnections **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IEnumConnections**, int> Clone;
        }
    }

    [Guid("B196B286-BAB4-101A-B69C-00AA00341D07")]
    [NativeTypeName("struct IConnectionPoint : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IConnectionPoint : IConnectionPoint.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IConnectionPoint));

        public Vtbl<IConnectionPoint>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IConnectionPoint*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IConnectionPoint*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IConnectionPoint*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetConnectionInterface([NativeTypeName("IID *")] Guid* pIID)
        {
            return lpVtbl->GetConnectionInterface((IConnectionPoint*)Unsafe.AsPointer(ref this), pIID);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetConnectionPointContainer(IConnectionPointContainer** ppCPC)
        {
            return lpVtbl->GetConnectionPointContainer((IConnectionPoint*)Unsafe.AsPointer(ref this), ppCPC);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Advise(IUnknown* pUnkSink, [NativeTypeName("DWORD *")] uint* pdwCookie)
        {
            return lpVtbl->Advise((IConnectionPoint*)Unsafe.AsPointer(ref this), pUnkSink, pdwCookie);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Unadvise([NativeTypeName("DWORD")] uint dwCookie)
        {
            return lpVtbl->Unadvise((IConnectionPoint*)Unsafe.AsPointer(ref this), dwCookie);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int EnumConnections(IEnumConnections** ppEnum)
        {
            return lpVtbl->EnumConnections((IConnectionPoint*)Unsafe.AsPointer(ref this), ppEnum);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int GetConnectionInterface([NativeTypeName("IID *")] Guid* pIID);

            [return: NativeTypeName("HRESULT")]
            int GetConnectionPointContainer(IConnectionPointContainer** ppCPC);

            [return: NativeTypeName("HRESULT")]
            int Advise(IUnknown* pUnkSink, [NativeTypeName("DWORD *")] uint* pdwCookie);

            [return: NativeTypeName("HRESULT")]
            int Unadvise([NativeTypeName("DWORD")] uint dwCookie);

            [return: NativeTypeName("HRESULT")]
            int EnumConnections(IEnumConnections** ppEnum);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (IID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, int> GetConnectionInterface;

            [NativeTypeName("HRESULT (IConnectionPointContainer **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IConnectionPointContainer**, int> GetConnectionPointContainer;

            [NativeTypeName("HRESULT (IUnknown *, DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IUnknown*, uint*, int> Advise;

            [NativeTypeName("HRESULT (DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> Unadvise;

            [NativeTypeName("HRESULT (IEnumConnections **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IEnumConnections**, int> EnumConnections;
        }
    }

    [Guid("B196B285-BAB4-101A-B69C-00AA00341D07")]
    [NativeTypeName("struct IEnumConnectionPoints : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IEnumConnectionPoints : IEnumConnectionPoints.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IEnumConnectionPoints));

        public Vtbl<IEnumConnectionPoints>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IEnumConnectionPoints*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IEnumConnectionPoints*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IEnumConnectionPoints*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Next([NativeTypeName("ULONG")] uint cConnections, [NativeTypeName("LPCONNECTIONPOINT *")] IConnectionPoint** ppCP, [NativeTypeName("ULONG *")] uint* pcFetched)
        {
            return lpVtbl->Next((IEnumConnectionPoints*)Unsafe.AsPointer(ref this), cConnections, ppCP, pcFetched);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Skip([NativeTypeName("ULONG")] uint cConnections)
        {
            return lpVtbl->Skip((IEnumConnectionPoints*)Unsafe.AsPointer(ref this), cConnections);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Reset()
        {
            return lpVtbl->Reset((IEnumConnectionPoints*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Clone(IEnumConnectionPoints** ppEnum)
        {
            return lpVtbl->Clone((IEnumConnectionPoints*)Unsafe.AsPointer(ref this), ppEnum);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Next([NativeTypeName("ULONG")] uint cConnections, [NativeTypeName("LPCONNECTIONPOINT *")] IConnectionPoint** ppCP, [NativeTypeName("ULONG *")] uint* pcFetched);

            [return: NativeTypeName("HRESULT")]
            int Skip([NativeTypeName("ULONG")] uint cConnections);

            [return: NativeTypeName("HRESULT")]
            int Reset();

            [return: NativeTypeName("HRESULT")]
            int Clone(IEnumConnectionPoints** ppEnum);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (ULONG, LPCONNECTIONPOINT *, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, IConnectionPoint**, uint*, int> Next;

            [NativeTypeName("HRESULT (ULONG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> Skip;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> Reset;

            [NativeTypeName("HRESULT (IEnumConnectionPoints **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IEnumConnectionPoints**, int> Clone;
        }
    }

    [Guid("B196B284-BAB4-101A-B69C-00AA00341D07")]
    [NativeTypeName("struct IConnectionPointContainer : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IConnectionPointContainer : IConnectionPointContainer.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IConnectionPointContainer));

        public Vtbl<IConnectionPointContainer>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IConnectionPointContainer*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IConnectionPointContainer*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IConnectionPointContainer*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int EnumConnectionPoints(IEnumConnectionPoints** ppEnum)
        {
            return lpVtbl->EnumConnectionPoints((IConnectionPointContainer*)Unsafe.AsPointer(ref this), ppEnum);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int FindConnectionPoint([NativeTypeName("const IID &")] Guid* riid, IConnectionPoint** ppCP)
        {
            return lpVtbl->FindConnectionPoint((IConnectionPointContainer*)Unsafe.AsPointer(ref this), riid, ppCP);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int EnumConnectionPoints(IEnumConnectionPoints** ppEnum);

            [return: NativeTypeName("HRESULT")]
            int FindConnectionPoint([NativeTypeName("const IID &")] Guid* riid, IConnectionPoint** ppCP);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (IEnumConnectionPoints **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IEnumConnectionPoints**, int> EnumConnectionPoints;

            [NativeTypeName("HRESULT (const IID &, IConnectionPoint **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, IConnectionPoint**, int> FindConnectionPoint;
        }
    }

    public partial struct tagLICINFO
    {
        [NativeTypeName("LONG")]
        public int cbLicInfo;

        [NativeTypeName("BOOL")]
        public int fRuntimeKeyAvail;

        [NativeTypeName("BOOL")]
        public int fLicVerified;
    }

    [Guid("B196B28F-BAB4-101A-B69C-00AA00341D07")]
    [NativeTypeName("struct IClassFactory2 : IClassFactory")]
    [NativeInheritance("IClassFactory")]
    public unsafe partial struct IClassFactory2 : IClassFactory2.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IClassFactory2));

        public Vtbl<IClassFactory2>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IClassFactory2*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IClassFactory2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IClassFactory2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int CreateInstance(IUnknown* pUnkOuter, [NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->CreateInstance((IClassFactory2*)Unsafe.AsPointer(ref this), pUnkOuter, riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int LockServer([NativeTypeName("BOOL")] int fLock)
        {
            return lpVtbl->LockServer((IClassFactory2*)Unsafe.AsPointer(ref this), fLock);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetLicInfo([NativeTypeName("LICINFO *")] tagLICINFO* pLicInfo)
        {
            return lpVtbl->GetLicInfo((IClassFactory2*)Unsafe.AsPointer(ref this), pLicInfo);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int RequestLicKey([NativeTypeName("DWORD")] uint dwReserved, [NativeTypeName("BSTR *")] char** pBstrKey)
        {
            return lpVtbl->RequestLicKey((IClassFactory2*)Unsafe.AsPointer(ref this), dwReserved, pBstrKey);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int CreateInstanceLic(IUnknown* pUnkOuter, IUnknown* pUnkReserved, [NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("BSTR")] char* bstrKey, [NativeTypeName("PVOID *")] void** ppvObj)
        {
            return lpVtbl->CreateInstanceLic((IClassFactory2*)Unsafe.AsPointer(ref this), pUnkOuter, pUnkReserved, riid, bstrKey, ppvObj);
        }

        public interface Interface : IClassFactory.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int GetLicInfo([NativeTypeName("LICINFO *")] tagLICINFO* pLicInfo);

            [return: NativeTypeName("HRESULT")]
            int RequestLicKey([NativeTypeName("DWORD")] uint dwReserved, [NativeTypeName("BSTR *")] char** pBstrKey);

            [return: NativeTypeName("HRESULT")]
            int CreateInstanceLic(IUnknown* pUnkOuter, IUnknown* pUnkReserved, [NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("BSTR")] char* bstrKey, [NativeTypeName("PVOID *")] void** ppvObj);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (IUnknown *, const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IUnknown*, Guid*, void**, int> CreateInstance;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> LockServer;

            [NativeTypeName("HRESULT (LICINFO *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagLICINFO*, int> GetLicInfo;

            [NativeTypeName("HRESULT (DWORD, BSTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, char**, int> RequestLicKey;

            [NativeTypeName("HRESULT (IUnknown *, IUnknown *, const IID &, BSTR, PVOID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IUnknown*, IUnknown*, Guid*, char*, void**, int> CreateInstanceLic;
        }
    }

    [Guid("B196B283-BAB4-101A-B69C-00AA00341D07")]
    [NativeTypeName("struct IProvideClassInfo : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IProvideClassInfo : IProvideClassInfo.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IProvideClassInfo));

        public Vtbl<IProvideClassInfo>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IProvideClassInfo*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IProvideClassInfo*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IProvideClassInfo*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetClassInfoA(ITypeInfo** ppTI)
        {
            return lpVtbl->GetClassInfoA((IProvideClassInfo*)Unsafe.AsPointer(ref this), ppTI);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int GetClassInfoA(ITypeInfo** ppTI);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (ITypeInfo **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ITypeInfo**, int> GetClassInfoA;
        }
    }

    public enum tagGUIDKIND
    {
        GUIDKIND_DEFAULT_SOURCE_DISP_IID = 1,
    }

    [Guid("A6BC3AC0-DBAA-11CE-9DE3-00AA004BB851")]
    [NativeTypeName("struct IProvideClassInfo2 : IProvideClassInfo")]
    [NativeInheritance("IProvideClassInfo")]
    public unsafe partial struct IProvideClassInfo2 : IProvideClassInfo2.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IProvideClassInfo2));

        public Vtbl<IProvideClassInfo2>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IProvideClassInfo2*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IProvideClassInfo2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IProvideClassInfo2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetClassInfoA(ITypeInfo** ppTI)
        {
            return lpVtbl->GetClassInfoA((IProvideClassInfo2*)Unsafe.AsPointer(ref this), ppTI);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetGUID([NativeTypeName("DWORD")] uint dwGuidKind, Guid* pGUID)
        {
            return lpVtbl->GetGUID((IProvideClassInfo2*)Unsafe.AsPointer(ref this), dwGuidKind, pGUID);
        }

        public interface Interface : IProvideClassInfo.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int GetGUID([NativeTypeName("DWORD")] uint dwGuidKind, Guid* pGUID);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (ITypeInfo **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ITypeInfo**, int> GetClassInfoA;

            [NativeTypeName("HRESULT (DWORD, GUID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, Guid*, int> GetGUID;
        }
    }

    [Guid("A7ABA9C1-8983-11CF-8F20-00805F2CD064")]
    [NativeTypeName("struct IProvideMultipleClassInfo : IProvideClassInfo2")]
    [NativeInheritance("IProvideClassInfo2")]
    public unsafe partial struct IProvideMultipleClassInfo : IProvideMultipleClassInfo.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IProvideMultipleClassInfo));

        public Vtbl<IProvideMultipleClassInfo>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IProvideMultipleClassInfo*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IProvideMultipleClassInfo*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IProvideMultipleClassInfo*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetClassInfoA(ITypeInfo** ppTI)
        {
            return lpVtbl->GetClassInfoA((IProvideMultipleClassInfo*)Unsafe.AsPointer(ref this), ppTI);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetGUID([NativeTypeName("DWORD")] uint dwGuidKind, Guid* pGUID)
        {
            return lpVtbl->GetGUID((IProvideMultipleClassInfo*)Unsafe.AsPointer(ref this), dwGuidKind, pGUID);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetMultiTypeInfoCount([NativeTypeName("ULONG *")] uint* pcti)
        {
            return lpVtbl->GetMultiTypeInfoCount((IProvideMultipleClassInfo*)Unsafe.AsPointer(ref this), pcti);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetInfoOfIndex([NativeTypeName("ULONG")] uint iti, [NativeTypeName("DWORD")] uint dwFlags, ITypeInfo** pptiCoClass, [NativeTypeName("DWORD *")] uint* pdwTIFlags, [NativeTypeName("ULONG *")] uint* pcdispidReserved, [NativeTypeName("IID *")] Guid* piidPrimary, [NativeTypeName("IID *")] Guid* piidSource)
        {
            return lpVtbl->GetInfoOfIndex((IProvideMultipleClassInfo*)Unsafe.AsPointer(ref this), iti, dwFlags, pptiCoClass, pdwTIFlags, pcdispidReserved, piidPrimary, piidSource);
        }

        public interface Interface : IProvideClassInfo2.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int GetMultiTypeInfoCount([NativeTypeName("ULONG *")] uint* pcti);

            [return: NativeTypeName("HRESULT")]
            int GetInfoOfIndex([NativeTypeName("ULONG")] uint iti, [NativeTypeName("DWORD")] uint dwFlags, ITypeInfo** pptiCoClass, [NativeTypeName("DWORD *")] uint* pdwTIFlags, [NativeTypeName("ULONG *")] uint* pcdispidReserved, [NativeTypeName("IID *")] Guid* piidPrimary, [NativeTypeName("IID *")] Guid* piidSource);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (ITypeInfo **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ITypeInfo**, int> GetClassInfoA;

            [NativeTypeName("HRESULT (DWORD, GUID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, Guid*, int> GetGUID;

            [NativeTypeName("HRESULT (ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, int> GetMultiTypeInfoCount;

            [NativeTypeName("HRESULT (ULONG, DWORD, ITypeInfo **, DWORD *, ULONG *, IID *, IID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint, ITypeInfo**, uint*, uint*, Guid*, Guid*, int> GetInfoOfIndex;
        }
    }

    public unsafe partial struct tagCONTROLINFO
    {
        [NativeTypeName("ULONG")]
        public uint cb;

        [NativeTypeName("HACCEL")]
        public nint* hAccel;

        public ushort cAccel;

        [NativeTypeName("DWORD")]
        public uint dwFlags;
    }

    public enum tagCTRLINFO
    {
        CTRLINFO_EATS_RETURN = 1,
        CTRLINFO_EATS_ESCAPE = 2,
    }

    [Guid("B196B288-BAB4-101A-B69C-00AA00341D07")]
    [NativeTypeName("struct IOleControl : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IOleControl : IOleControl.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IOleControl));

        public Vtbl<IOleControl>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IOleControl*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IOleControl*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IOleControl*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetControlInfo([NativeTypeName("CONTROLINFO *")] tagCONTROLINFO* pCI)
        {
            return lpVtbl->GetControlInfo((IOleControl*)Unsafe.AsPointer(ref this), pCI);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnMnemonic(MSG* pMsg)
        {
            return lpVtbl->OnMnemonic((IOleControl*)Unsafe.AsPointer(ref this), pMsg);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnAmbientPropertyChange([NativeTypeName("DISPID")] int dispID)
        {
            return lpVtbl->OnAmbientPropertyChange((IOleControl*)Unsafe.AsPointer(ref this), dispID);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int FreezeEvents([NativeTypeName("BOOL")] int bFreeze)
        {
            return lpVtbl->FreezeEvents((IOleControl*)Unsafe.AsPointer(ref this), bFreeze);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int GetControlInfo([NativeTypeName("CONTROLINFO *")] tagCONTROLINFO* pCI);

            [return: NativeTypeName("HRESULT")]
            int OnMnemonic(MSG* pMsg);

            [return: NativeTypeName("HRESULT")]
            int OnAmbientPropertyChange([NativeTypeName("DISPID")] int dispID);

            [return: NativeTypeName("HRESULT")]
            int FreezeEvents([NativeTypeName("BOOL")] int bFreeze);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (CONTROLINFO *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagCONTROLINFO*, int> GetControlInfo;

            [NativeTypeName("HRESULT (MSG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, MSG*, int> OnMnemonic;

            [NativeTypeName("HRESULT (DISPID) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> OnAmbientPropertyChange;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> FreezeEvents;
        }
    }

    public partial struct tagPOINTF
    {
        public float x;

        public float y;
    }

    public enum tagXFORMCOORDS
    {
        XFORMCOORDS_POSITION = 0x1,
        XFORMCOORDS_SIZE = 0x2,
        XFORMCOORDS_HIMETRICTOCONTAINER = 0x4,
        XFORMCOORDS_CONTAINERTOHIMETRIC = 0x8,
        XFORMCOORDS_EVENTCOMPAT = 0x10,
    }

    [Guid("B196B289-BAB4-101A-B69C-00AA00341D07")]
    [NativeTypeName("struct IOleControlSite : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IOleControlSite : IOleControlSite.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IOleControlSite));

        public Vtbl<IOleControlSite>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IOleControlSite*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IOleControlSite*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IOleControlSite*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnControlInfoChanged()
        {
            return lpVtbl->OnControlInfoChanged((IOleControlSite*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int LockInPlaceActive([NativeTypeName("BOOL")] int fLock)
        {
            return lpVtbl->LockInPlaceActive((IOleControlSite*)Unsafe.AsPointer(ref this), fLock);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetExtendedControl(IDispatch** ppDisp)
        {
            return lpVtbl->GetExtendedControl((IOleControlSite*)Unsafe.AsPointer(ref this), ppDisp);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int TransformCoords([NativeTypeName("POINTL *")] _POINTL* pPtlHimetric, [NativeTypeName("POINTF *")] tagPOINTF* pPtfContainer, [NativeTypeName("DWORD")] uint dwFlags)
        {
            return lpVtbl->TransformCoords((IOleControlSite*)Unsafe.AsPointer(ref this), pPtlHimetric, pPtfContainer, dwFlags);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int TranslateAcceleratorA(MSG* pMsg, [NativeTypeName("DWORD")] uint grfModifiers)
        {
            return lpVtbl->TranslateAcceleratorA((IOleControlSite*)Unsafe.AsPointer(ref this), pMsg, grfModifiers);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnFocus([NativeTypeName("BOOL")] int fGotFocus)
        {
            return lpVtbl->OnFocus((IOleControlSite*)Unsafe.AsPointer(ref this), fGotFocus);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ShowPropertyFrame()
        {
            return lpVtbl->ShowPropertyFrame((IOleControlSite*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int OnControlInfoChanged();

            [return: NativeTypeName("HRESULT")]
            int LockInPlaceActive([NativeTypeName("BOOL")] int fLock);

            [return: NativeTypeName("HRESULT")]
            int GetExtendedControl(IDispatch** ppDisp);

            [return: NativeTypeName("HRESULT")]
            int TransformCoords([NativeTypeName("POINTL *")] _POINTL* pPtlHimetric, [NativeTypeName("POINTF *")] tagPOINTF* pPtfContainer, [NativeTypeName("DWORD")] uint dwFlags);

            [return: NativeTypeName("HRESULT")]
            int TranslateAcceleratorA(MSG* pMsg, [NativeTypeName("DWORD")] uint grfModifiers);

            [return: NativeTypeName("HRESULT")]
            int OnFocus([NativeTypeName("BOOL")] int fGotFocus);

            [return: NativeTypeName("HRESULT")]
            int ShowPropertyFrame();
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> OnControlInfoChanged;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> LockInPlaceActive;

            [NativeTypeName("HRESULT (IDispatch **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IDispatch**, int> GetExtendedControl;

            [NativeTypeName("HRESULT (POINTL *, POINTF *, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, _POINTL*, tagPOINTF*, uint, int> TransformCoords;

            [NativeTypeName("HRESULT (MSG *, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, MSG*, uint, int> TranslateAcceleratorA;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> OnFocus;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> ShowPropertyFrame;
        }
    }

    public unsafe partial struct tagPROPPAGEINFO
    {
        [NativeTypeName("ULONG")]
        public uint cb;

        [NativeTypeName("LPOLESTR")]
        public char* pszTitle;

        public SIZE size;

        [NativeTypeName("LPOLESTR")]
        public char* pszDocString;

        [NativeTypeName("LPOLESTR")]
        public char* pszHelpFile;

        [NativeTypeName("DWORD")]
        public uint dwHelpContext;
    }

    [Guid("B196B28D-BAB4-101A-B69C-00AA00341D07")]
    [NativeTypeName("struct IPropertyPage : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IPropertyPage : IPropertyPage.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IPropertyPage));

        public Vtbl<IPropertyPage>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IPropertyPage*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IPropertyPage*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IPropertyPage*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetPageSite(IPropertyPageSite* pPageSite)
        {
            return lpVtbl->SetPageSite((IPropertyPage*)Unsafe.AsPointer(ref this), pPageSite);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Activate([NativeTypeName("HWND")] nint* hWndParent, [NativeTypeName("LPCRECT")] RECT* pRect, [NativeTypeName("BOOL")] int bModal)
        {
            return lpVtbl->Activate((IPropertyPage*)Unsafe.AsPointer(ref this), hWndParent, pRect, bModal);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Deactivate()
        {
            return lpVtbl->Deactivate((IPropertyPage*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetPageInfo([NativeTypeName("PROPPAGEINFO *")] tagPROPPAGEINFO* pPageInfo)
        {
            return lpVtbl->GetPageInfo((IPropertyPage*)Unsafe.AsPointer(ref this), pPageInfo);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetObjects([NativeTypeName("ULONG")] uint cObjects, IUnknown** ppUnk)
        {
            return lpVtbl->SetObjects((IPropertyPage*)Unsafe.AsPointer(ref this), cObjects, ppUnk);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Show(uint nCmdShow)
        {
            return lpVtbl->Show((IPropertyPage*)Unsafe.AsPointer(ref this), nCmdShow);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Move([NativeTypeName("LPCRECT")] RECT* pRect)
        {
            return lpVtbl->Move((IPropertyPage*)Unsafe.AsPointer(ref this), pRect);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int IsPageDirty()
        {
            return lpVtbl->IsPageDirty((IPropertyPage*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Apply()
        {
            return lpVtbl->Apply((IPropertyPage*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Help([NativeTypeName("LPCOLESTR")] char* pszHelpDir)
        {
            return lpVtbl->Help((IPropertyPage*)Unsafe.AsPointer(ref this), pszHelpDir);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int TranslateAcceleratorA(MSG* pMsg)
        {
            return lpVtbl->TranslateAcceleratorA((IPropertyPage*)Unsafe.AsPointer(ref this), pMsg);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int SetPageSite(IPropertyPageSite* pPageSite);

            [return: NativeTypeName("HRESULT")]
            int Activate([NativeTypeName("HWND")] nint* hWndParent, [NativeTypeName("LPCRECT")] RECT* pRect, [NativeTypeName("BOOL")] int bModal);

            [return: NativeTypeName("HRESULT")]
            int Deactivate();

            [return: NativeTypeName("HRESULT")]
            int GetPageInfo([NativeTypeName("PROPPAGEINFO *")] tagPROPPAGEINFO* pPageInfo);

            [return: NativeTypeName("HRESULT")]
            int SetObjects([NativeTypeName("ULONG")] uint cObjects, IUnknown** ppUnk);

            [return: NativeTypeName("HRESULT")]
            int Show(uint nCmdShow);

            [return: NativeTypeName("HRESULT")]
            int Move([NativeTypeName("LPCRECT")] RECT* pRect);

            [return: NativeTypeName("HRESULT")]
            int IsPageDirty();

            [return: NativeTypeName("HRESULT")]
            int Apply();

            [return: NativeTypeName("HRESULT")]
            int Help([NativeTypeName("LPCOLESTR")] char* pszHelpDir);

            [return: NativeTypeName("HRESULT")]
            int TranslateAcceleratorA(MSG* pMsg);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (IPropertyPageSite *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IPropertyPageSite*, int> SetPageSite;

            [NativeTypeName("HRESULT (HWND, LPCRECT, BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, nint*, RECT*, int, int> Activate;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> Deactivate;

            [NativeTypeName("HRESULT (PROPPAGEINFO *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagPROPPAGEINFO*, int> GetPageInfo;

            [NativeTypeName("HRESULT (ULONG, IUnknown **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, IUnknown**, int> SetObjects;

            [NativeTypeName("HRESULT (UINT) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> Show;

            [NativeTypeName("HRESULT (LPCRECT) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, RECT*, int> Move;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> IsPageDirty;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> Apply;

            [NativeTypeName("HRESULT (LPCOLESTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, int> Help;

            [NativeTypeName("HRESULT (MSG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, MSG*, int> TranslateAcceleratorA;
        }
    }

    [Guid("01E44665-24AC-101B-84ED-08002B2EC713")]
    [NativeTypeName("struct IPropertyPage2 : IPropertyPage")]
    [NativeInheritance("IPropertyPage")]
    public unsafe partial struct IPropertyPage2 : IPropertyPage2.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IPropertyPage2));

        public Vtbl<IPropertyPage2>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IPropertyPage2*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IPropertyPage2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IPropertyPage2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetPageSite(IPropertyPageSite* pPageSite)
        {
            return lpVtbl->SetPageSite((IPropertyPage2*)Unsafe.AsPointer(ref this), pPageSite);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Activate([NativeTypeName("HWND")] nint* hWndParent, [NativeTypeName("LPCRECT")] RECT* pRect, [NativeTypeName("BOOL")] int bModal)
        {
            return lpVtbl->Activate((IPropertyPage2*)Unsafe.AsPointer(ref this), hWndParent, pRect, bModal);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Deactivate()
        {
            return lpVtbl->Deactivate((IPropertyPage2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetPageInfo([NativeTypeName("PROPPAGEINFO *")] tagPROPPAGEINFO* pPageInfo)
        {
            return lpVtbl->GetPageInfo((IPropertyPage2*)Unsafe.AsPointer(ref this), pPageInfo);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetObjects([NativeTypeName("ULONG")] uint cObjects, IUnknown** ppUnk)
        {
            return lpVtbl->SetObjects((IPropertyPage2*)Unsafe.AsPointer(ref this), cObjects, ppUnk);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Show(uint nCmdShow)
        {
            return lpVtbl->Show((IPropertyPage2*)Unsafe.AsPointer(ref this), nCmdShow);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Move([NativeTypeName("LPCRECT")] RECT* pRect)
        {
            return lpVtbl->Move((IPropertyPage2*)Unsafe.AsPointer(ref this), pRect);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int IsPageDirty()
        {
            return lpVtbl->IsPageDirty((IPropertyPage2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Apply()
        {
            return lpVtbl->Apply((IPropertyPage2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Help([NativeTypeName("LPCOLESTR")] char* pszHelpDir)
        {
            return lpVtbl->Help((IPropertyPage2*)Unsafe.AsPointer(ref this), pszHelpDir);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int TranslateAcceleratorA(MSG* pMsg)
        {
            return lpVtbl->TranslateAcceleratorA((IPropertyPage2*)Unsafe.AsPointer(ref this), pMsg);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int EditProperty([NativeTypeName("DISPID")] int dispID)
        {
            return lpVtbl->EditProperty((IPropertyPage2*)Unsafe.AsPointer(ref this), dispID);
        }

        public interface Interface : IPropertyPage.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int EditProperty([NativeTypeName("DISPID")] int dispID);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (IPropertyPageSite *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IPropertyPageSite*, int> SetPageSite;

            [NativeTypeName("HRESULT (HWND, LPCRECT, BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, nint*, RECT*, int, int> Activate;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> Deactivate;

            [NativeTypeName("HRESULT (PROPPAGEINFO *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagPROPPAGEINFO*, int> GetPageInfo;

            [NativeTypeName("HRESULT (ULONG, IUnknown **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, IUnknown**, int> SetObjects;

            [NativeTypeName("HRESULT (UINT) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> Show;

            [NativeTypeName("HRESULT (LPCRECT) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, RECT*, int> Move;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> IsPageDirty;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> Apply;

            [NativeTypeName("HRESULT (LPCOLESTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, int> Help;

            [NativeTypeName("HRESULT (MSG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, MSG*, int> TranslateAcceleratorA;

            [NativeTypeName("HRESULT (DISPID) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> EditProperty;
        }
    }

    public enum tagPROPPAGESTATUS
    {
        PROPPAGESTATUS_DIRTY = 0x1,
        PROPPAGESTATUS_VALIDATE = 0x2,
        PROPPAGESTATUS_CLEAN = 0x4,
    }

    [Guid("B196B28C-BAB4-101A-B69C-00AA00341D07")]
    [NativeTypeName("struct IPropertyPageSite : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IPropertyPageSite : IPropertyPageSite.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IPropertyPageSite));

        public Vtbl<IPropertyPageSite>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IPropertyPageSite*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IPropertyPageSite*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IPropertyPageSite*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnStatusChange([NativeTypeName("DWORD")] uint dwFlags)
        {
            return lpVtbl->OnStatusChange((IPropertyPageSite*)Unsafe.AsPointer(ref this), dwFlags);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetLocaleID([NativeTypeName("LCID *")] uint* pLocaleID)
        {
            return lpVtbl->GetLocaleID((IPropertyPageSite*)Unsafe.AsPointer(ref this), pLocaleID);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetPageContainer(IUnknown** ppUnk)
        {
            return lpVtbl->GetPageContainer((IPropertyPageSite*)Unsafe.AsPointer(ref this), ppUnk);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int TranslateAcceleratorA(MSG* pMsg)
        {
            return lpVtbl->TranslateAcceleratorA((IPropertyPageSite*)Unsafe.AsPointer(ref this), pMsg);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int OnStatusChange([NativeTypeName("DWORD")] uint dwFlags);

            [return: NativeTypeName("HRESULT")]
            int GetLocaleID([NativeTypeName("LCID *")] uint* pLocaleID);

            [return: NativeTypeName("HRESULT")]
            int GetPageContainer(IUnknown** ppUnk);

            [return: NativeTypeName("HRESULT")]
            int TranslateAcceleratorA(MSG* pMsg);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> OnStatusChange;

            [NativeTypeName("HRESULT (LCID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, int> GetLocaleID;

            [NativeTypeName("HRESULT (IUnknown **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IUnknown**, int> GetPageContainer;

            [NativeTypeName("HRESULT (MSG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, MSG*, int> TranslateAcceleratorA;
        }
    }

    [Guid("9BFBBC02-EFF1-101A-84ED-00AA00341D07")]
    [NativeTypeName("struct IPropertyNotifySink : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IPropertyNotifySink : IPropertyNotifySink.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IPropertyNotifySink));

        public Vtbl<IPropertyNotifySink>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IPropertyNotifySink*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IPropertyNotifySink*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IPropertyNotifySink*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnChanged([NativeTypeName("DISPID")] int dispID)
        {
            return lpVtbl->OnChanged((IPropertyNotifySink*)Unsafe.AsPointer(ref this), dispID);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnRequestEdit([NativeTypeName("DISPID")] int dispID)
        {
            return lpVtbl->OnRequestEdit((IPropertyNotifySink*)Unsafe.AsPointer(ref this), dispID);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int OnChanged([NativeTypeName("DISPID")] int dispID);

            [return: NativeTypeName("HRESULT")]
            int OnRequestEdit([NativeTypeName("DISPID")] int dispID);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (DISPID) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> OnChanged;

            [NativeTypeName("HRESULT (DISPID) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> OnRequestEdit;
        }
    }

    public unsafe partial struct tagCAUUID
    {
        [NativeTypeName("ULONG")]
        public uint cElems;

        public Guid* pElems;
    }

    [Guid("B196B28B-BAB4-101A-B69C-00AA00341D07")]
    [NativeTypeName("struct ISpecifyPropertyPages : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ISpecifyPropertyPages : ISpecifyPropertyPages.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ISpecifyPropertyPages));

        public Vtbl<ISpecifyPropertyPages>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((ISpecifyPropertyPages*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((ISpecifyPropertyPages*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((ISpecifyPropertyPages*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetPages([NativeTypeName("CAUUID *")] tagCAUUID* pPages)
        {
            return lpVtbl->GetPages((ISpecifyPropertyPages*)Unsafe.AsPointer(ref this), pPages);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int GetPages([NativeTypeName("CAUUID *")] tagCAUUID* pPages);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (CAUUID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagCAUUID*, int> GetPages;
        }
    }

    [Guid("BD1AE5E0-A6AE-11CE-BD37-504200C10000")]
    [NativeTypeName("struct IPersistMemory : IPersist")]
    [NativeInheritance("IPersist")]
    public unsafe partial struct IPersistMemory : IPersistMemory.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IPersistMemory));

        public Vtbl<IPersistMemory>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IPersistMemory*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IPersistMemory*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IPersistMemory*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetClassID([NativeTypeName("CLSID *")] Guid* pClassID)
        {
            return lpVtbl->GetClassID((IPersistMemory*)Unsafe.AsPointer(ref this), pClassID);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int IsDirty()
        {
            return lpVtbl->IsDirty((IPersistMemory*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Load([NativeTypeName("LPVOID")] void* pMem, [NativeTypeName("ULONG")] uint cbSize)
        {
            return lpVtbl->Load((IPersistMemory*)Unsafe.AsPointer(ref this), pMem, cbSize);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Save([NativeTypeName("LPVOID")] void* pMem, [NativeTypeName("BOOL")] int fClearDirty, [NativeTypeName("ULONG")] uint cbSize)
        {
            return lpVtbl->Save((IPersistMemory*)Unsafe.AsPointer(ref this), pMem, fClearDirty, cbSize);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetSizeMax([NativeTypeName("ULONG *")] uint* pCbSize)
        {
            return lpVtbl->GetSizeMax((IPersistMemory*)Unsafe.AsPointer(ref this), pCbSize);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int InitNew()
        {
            return lpVtbl->InitNew((IPersistMemory*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IPersist.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int IsDirty();

            [return: NativeTypeName("HRESULT")]
            int Load([NativeTypeName("LPVOID")] void* pMem, [NativeTypeName("ULONG")] uint cbSize);

            [return: NativeTypeName("HRESULT")]
            int Save([NativeTypeName("LPVOID")] void* pMem, [NativeTypeName("BOOL")] int fClearDirty, [NativeTypeName("ULONG")] uint cbSize);

            [return: NativeTypeName("HRESULT")]
            int GetSizeMax([NativeTypeName("ULONG *")] uint* pCbSize);

            [return: NativeTypeName("HRESULT")]
            int InitNew();
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (CLSID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, int> GetClassID;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> IsDirty;

            [NativeTypeName("HRESULT (LPVOID, ULONG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*, uint, int> Load;

            [NativeTypeName("HRESULT (LPVOID, BOOL, ULONG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void*, int, uint, int> Save;

            [NativeTypeName("HRESULT (ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, int> GetSizeMax;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> InitNew;
        }
    }

    [Guid("7FD52380-4E07-101B-AE2D-08002B2EC713")]
    [NativeTypeName("struct IPersistStreamInit : IPersist")]
    [NativeInheritance("IPersist")]
    public unsafe partial struct IPersistStreamInit : IPersistStreamInit.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IPersistStreamInit));

        public Vtbl<IPersistStreamInit>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IPersistStreamInit*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IPersistStreamInit*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IPersistStreamInit*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetClassID([NativeTypeName("CLSID *")] Guid* pClassID)
        {
            return lpVtbl->GetClassID((IPersistStreamInit*)Unsafe.AsPointer(ref this), pClassID);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int IsDirty()
        {
            return lpVtbl->IsDirty((IPersistStreamInit*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Load([NativeTypeName("LPSTREAM")] IStream* pStm)
        {
            return lpVtbl->Load((IPersistStreamInit*)Unsafe.AsPointer(ref this), pStm);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Save([NativeTypeName("LPSTREAM")] IStream* pStm, [NativeTypeName("BOOL")] int fClearDirty)
        {
            return lpVtbl->Save((IPersistStreamInit*)Unsafe.AsPointer(ref this), pStm, fClearDirty);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetSizeMax([NativeTypeName("ULARGE_INTEGER *")] ulong* pCbSize)
        {
            return lpVtbl->GetSizeMax((IPersistStreamInit*)Unsafe.AsPointer(ref this), pCbSize);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int InitNew()
        {
            return lpVtbl->InitNew((IPersistStreamInit*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IPersist.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int IsDirty();

            [return: NativeTypeName("HRESULT")]
            int Load([NativeTypeName("LPSTREAM")] IStream* pStm);

            [return: NativeTypeName("HRESULT")]
            int Save([NativeTypeName("LPSTREAM")] IStream* pStm, [NativeTypeName("BOOL")] int fClearDirty);

            [return: NativeTypeName("HRESULT")]
            int GetSizeMax([NativeTypeName("ULARGE_INTEGER *")] ulong* pCbSize);

            [return: NativeTypeName("HRESULT")]
            int InitNew();
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (CLSID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, int> GetClassID;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> IsDirty;

            [NativeTypeName("HRESULT (LPSTREAM) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IStream*, int> Load;

            [NativeTypeName("HRESULT (LPSTREAM, BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IStream*, int, int> Save;

            [NativeTypeName("HRESULT (ULARGE_INTEGER *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ulong*, int> GetSizeMax;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> InitNew;
        }
    }

    [Guid("37D84F60-42CB-11CE-8135-00AA004BB851")]
    [NativeTypeName("struct IPersistPropertyBag : IPersist")]
    [NativeInheritance("IPersist")]
    public unsafe partial struct IPersistPropertyBag : IPersistPropertyBag.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IPersistPropertyBag));

        public Vtbl<IPersistPropertyBag>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IPersistPropertyBag*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IPersistPropertyBag*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IPersistPropertyBag*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetClassID([NativeTypeName("CLSID *")] Guid* pClassID)
        {
            return lpVtbl->GetClassID((IPersistPropertyBag*)Unsafe.AsPointer(ref this), pClassID);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int InitNew()
        {
            return lpVtbl->InitNew((IPersistPropertyBag*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Load(IPropertyBag* pPropBag, IErrorLog* pErrorLog)
        {
            return lpVtbl->Load((IPersistPropertyBag*)Unsafe.AsPointer(ref this), pPropBag, pErrorLog);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Save(IPropertyBag* pPropBag, [NativeTypeName("BOOL")] int fClearDirty, [NativeTypeName("BOOL")] int fSaveAllProperties)
        {
            return lpVtbl->Save((IPersistPropertyBag*)Unsafe.AsPointer(ref this), pPropBag, fClearDirty, fSaveAllProperties);
        }

        public interface Interface : IPersist.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int InitNew();

            [return: NativeTypeName("HRESULT")]
            int Load(IPropertyBag* pPropBag, IErrorLog* pErrorLog);

            [return: NativeTypeName("HRESULT")]
            int Save(IPropertyBag* pPropBag, [NativeTypeName("BOOL")] int fClearDirty, [NativeTypeName("BOOL")] int fSaveAllProperties);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (CLSID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, int> GetClassID;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> InitNew;

            [NativeTypeName("HRESULT (IPropertyBag *, IErrorLog *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IPropertyBag*, IErrorLog*, int> Load;

            [NativeTypeName("HRESULT (IPropertyBag *, BOOL, BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IPropertyBag*, int, int, int> Save;
        }
    }

    [Guid("742B0E01-14E6-101B-914E-00AA00300CAB")]
    [NativeTypeName("struct ISimpleFrameSite : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ISimpleFrameSite : ISimpleFrameSite.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ISimpleFrameSite));

        public Vtbl<ISimpleFrameSite>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((ISimpleFrameSite*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((ISimpleFrameSite*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((ISimpleFrameSite*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int PreMessageFilter([NativeTypeName("HWND")] nint* hWnd, uint msg, [NativeTypeName("WPARAM")] ulong wp, [NativeTypeName("LPARAM")] nint lp, [NativeTypeName("LRESULT *")] nint* plResult, [NativeTypeName("DWORD *")] uint* pdwCookie)
        {
            return lpVtbl->PreMessageFilter((ISimpleFrameSite*)Unsafe.AsPointer(ref this), hWnd, msg, wp, lp, plResult, pdwCookie);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int PostMessageFilter([NativeTypeName("HWND")] nint* hWnd, uint msg, [NativeTypeName("WPARAM")] ulong wp, [NativeTypeName("LPARAM")] nint lp, [NativeTypeName("LRESULT *")] nint* plResult, [NativeTypeName("DWORD")] uint dwCookie)
        {
            return lpVtbl->PostMessageFilter((ISimpleFrameSite*)Unsafe.AsPointer(ref this), hWnd, msg, wp, lp, plResult, dwCookie);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int PreMessageFilter([NativeTypeName("HWND")] nint* hWnd, uint msg, [NativeTypeName("WPARAM")] ulong wp, [NativeTypeName("LPARAM")] nint lp, [NativeTypeName("LRESULT *")] nint* plResult, [NativeTypeName("DWORD *")] uint* pdwCookie);

            [return: NativeTypeName("HRESULT")]
            int PostMessageFilter([NativeTypeName("HWND")] nint* hWnd, uint msg, [NativeTypeName("WPARAM")] ulong wp, [NativeTypeName("LPARAM")] nint lp, [NativeTypeName("LRESULT *")] nint* plResult, [NativeTypeName("DWORD")] uint dwCookie);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (HWND, UINT, WPARAM, LPARAM, LRESULT *, DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, nint*, uint, ulong, nint, nint*, uint*, int> PreMessageFilter;

            [NativeTypeName("HRESULT (HWND, UINT, WPARAM, LPARAM, LRESULT *, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, nint*, uint, ulong, nint, nint*, uint, int> PostMessageFilter;
        }
    }

    [Guid("BEF6E002-A874-101A-8BBA-00AA00300CAB")]
    [NativeTypeName("struct IFont : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IFont : IFont.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IFont));

        public Vtbl<IFont>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IFont*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IFont*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IFont*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int get_Name([NativeTypeName("BSTR *")] char** pName)
        {
            return lpVtbl->get_Name((IFont*)Unsafe.AsPointer(ref this), pName);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int put_Name([NativeTypeName("BSTR")] char* name)
        {
            return lpVtbl->put_Name((IFont*)Unsafe.AsPointer(ref this), name);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int get_Size(CY* pSize)
        {
            return lpVtbl->get_Size((IFont*)Unsafe.AsPointer(ref this), pSize);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int put_Size(CY size)
        {
            return lpVtbl->put_Size((IFont*)Unsafe.AsPointer(ref this), size);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int get_Bold([NativeTypeName("BOOL *")] int* pBold)
        {
            return lpVtbl->get_Bold((IFont*)Unsafe.AsPointer(ref this), pBold);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int put_Bold([NativeTypeName("BOOL")] int bold)
        {
            return lpVtbl->put_Bold((IFont*)Unsafe.AsPointer(ref this), bold);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int get_Italic([NativeTypeName("BOOL *")] int* pItalic)
        {
            return lpVtbl->get_Italic((IFont*)Unsafe.AsPointer(ref this), pItalic);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int put_Italic([NativeTypeName("BOOL")] int italic)
        {
            return lpVtbl->put_Italic((IFont*)Unsafe.AsPointer(ref this), italic);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int get_Underline([NativeTypeName("BOOL *")] int* pUnderline)
        {
            return lpVtbl->get_Underline((IFont*)Unsafe.AsPointer(ref this), pUnderline);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int put_Underline([NativeTypeName("BOOL")] int underline)
        {
            return lpVtbl->put_Underline((IFont*)Unsafe.AsPointer(ref this), underline);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int get_Strikethrough([NativeTypeName("BOOL *")] int* pStrikethrough)
        {
            return lpVtbl->get_Strikethrough((IFont*)Unsafe.AsPointer(ref this), pStrikethrough);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int put_Strikethrough([NativeTypeName("BOOL")] int strikethrough)
        {
            return lpVtbl->put_Strikethrough((IFont*)Unsafe.AsPointer(ref this), strikethrough);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int get_Weight(short* pWeight)
        {
            return lpVtbl->get_Weight((IFont*)Unsafe.AsPointer(ref this), pWeight);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int put_Weight(short weight)
        {
            return lpVtbl->put_Weight((IFont*)Unsafe.AsPointer(ref this), weight);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int get_Charset(short* pCharset)
        {
            return lpVtbl->get_Charset((IFont*)Unsafe.AsPointer(ref this), pCharset);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int put_Charset(short charset)
        {
            return lpVtbl->put_Charset((IFont*)Unsafe.AsPointer(ref this), charset);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int get_hFont([NativeTypeName("HFONT *")] nint** phFont)
        {
            return lpVtbl->get_hFont((IFont*)Unsafe.AsPointer(ref this), phFont);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Clone(IFont** ppFont)
        {
            return lpVtbl->Clone((IFont*)Unsafe.AsPointer(ref this), ppFont);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int IsEqual(IFont* pFontOther)
        {
            return lpVtbl->IsEqual((IFont*)Unsafe.AsPointer(ref this), pFontOther);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetRatio([NativeTypeName("LONG")] int cyLogical, [NativeTypeName("LONG")] int cyHimetric)
        {
            return lpVtbl->SetRatio((IFont*)Unsafe.AsPointer(ref this), cyLogical, cyHimetric);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryTextMetrics([NativeTypeName("TEXTMETRICOLE *")] tagTEXTMETRICW* pTM)
        {
            return lpVtbl->QueryTextMetrics((IFont*)Unsafe.AsPointer(ref this), pTM);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int AddRefHfont([NativeTypeName("HFONT")] nint* hFont)
        {
            return lpVtbl->AddRefHfont((IFont*)Unsafe.AsPointer(ref this), hFont);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ReleaseHfont([NativeTypeName("HFONT")] nint* hFont)
        {
            return lpVtbl->ReleaseHfont((IFont*)Unsafe.AsPointer(ref this), hFont);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetHdc([NativeTypeName("HDC")] nint* hDC)
        {
            return lpVtbl->SetHdc((IFont*)Unsafe.AsPointer(ref this), hDC);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int get_Name([NativeTypeName("BSTR *")] char** pName);

            [return: NativeTypeName("HRESULT")]
            int put_Name([NativeTypeName("BSTR")] char* name);

            [return: NativeTypeName("HRESULT")]
            int get_Size(CY* pSize);

            [return: NativeTypeName("HRESULT")]
            int put_Size(CY size);

            [return: NativeTypeName("HRESULT")]
            int get_Bold([NativeTypeName("BOOL *")] int* pBold);

            [return: NativeTypeName("HRESULT")]
            int put_Bold([NativeTypeName("BOOL")] int bold);

            [return: NativeTypeName("HRESULT")]
            int get_Italic([NativeTypeName("BOOL *")] int* pItalic);

            [return: NativeTypeName("HRESULT")]
            int put_Italic([NativeTypeName("BOOL")] int italic);

            [return: NativeTypeName("HRESULT")]
            int get_Underline([NativeTypeName("BOOL *")] int* pUnderline);

            [return: NativeTypeName("HRESULT")]
            int put_Underline([NativeTypeName("BOOL")] int underline);

            [return: NativeTypeName("HRESULT")]
            int get_Strikethrough([NativeTypeName("BOOL *")] int* pStrikethrough);

            [return: NativeTypeName("HRESULT")]
            int put_Strikethrough([NativeTypeName("BOOL")] int strikethrough);

            [return: NativeTypeName("HRESULT")]
            int get_Weight(short* pWeight);

            [return: NativeTypeName("HRESULT")]
            int put_Weight(short weight);

            [return: NativeTypeName("HRESULT")]
            int get_Charset(short* pCharset);

            [return: NativeTypeName("HRESULT")]
            int put_Charset(short charset);

            [return: NativeTypeName("HRESULT")]
            int get_hFont([NativeTypeName("HFONT *")] nint** phFont);

            [return: NativeTypeName("HRESULT")]
            int Clone(IFont** ppFont);

            [return: NativeTypeName("HRESULT")]
            int IsEqual(IFont* pFontOther);

            [return: NativeTypeName("HRESULT")]
            int SetRatio([NativeTypeName("LONG")] int cyLogical, [NativeTypeName("LONG")] int cyHimetric);

            [return: NativeTypeName("HRESULT")]
            int QueryTextMetrics([NativeTypeName("TEXTMETRICOLE *")] tagTEXTMETRICW* pTM);

            [return: NativeTypeName("HRESULT")]
            int AddRefHfont([NativeTypeName("HFONT")] nint* hFont);

            [return: NativeTypeName("HRESULT")]
            int ReleaseHfont([NativeTypeName("HFONT")] nint* hFont);

            [return: NativeTypeName("HRESULT")]
            int SetHdc([NativeTypeName("HDC")] nint* hDC);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (BSTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char**, int> get_Name;

            [NativeTypeName("HRESULT (BSTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, int> put_Name;

            [NativeTypeName("HRESULT (CY *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, CY*, int> get_Size;

            [NativeTypeName("HRESULT (CY) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, CY, int> put_Size;

            [NativeTypeName("HRESULT (BOOL *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int*, int> get_Bold;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> put_Bold;

            [NativeTypeName("HRESULT (BOOL *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int*, int> get_Italic;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> put_Italic;

            [NativeTypeName("HRESULT (BOOL *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int*, int> get_Underline;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> put_Underline;

            [NativeTypeName("HRESULT (BOOL *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int*, int> get_Strikethrough;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> put_Strikethrough;

            [NativeTypeName("HRESULT (SHORT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, short*, int> get_Weight;

            [NativeTypeName("HRESULT (SHORT) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, short, int> put_Weight;

            [NativeTypeName("HRESULT (SHORT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, short*, int> get_Charset;

            [NativeTypeName("HRESULT (SHORT) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, short, int> put_Charset;

            [NativeTypeName("HRESULT (HFONT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, nint**, int> get_hFont;

            [NativeTypeName("HRESULT (IFont **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IFont**, int> Clone;

            [NativeTypeName("HRESULT (IFont *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IFont*, int> IsEqual;

            [NativeTypeName("HRESULT (LONG, LONG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int, int> SetRatio;

            [NativeTypeName("HRESULT (TEXTMETRICOLE *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagTEXTMETRICW*, int> QueryTextMetrics;

            [NativeTypeName("HRESULT (HFONT) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, nint*, int> AddRefHfont;

            [NativeTypeName("HRESULT (HFONT) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, nint*, int> ReleaseHfont;

            [NativeTypeName("HRESULT (HDC) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, nint*, int> SetHdc;
        }
    }

    public enum tagPictureAttributes
    {
        PICTURE_SCALABLE = 0x1,
        PICTURE_TRANSPARENT = 0x2,
    }

    [Guid("7BF80980-BF32-101A-8BBB-00AA00300CAB")]
    [NativeTypeName("struct IPicture : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IPicture : IPicture.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IPicture));

        public Vtbl<IPicture>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IPicture*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IPicture*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IPicture*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int get_Handle([NativeTypeName("OLE_HANDLE *")] uint* pHandle)
        {
            return lpVtbl->get_Handle((IPicture*)Unsafe.AsPointer(ref this), pHandle);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int get_hPal([NativeTypeName("OLE_HANDLE *")] uint* phPal)
        {
            return lpVtbl->get_hPal((IPicture*)Unsafe.AsPointer(ref this), phPal);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int get_Type(short* pType)
        {
            return lpVtbl->get_Type((IPicture*)Unsafe.AsPointer(ref this), pType);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int get_Width([NativeTypeName("OLE_XSIZE_HIMETRIC *")] int* pWidth)
        {
            return lpVtbl->get_Width((IPicture*)Unsafe.AsPointer(ref this), pWidth);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int get_Height([NativeTypeName("OLE_YSIZE_HIMETRIC *")] int* pHeight)
        {
            return lpVtbl->get_Height((IPicture*)Unsafe.AsPointer(ref this), pHeight);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Render([NativeTypeName("HDC")] nint* hDC, [NativeTypeName("LONG")] int x, [NativeTypeName("LONG")] int y, [NativeTypeName("LONG")] int cx, [NativeTypeName("LONG")] int cy, [NativeTypeName("OLE_XPOS_HIMETRIC")] int xSrc, [NativeTypeName("OLE_YPOS_HIMETRIC")] int ySrc, [NativeTypeName("OLE_XSIZE_HIMETRIC")] int cxSrc, [NativeTypeName("OLE_YSIZE_HIMETRIC")] int cySrc, [NativeTypeName("LPCRECT")] RECT* pRcWBounds)
        {
            return lpVtbl->Render((IPicture*)Unsafe.AsPointer(ref this), hDC, x, y, cx, cy, xSrc, ySrc, cxSrc, cySrc, pRcWBounds);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int set_hPal([NativeTypeName("OLE_HANDLE")] uint hPal)
        {
            return lpVtbl->set_hPal((IPicture*)Unsafe.AsPointer(ref this), hPal);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int get_CurDC([NativeTypeName("HDC *")] nint** phDC)
        {
            return lpVtbl->get_CurDC((IPicture*)Unsafe.AsPointer(ref this), phDC);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SelectPicture([NativeTypeName("HDC")] nint* hDCIn, [NativeTypeName("HDC *")] nint** phDCOut, [NativeTypeName("OLE_HANDLE *")] uint* phBmpOut)
        {
            return lpVtbl->SelectPicture((IPicture*)Unsafe.AsPointer(ref this), hDCIn, phDCOut, phBmpOut);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int get_KeepOriginalFormat([NativeTypeName("BOOL *")] int* pKeep)
        {
            return lpVtbl->get_KeepOriginalFormat((IPicture*)Unsafe.AsPointer(ref this), pKeep);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int put_KeepOriginalFormat([NativeTypeName("BOOL")] int keep)
        {
            return lpVtbl->put_KeepOriginalFormat((IPicture*)Unsafe.AsPointer(ref this), keep);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int PictureChanged()
        {
            return lpVtbl->PictureChanged((IPicture*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SaveAsFile([NativeTypeName("LPSTREAM")] IStream* pStream, [NativeTypeName("BOOL")] int fSaveMemCopy, [NativeTypeName("LONG *")] int* pCbSize)
        {
            return lpVtbl->SaveAsFile((IPicture*)Unsafe.AsPointer(ref this), pStream, fSaveMemCopy, pCbSize);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int get_Attributes([NativeTypeName("DWORD *")] uint* pDwAttr)
        {
            return lpVtbl->get_Attributes((IPicture*)Unsafe.AsPointer(ref this), pDwAttr);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int get_Handle([NativeTypeName("OLE_HANDLE *")] uint* pHandle);

            [return: NativeTypeName("HRESULT")]
            int get_hPal([NativeTypeName("OLE_HANDLE *")] uint* phPal);

            [return: NativeTypeName("HRESULT")]
            int get_Type(short* pType);

            [return: NativeTypeName("HRESULT")]
            int get_Width([NativeTypeName("OLE_XSIZE_HIMETRIC *")] int* pWidth);

            [return: NativeTypeName("HRESULT")]
            int get_Height([NativeTypeName("OLE_YSIZE_HIMETRIC *")] int* pHeight);

            [return: NativeTypeName("HRESULT")]
            int Render([NativeTypeName("HDC")] nint* hDC, [NativeTypeName("LONG")] int x, [NativeTypeName("LONG")] int y, [NativeTypeName("LONG")] int cx, [NativeTypeName("LONG")] int cy, [NativeTypeName("OLE_XPOS_HIMETRIC")] int xSrc, [NativeTypeName("OLE_YPOS_HIMETRIC")] int ySrc, [NativeTypeName("OLE_XSIZE_HIMETRIC")] int cxSrc, [NativeTypeName("OLE_YSIZE_HIMETRIC")] int cySrc, [NativeTypeName("LPCRECT")] RECT* pRcWBounds);

            [return: NativeTypeName("HRESULT")]
            int set_hPal([NativeTypeName("OLE_HANDLE")] uint hPal);

            [return: NativeTypeName("HRESULT")]
            int get_CurDC([NativeTypeName("HDC *")] nint** phDC);

            [return: NativeTypeName("HRESULT")]
            int SelectPicture([NativeTypeName("HDC")] nint* hDCIn, [NativeTypeName("HDC *")] nint** phDCOut, [NativeTypeName("OLE_HANDLE *")] uint* phBmpOut);

            [return: NativeTypeName("HRESULT")]
            int get_KeepOriginalFormat([NativeTypeName("BOOL *")] int* pKeep);

            [return: NativeTypeName("HRESULT")]
            int put_KeepOriginalFormat([NativeTypeName("BOOL")] int keep);

            [return: NativeTypeName("HRESULT")]
            int PictureChanged();

            [return: NativeTypeName("HRESULT")]
            int SaveAsFile([NativeTypeName("LPSTREAM")] IStream* pStream, [NativeTypeName("BOOL")] int fSaveMemCopy, [NativeTypeName("LONG *")] int* pCbSize);

            [return: NativeTypeName("HRESULT")]
            int get_Attributes([NativeTypeName("DWORD *")] uint* pDwAttr);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (OLE_HANDLE *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, int> get_Handle;

            [NativeTypeName("HRESULT (OLE_HANDLE *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, int> get_hPal;

            [NativeTypeName("HRESULT (SHORT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, short*, int> get_Type;

            [NativeTypeName("HRESULT (OLE_XSIZE_HIMETRIC *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int*, int> get_Width;

            [NativeTypeName("HRESULT (OLE_YSIZE_HIMETRIC *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int*, int> get_Height;

            [NativeTypeName("HRESULT (HDC, LONG, LONG, LONG, LONG, OLE_XPOS_HIMETRIC, OLE_YPOS_HIMETRIC, OLE_XSIZE_HIMETRIC, OLE_YSIZE_HIMETRIC, LPCRECT) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, nint*, int, int, int, int, int, int, int, int, RECT*, int> Render;

            [NativeTypeName("HRESULT (OLE_HANDLE) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> set_hPal;

            [NativeTypeName("HRESULT (HDC *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, nint**, int> get_CurDC;

            [NativeTypeName("HRESULT (HDC, HDC *, OLE_HANDLE *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, nint*, nint**, uint*, int> SelectPicture;

            [NativeTypeName("HRESULT (BOOL *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int*, int> get_KeepOriginalFormat;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> put_KeepOriginalFormat;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> PictureChanged;

            [NativeTypeName("HRESULT (LPSTREAM, BOOL, LONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IStream*, int, int*, int> SaveAsFile;

            [NativeTypeName("HRESULT (DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, int> get_Attributes;
        }
    }

    [Guid("F5185DD8-2012-4B0B-AAD9-F052C6BD482B")]
    [NativeTypeName("struct IPicture2 : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IPicture2 : IPicture2.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IPicture2));

        public Vtbl<IPicture2>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IPicture2*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IPicture2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IPicture2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int get_Handle([NativeTypeName("HHANDLE *")] ulong* pHandle)
        {
            return lpVtbl->get_Handle((IPicture2*)Unsafe.AsPointer(ref this), pHandle);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int get_hPal([NativeTypeName("HHANDLE *")] ulong* phPal)
        {
            return lpVtbl->get_hPal((IPicture2*)Unsafe.AsPointer(ref this), phPal);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int get_Type(short* pType)
        {
            return lpVtbl->get_Type((IPicture2*)Unsafe.AsPointer(ref this), pType);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int get_Width([NativeTypeName("OLE_XSIZE_HIMETRIC *")] int* pWidth)
        {
            return lpVtbl->get_Width((IPicture2*)Unsafe.AsPointer(ref this), pWidth);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int get_Height([NativeTypeName("OLE_YSIZE_HIMETRIC *")] int* pHeight)
        {
            return lpVtbl->get_Height((IPicture2*)Unsafe.AsPointer(ref this), pHeight);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Render([NativeTypeName("HDC")] nint* hDC, [NativeTypeName("LONG")] int x, [NativeTypeName("LONG")] int y, [NativeTypeName("LONG")] int cx, [NativeTypeName("LONG")] int cy, [NativeTypeName("OLE_XPOS_HIMETRIC")] int xSrc, [NativeTypeName("OLE_YPOS_HIMETRIC")] int ySrc, [NativeTypeName("OLE_XSIZE_HIMETRIC")] int cxSrc, [NativeTypeName("OLE_YSIZE_HIMETRIC")] int cySrc, [NativeTypeName("LPCRECT")] RECT* pRcWBounds)
        {
            return lpVtbl->Render((IPicture2*)Unsafe.AsPointer(ref this), hDC, x, y, cx, cy, xSrc, ySrc, cxSrc, cySrc, pRcWBounds);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int set_hPal([NativeTypeName("HHANDLE")] ulong hPal)
        {
            return lpVtbl->set_hPal((IPicture2*)Unsafe.AsPointer(ref this), hPal);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int get_CurDC([NativeTypeName("HDC *")] nint** phDC)
        {
            return lpVtbl->get_CurDC((IPicture2*)Unsafe.AsPointer(ref this), phDC);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SelectPicture([NativeTypeName("HDC")] nint* hDCIn, [NativeTypeName("HDC *")] nint** phDCOut, [NativeTypeName("HHANDLE *")] ulong* phBmpOut)
        {
            return lpVtbl->SelectPicture((IPicture2*)Unsafe.AsPointer(ref this), hDCIn, phDCOut, phBmpOut);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int get_KeepOriginalFormat([NativeTypeName("BOOL *")] int* pKeep)
        {
            return lpVtbl->get_KeepOriginalFormat((IPicture2*)Unsafe.AsPointer(ref this), pKeep);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int put_KeepOriginalFormat([NativeTypeName("BOOL")] int keep)
        {
            return lpVtbl->put_KeepOriginalFormat((IPicture2*)Unsafe.AsPointer(ref this), keep);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int PictureChanged()
        {
            return lpVtbl->PictureChanged((IPicture2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SaveAsFile([NativeTypeName("LPSTREAM")] IStream* pStream, [NativeTypeName("BOOL")] int fSaveMemCopy, [NativeTypeName("LONG *")] int* pCbSize)
        {
            return lpVtbl->SaveAsFile((IPicture2*)Unsafe.AsPointer(ref this), pStream, fSaveMemCopy, pCbSize);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int get_Attributes([NativeTypeName("DWORD *")] uint* pDwAttr)
        {
            return lpVtbl->get_Attributes((IPicture2*)Unsafe.AsPointer(ref this), pDwAttr);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int get_Handle([NativeTypeName("HHANDLE *")] ulong* pHandle);

            [return: NativeTypeName("HRESULT")]
            int get_hPal([NativeTypeName("HHANDLE *")] ulong* phPal);

            [return: NativeTypeName("HRESULT")]
            int get_Type(short* pType);

            [return: NativeTypeName("HRESULT")]
            int get_Width([NativeTypeName("OLE_XSIZE_HIMETRIC *")] int* pWidth);

            [return: NativeTypeName("HRESULT")]
            int get_Height([NativeTypeName("OLE_YSIZE_HIMETRIC *")] int* pHeight);

            [return: NativeTypeName("HRESULT")]
            int Render([NativeTypeName("HDC")] nint* hDC, [NativeTypeName("LONG")] int x, [NativeTypeName("LONG")] int y, [NativeTypeName("LONG")] int cx, [NativeTypeName("LONG")] int cy, [NativeTypeName("OLE_XPOS_HIMETRIC")] int xSrc, [NativeTypeName("OLE_YPOS_HIMETRIC")] int ySrc, [NativeTypeName("OLE_XSIZE_HIMETRIC")] int cxSrc, [NativeTypeName("OLE_YSIZE_HIMETRIC")] int cySrc, [NativeTypeName("LPCRECT")] RECT* pRcWBounds);

            [return: NativeTypeName("HRESULT")]
            int set_hPal([NativeTypeName("HHANDLE")] ulong hPal);

            [return: NativeTypeName("HRESULT")]
            int get_CurDC([NativeTypeName("HDC *")] nint** phDC);

            [return: NativeTypeName("HRESULT")]
            int SelectPicture([NativeTypeName("HDC")] nint* hDCIn, [NativeTypeName("HDC *")] nint** phDCOut, [NativeTypeName("HHANDLE *")] ulong* phBmpOut);

            [return: NativeTypeName("HRESULT")]
            int get_KeepOriginalFormat([NativeTypeName("BOOL *")] int* pKeep);

            [return: NativeTypeName("HRESULT")]
            int put_KeepOriginalFormat([NativeTypeName("BOOL")] int keep);

            [return: NativeTypeName("HRESULT")]
            int PictureChanged();

            [return: NativeTypeName("HRESULT")]
            int SaveAsFile([NativeTypeName("LPSTREAM")] IStream* pStream, [NativeTypeName("BOOL")] int fSaveMemCopy, [NativeTypeName("LONG *")] int* pCbSize);

            [return: NativeTypeName("HRESULT")]
            int get_Attributes([NativeTypeName("DWORD *")] uint* pDwAttr);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (HHANDLE *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ulong*, int> get_Handle;

            [NativeTypeName("HRESULT (HHANDLE *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ulong*, int> get_hPal;

            [NativeTypeName("HRESULT (SHORT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, short*, int> get_Type;

            [NativeTypeName("HRESULT (OLE_XSIZE_HIMETRIC *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int*, int> get_Width;

            [NativeTypeName("HRESULT (OLE_YSIZE_HIMETRIC *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int*, int> get_Height;

            [NativeTypeName("HRESULT (HDC, LONG, LONG, LONG, LONG, OLE_XPOS_HIMETRIC, OLE_YPOS_HIMETRIC, OLE_XSIZE_HIMETRIC, OLE_YSIZE_HIMETRIC, LPCRECT) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, nint*, int, int, int, int, int, int, int, int, RECT*, int> Render;

            [NativeTypeName("HRESULT (HHANDLE) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, ulong, int> set_hPal;

            [NativeTypeName("HRESULT (HDC *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, nint**, int> get_CurDC;

            [NativeTypeName("HRESULT (HDC, HDC *, HHANDLE *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, nint*, nint**, ulong*, int> SelectPicture;

            [NativeTypeName("HRESULT (BOOL *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int*, int> get_KeepOriginalFormat;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> put_KeepOriginalFormat;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> PictureChanged;

            [NativeTypeName("HRESULT (LPSTREAM, BOOL, LONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IStream*, int, int*, int> SaveAsFile;

            [NativeTypeName("HRESULT (DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, int> get_Attributes;
        }
    }

    [Guid("4EF6100A-AF88-11D0-9846-00C04FC29993")]
    [NativeTypeName("struct IFontEventsDisp : IDispatch")]
    [NativeInheritance("IDispatch")]
    public unsafe partial struct IFontEventsDisp : IFontEventsDisp.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IFontEventsDisp));

        public Vtbl<IFontEventsDisp>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IFontEventsDisp*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IFontEventsDisp*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IFontEventsDisp*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetTypeInfoCount(uint* pctinfo)
        {
            return lpVtbl->GetTypeInfoCount((IFontEventsDisp*)Unsafe.AsPointer(ref this), pctinfo);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetTypeInfo(uint iTInfo, [NativeTypeName("LCID")] uint lcid, ITypeInfo** ppTInfo)
        {
            return lpVtbl->GetTypeInfo((IFontEventsDisp*)Unsafe.AsPointer(ref this), iTInfo, lcid, ppTInfo);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetIDsOfNames([NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("LPOLESTR *")] char** rgszNames, uint cNames, [NativeTypeName("LCID")] uint lcid, [NativeTypeName("DISPID *")] int* rgDispId)
        {
            return lpVtbl->GetIDsOfNames((IFontEventsDisp*)Unsafe.AsPointer(ref this), riid, rgszNames, cNames, lcid, rgDispId);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Invoke([NativeTypeName("DISPID")] int dispIdMember, [NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("LCID")] uint lcid, [NativeTypeName("WORD")] ushort wFlags, [NativeTypeName("DISPPARAMS *")] tagDISPPARAMS* pDispParams, VARIANT* pVarResult, [NativeTypeName("EXCEPINFO *")] tagEXCEPINFO* pExcepInfo, uint* puArgErr)
        {
            return lpVtbl->Invoke((IFontEventsDisp*)Unsafe.AsPointer(ref this), dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        public interface Interface : IDispatch.Interface
        {
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (UINT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, int> GetTypeInfoCount;

            [NativeTypeName("HRESULT (UINT, LCID, ITypeInfo **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint, ITypeInfo**, int> GetTypeInfo;

            [NativeTypeName("HRESULT (const IID &, LPOLESTR *, UINT, LCID, DISPID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, char**, uint, uint, int*, int> GetIDsOfNames;

            [NativeTypeName("HRESULT (DISPID, const IID &, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, Guid*, uint, ushort, tagDISPPARAMS*, VARIANT*, tagEXCEPINFO*, uint*, int> Invoke;
        }
    }

    [Guid("BEF6E003-A874-101A-8BBA-00AA00300CAB")]
    [NativeTypeName("struct IFontDisp : IDispatch")]
    [NativeInheritance("IDispatch")]
    public unsafe partial struct IFontDisp : IFontDisp.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IFontDisp));

        public Vtbl<IFontDisp>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IFontDisp*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IFontDisp*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IFontDisp*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetTypeInfoCount(uint* pctinfo)
        {
            return lpVtbl->GetTypeInfoCount((IFontDisp*)Unsafe.AsPointer(ref this), pctinfo);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetTypeInfo(uint iTInfo, [NativeTypeName("LCID")] uint lcid, ITypeInfo** ppTInfo)
        {
            return lpVtbl->GetTypeInfo((IFontDisp*)Unsafe.AsPointer(ref this), iTInfo, lcid, ppTInfo);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetIDsOfNames([NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("LPOLESTR *")] char** rgszNames, uint cNames, [NativeTypeName("LCID")] uint lcid, [NativeTypeName("DISPID *")] int* rgDispId)
        {
            return lpVtbl->GetIDsOfNames((IFontDisp*)Unsafe.AsPointer(ref this), riid, rgszNames, cNames, lcid, rgDispId);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Invoke([NativeTypeName("DISPID")] int dispIdMember, [NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("LCID")] uint lcid, [NativeTypeName("WORD")] ushort wFlags, [NativeTypeName("DISPPARAMS *")] tagDISPPARAMS* pDispParams, VARIANT* pVarResult, [NativeTypeName("EXCEPINFO *")] tagEXCEPINFO* pExcepInfo, uint* puArgErr)
        {
            return lpVtbl->Invoke((IFontDisp*)Unsafe.AsPointer(ref this), dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        public interface Interface : IDispatch.Interface
        {
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (UINT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, int> GetTypeInfoCount;

            [NativeTypeName("HRESULT (UINT, LCID, ITypeInfo **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint, ITypeInfo**, int> GetTypeInfo;

            [NativeTypeName("HRESULT (const IID &, LPOLESTR *, UINT, LCID, DISPID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, char**, uint, uint, int*, int> GetIDsOfNames;

            [NativeTypeName("HRESULT (DISPID, const IID &, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, Guid*, uint, ushort, tagDISPPARAMS*, VARIANT*, tagEXCEPINFO*, uint*, int> Invoke;
        }
    }

    [Guid("7BF80981-BF32-101A-8BBB-00AA00300CAB")]
    [NativeTypeName("struct IPictureDisp : IDispatch")]
    [NativeInheritance("IDispatch")]
    public unsafe partial struct IPictureDisp : IPictureDisp.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IPictureDisp));

        public Vtbl<IPictureDisp>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IPictureDisp*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IPictureDisp*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IPictureDisp*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetTypeInfoCount(uint* pctinfo)
        {
            return lpVtbl->GetTypeInfoCount((IPictureDisp*)Unsafe.AsPointer(ref this), pctinfo);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetTypeInfo(uint iTInfo, [NativeTypeName("LCID")] uint lcid, ITypeInfo** ppTInfo)
        {
            return lpVtbl->GetTypeInfo((IPictureDisp*)Unsafe.AsPointer(ref this), iTInfo, lcid, ppTInfo);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetIDsOfNames([NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("LPOLESTR *")] char** rgszNames, uint cNames, [NativeTypeName("LCID")] uint lcid, [NativeTypeName("DISPID *")] int* rgDispId)
        {
            return lpVtbl->GetIDsOfNames((IPictureDisp*)Unsafe.AsPointer(ref this), riid, rgszNames, cNames, lcid, rgDispId);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Invoke([NativeTypeName("DISPID")] int dispIdMember, [NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("LCID")] uint lcid, [NativeTypeName("WORD")] ushort wFlags, [NativeTypeName("DISPPARAMS *")] tagDISPPARAMS* pDispParams, VARIANT* pVarResult, [NativeTypeName("EXCEPINFO *")] tagEXCEPINFO* pExcepInfo, uint* puArgErr)
        {
            return lpVtbl->Invoke((IPictureDisp*)Unsafe.AsPointer(ref this), dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        public interface Interface : IDispatch.Interface
        {
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (UINT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, int> GetTypeInfoCount;

            [NativeTypeName("HRESULT (UINT, LCID, ITypeInfo **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint, ITypeInfo**, int> GetTypeInfo;

            [NativeTypeName("HRESULT (const IID &, LPOLESTR *, UINT, LCID, DISPID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, char**, uint, uint, int*, int> GetIDsOfNames;

            [NativeTypeName("HRESULT (DISPID, const IID &, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, Guid*, uint, ushort, tagDISPPARAMS*, VARIANT*, tagEXCEPINFO*, uint*, int> Invoke;
        }
    }

    [Guid("1C2056CC-5EF4-101B-8BC8-00AA003E3B29")]
    [NativeTypeName("struct IOleInPlaceObjectWindowless : IOleInPlaceObject")]
    [NativeInheritance("IOleInPlaceObject")]
    public unsafe partial struct IOleInPlaceObjectWindowless : IOleInPlaceObjectWindowless.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IOleInPlaceObjectWindowless));

        public Vtbl<IOleInPlaceObjectWindowless>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IOleInPlaceObjectWindowless*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IOleInPlaceObjectWindowless*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IOleInPlaceObjectWindowless*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetWindow([NativeTypeName("HWND *")] nint** phwnd)
        {
            return lpVtbl->GetWindow((IOleInPlaceObjectWindowless*)Unsafe.AsPointer(ref this), phwnd);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ContextSensitiveHelp([NativeTypeName("BOOL")] int fEnterMode)
        {
            return lpVtbl->ContextSensitiveHelp((IOleInPlaceObjectWindowless*)Unsafe.AsPointer(ref this), fEnterMode);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int InPlaceDeactivate()
        {
            return lpVtbl->InPlaceDeactivate((IOleInPlaceObjectWindowless*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int UIDeactivate()
        {
            return lpVtbl->UIDeactivate((IOleInPlaceObjectWindowless*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetObjectRects([NativeTypeName("LPCRECT")] RECT* lprcPosRect, [NativeTypeName("LPCRECT")] RECT* lprcClipRect)
        {
            return lpVtbl->SetObjectRects((IOleInPlaceObjectWindowless*)Unsafe.AsPointer(ref this), lprcPosRect, lprcClipRect);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ReactivateAndUndo()
        {
            return lpVtbl->ReactivateAndUndo((IOleInPlaceObjectWindowless*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnWindowMessage(uint msg, [NativeTypeName("WPARAM")] ulong wParam, [NativeTypeName("LPARAM")] nint lParam, [NativeTypeName("LRESULT *")] nint* plResult)
        {
            return lpVtbl->OnWindowMessage((IOleInPlaceObjectWindowless*)Unsafe.AsPointer(ref this), msg, wParam, lParam, plResult);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetDropTarget(IDropTarget** ppDropTarget)
        {
            return lpVtbl->GetDropTarget((IOleInPlaceObjectWindowless*)Unsafe.AsPointer(ref this), ppDropTarget);
        }

        public interface Interface : IOleInPlaceObject.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int OnWindowMessage(uint msg, [NativeTypeName("WPARAM")] ulong wParam, [NativeTypeName("LPARAM")] nint lParam, [NativeTypeName("LRESULT *")] nint* plResult);

            [return: NativeTypeName("HRESULT")]
            int GetDropTarget(IDropTarget** ppDropTarget);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (HWND *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, nint**, int> GetWindow;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> ContextSensitiveHelp;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> InPlaceDeactivate;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> UIDeactivate;

            [NativeTypeName("HRESULT (LPCRECT, LPCRECT) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, RECT*, RECT*, int> SetObjectRects;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> ReactivateAndUndo;

            [NativeTypeName("HRESULT (UINT, WPARAM, LPARAM, LRESULT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, ulong, nint, nint*, int> OnWindowMessage;

            [NativeTypeName("HRESULT (IDropTarget **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IDropTarget**, int> GetDropTarget;
        }
    }

    public enum tagACTIVATEFLAGS
    {
        ACTIVATE_WINDOWLESS = 1,
    }

    [Guid("9C2CAD80-3424-11CF-B670-00AA004CD6D8")]
    [NativeTypeName("struct IOleInPlaceSiteEx : IOleInPlaceSite")]
    [NativeInheritance("IOleInPlaceSite")]
    public unsafe partial struct IOleInPlaceSiteEx : IOleInPlaceSiteEx.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IOleInPlaceSiteEx));

        public Vtbl<IOleInPlaceSiteEx>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IOleInPlaceSiteEx*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IOleInPlaceSiteEx*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IOleInPlaceSiteEx*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetWindow([NativeTypeName("HWND *")] nint** phwnd)
        {
            return lpVtbl->GetWindow((IOleInPlaceSiteEx*)Unsafe.AsPointer(ref this), phwnd);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ContextSensitiveHelp([NativeTypeName("BOOL")] int fEnterMode)
        {
            return lpVtbl->ContextSensitiveHelp((IOleInPlaceSiteEx*)Unsafe.AsPointer(ref this), fEnterMode);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int CanInPlaceActivate()
        {
            return lpVtbl->CanInPlaceActivate((IOleInPlaceSiteEx*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnInPlaceActivate()
        {
            return lpVtbl->OnInPlaceActivate((IOleInPlaceSiteEx*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnUIActivate()
        {
            return lpVtbl->OnUIActivate((IOleInPlaceSiteEx*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetWindowContext(IOleInPlaceFrame** ppFrame, IOleInPlaceUIWindow** ppDoc, [NativeTypeName("LPRECT")] RECT* lprcPosRect, [NativeTypeName("LPRECT")] RECT* lprcClipRect, [NativeTypeName("LPOLEINPLACEFRAMEINFO")] tagOIFI* lpFrameInfo)
        {
            return lpVtbl->GetWindowContext((IOleInPlaceSiteEx*)Unsafe.AsPointer(ref this), ppFrame, ppDoc, lprcPosRect, lprcClipRect, lpFrameInfo);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Scroll(SIZE scrollExtant)
        {
            return lpVtbl->Scroll((IOleInPlaceSiteEx*)Unsafe.AsPointer(ref this), scrollExtant);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnUIDeactivate([NativeTypeName("BOOL")] int fUndoable)
        {
            return lpVtbl->OnUIDeactivate((IOleInPlaceSiteEx*)Unsafe.AsPointer(ref this), fUndoable);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnInPlaceDeactivate()
        {
            return lpVtbl->OnInPlaceDeactivate((IOleInPlaceSiteEx*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int DiscardUndoState()
        {
            return lpVtbl->DiscardUndoState((IOleInPlaceSiteEx*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int DeactivateAndUndo()
        {
            return lpVtbl->DeactivateAndUndo((IOleInPlaceSiteEx*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnPosRectChange([NativeTypeName("LPCRECT")] RECT* lprcPosRect)
        {
            return lpVtbl->OnPosRectChange((IOleInPlaceSiteEx*)Unsafe.AsPointer(ref this), lprcPosRect);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnInPlaceActivateEx([NativeTypeName("BOOL *")] int* pfNoRedraw, [NativeTypeName("DWORD")] uint dwFlags)
        {
            return lpVtbl->OnInPlaceActivateEx((IOleInPlaceSiteEx*)Unsafe.AsPointer(ref this), pfNoRedraw, dwFlags);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnInPlaceDeactivateEx([NativeTypeName("BOOL")] int fNoRedraw)
        {
            return lpVtbl->OnInPlaceDeactivateEx((IOleInPlaceSiteEx*)Unsafe.AsPointer(ref this), fNoRedraw);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int RequestUIActivate()
        {
            return lpVtbl->RequestUIActivate((IOleInPlaceSiteEx*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IOleInPlaceSite.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int OnInPlaceActivateEx([NativeTypeName("BOOL *")] int* pfNoRedraw, [NativeTypeName("DWORD")] uint dwFlags);

            [return: NativeTypeName("HRESULT")]
            int OnInPlaceDeactivateEx([NativeTypeName("BOOL")] int fNoRedraw);

            [return: NativeTypeName("HRESULT")]
            int RequestUIActivate();
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (HWND *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, nint**, int> GetWindow;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> ContextSensitiveHelp;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> CanInPlaceActivate;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> OnInPlaceActivate;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> OnUIActivate;

            [NativeTypeName("HRESULT (IOleInPlaceFrame **, IOleInPlaceUIWindow **, LPRECT, LPRECT, LPOLEINPLACEFRAMEINFO) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IOleInPlaceFrame**, IOleInPlaceUIWindow**, RECT*, RECT*, tagOIFI*, int> GetWindowContext;

            [NativeTypeName("HRESULT (SIZE) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, SIZE, int> Scroll;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> OnUIDeactivate;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> OnInPlaceDeactivate;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> DiscardUndoState;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> DeactivateAndUndo;

            [NativeTypeName("HRESULT (LPCRECT) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, RECT*, int> OnPosRectChange;

            [NativeTypeName("HRESULT (BOOL *, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int*, uint, int> OnInPlaceActivateEx;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> OnInPlaceDeactivateEx;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> RequestUIActivate;
        }
    }

    public enum tagOLEDCFLAGS
    {
        OLEDC_NODRAW = 0x1,
        OLEDC_PAINTBKGND = 0x2,
        OLEDC_OFFSCREEN = 0x4,
    }

    [Guid("922EADA0-3424-11CF-B670-00AA004CD6D8")]
    [NativeTypeName("struct IOleInPlaceSiteWindowless : IOleInPlaceSiteEx")]
    [NativeInheritance("IOleInPlaceSiteEx")]
    public unsafe partial struct IOleInPlaceSiteWindowless : IOleInPlaceSiteWindowless.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IOleInPlaceSiteWindowless));

        public Vtbl<IOleInPlaceSiteWindowless>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IOleInPlaceSiteWindowless*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IOleInPlaceSiteWindowless*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IOleInPlaceSiteWindowless*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetWindow([NativeTypeName("HWND *")] nint** phwnd)
        {
            return lpVtbl->GetWindow((IOleInPlaceSiteWindowless*)Unsafe.AsPointer(ref this), phwnd);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ContextSensitiveHelp([NativeTypeName("BOOL")] int fEnterMode)
        {
            return lpVtbl->ContextSensitiveHelp((IOleInPlaceSiteWindowless*)Unsafe.AsPointer(ref this), fEnterMode);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int CanInPlaceActivate()
        {
            return lpVtbl->CanInPlaceActivate((IOleInPlaceSiteWindowless*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnInPlaceActivate()
        {
            return lpVtbl->OnInPlaceActivate((IOleInPlaceSiteWindowless*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnUIActivate()
        {
            return lpVtbl->OnUIActivate((IOleInPlaceSiteWindowless*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetWindowContext(IOleInPlaceFrame** ppFrame, IOleInPlaceUIWindow** ppDoc, [NativeTypeName("LPRECT")] RECT* lprcPosRect, [NativeTypeName("LPRECT")] RECT* lprcClipRect, [NativeTypeName("LPOLEINPLACEFRAMEINFO")] tagOIFI* lpFrameInfo)
        {
            return lpVtbl->GetWindowContext((IOleInPlaceSiteWindowless*)Unsafe.AsPointer(ref this), ppFrame, ppDoc, lprcPosRect, lprcClipRect, lpFrameInfo);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Scroll(SIZE scrollExtant)
        {
            return lpVtbl->Scroll((IOleInPlaceSiteWindowless*)Unsafe.AsPointer(ref this), scrollExtant);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnUIDeactivate([NativeTypeName("BOOL")] int fUndoable)
        {
            return lpVtbl->OnUIDeactivate((IOleInPlaceSiteWindowless*)Unsafe.AsPointer(ref this), fUndoable);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnInPlaceDeactivate()
        {
            return lpVtbl->OnInPlaceDeactivate((IOleInPlaceSiteWindowless*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int DiscardUndoState()
        {
            return lpVtbl->DiscardUndoState((IOleInPlaceSiteWindowless*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int DeactivateAndUndo()
        {
            return lpVtbl->DeactivateAndUndo((IOleInPlaceSiteWindowless*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnPosRectChange([NativeTypeName("LPCRECT")] RECT* lprcPosRect)
        {
            return lpVtbl->OnPosRectChange((IOleInPlaceSiteWindowless*)Unsafe.AsPointer(ref this), lprcPosRect);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnInPlaceActivateEx([NativeTypeName("BOOL *")] int* pfNoRedraw, [NativeTypeName("DWORD")] uint dwFlags)
        {
            return lpVtbl->OnInPlaceActivateEx((IOleInPlaceSiteWindowless*)Unsafe.AsPointer(ref this), pfNoRedraw, dwFlags);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnInPlaceDeactivateEx([NativeTypeName("BOOL")] int fNoRedraw)
        {
            return lpVtbl->OnInPlaceDeactivateEx((IOleInPlaceSiteWindowless*)Unsafe.AsPointer(ref this), fNoRedraw);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int RequestUIActivate()
        {
            return lpVtbl->RequestUIActivate((IOleInPlaceSiteWindowless*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int CanWindowlessActivate()
        {
            return lpVtbl->CanWindowlessActivate((IOleInPlaceSiteWindowless*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetCapture()
        {
            return lpVtbl->GetCapture((IOleInPlaceSiteWindowless*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetCapture([NativeTypeName("BOOL")] int fCapture)
        {
            return lpVtbl->SetCapture((IOleInPlaceSiteWindowless*)Unsafe.AsPointer(ref this), fCapture);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetFocus()
        {
            return lpVtbl->GetFocus((IOleInPlaceSiteWindowless*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetFocus([NativeTypeName("BOOL")] int fFocus)
        {
            return lpVtbl->SetFocus((IOleInPlaceSiteWindowless*)Unsafe.AsPointer(ref this), fFocus);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetDC([NativeTypeName("LPCRECT")] RECT* pRect, [NativeTypeName("DWORD")] uint grfFlags, [NativeTypeName("HDC *")] nint** phDC)
        {
            return lpVtbl->GetDC((IOleInPlaceSiteWindowless*)Unsafe.AsPointer(ref this), pRect, grfFlags, phDC);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ReleaseDC([NativeTypeName("HDC")] nint* hDC)
        {
            return lpVtbl->ReleaseDC((IOleInPlaceSiteWindowless*)Unsafe.AsPointer(ref this), hDC);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int InvalidateRect([NativeTypeName("LPCRECT")] RECT* pRect, [NativeTypeName("BOOL")] int fErase)
        {
            return lpVtbl->InvalidateRect((IOleInPlaceSiteWindowless*)Unsafe.AsPointer(ref this), pRect, fErase);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int InvalidateRgn([NativeTypeName("HRGN")] nint* hRGN, [NativeTypeName("BOOL")] int fErase)
        {
            return lpVtbl->InvalidateRgn((IOleInPlaceSiteWindowless*)Unsafe.AsPointer(ref this), hRGN, fErase);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int ScrollRect(int dx, int dy, [NativeTypeName("LPCRECT")] RECT* pRectScroll, [NativeTypeName("LPCRECT")] RECT* pRectClip)
        {
            return lpVtbl->ScrollRect((IOleInPlaceSiteWindowless*)Unsafe.AsPointer(ref this), dx, dy, pRectScroll, pRectClip);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int AdjustRect([NativeTypeName("LPRECT")] RECT* prc)
        {
            return lpVtbl->AdjustRect((IOleInPlaceSiteWindowless*)Unsafe.AsPointer(ref this), prc);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnDefWindowMessage(uint msg, [NativeTypeName("WPARAM")] ulong wParam, [NativeTypeName("LPARAM")] nint lParam, [NativeTypeName("LRESULT *")] nint* plResult)
        {
            return lpVtbl->OnDefWindowMessage((IOleInPlaceSiteWindowless*)Unsafe.AsPointer(ref this), msg, wParam, lParam, plResult);
        }

        public interface Interface : IOleInPlaceSiteEx.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int CanWindowlessActivate();

            [return: NativeTypeName("HRESULT")]
            int GetCapture();

            [return: NativeTypeName("HRESULT")]
            int SetCapture([NativeTypeName("BOOL")] int fCapture);

            [return: NativeTypeName("HRESULT")]
            int GetFocus();

            [return: NativeTypeName("HRESULT")]
            int SetFocus([NativeTypeName("BOOL")] int fFocus);

            [return: NativeTypeName("HRESULT")]
            int GetDC([NativeTypeName("LPCRECT")] RECT* pRect, [NativeTypeName("DWORD")] uint grfFlags, [NativeTypeName("HDC *")] nint** phDC);

            [return: NativeTypeName("HRESULT")]
            int ReleaseDC([NativeTypeName("HDC")] nint* hDC);

            [return: NativeTypeName("HRESULT")]
            int InvalidateRect([NativeTypeName("LPCRECT")] RECT* pRect, [NativeTypeName("BOOL")] int fErase);

            [return: NativeTypeName("HRESULT")]
            int InvalidateRgn([NativeTypeName("HRGN")] nint* hRGN, [NativeTypeName("BOOL")] int fErase);

            [return: NativeTypeName("HRESULT")]
            int ScrollRect(int dx, int dy, [NativeTypeName("LPCRECT")] RECT* pRectScroll, [NativeTypeName("LPCRECT")] RECT* pRectClip);

            [return: NativeTypeName("HRESULT")]
            int AdjustRect([NativeTypeName("LPRECT")] RECT* prc);

            [return: NativeTypeName("HRESULT")]
            int OnDefWindowMessage(uint msg, [NativeTypeName("WPARAM")] ulong wParam, [NativeTypeName("LPARAM")] nint lParam, [NativeTypeName("LRESULT *")] nint* plResult);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (HWND *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, nint**, int> GetWindow;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> ContextSensitiveHelp;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> CanInPlaceActivate;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> OnInPlaceActivate;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> OnUIActivate;

            [NativeTypeName("HRESULT (IOleInPlaceFrame **, IOleInPlaceUIWindow **, LPRECT, LPRECT, LPOLEINPLACEFRAMEINFO) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IOleInPlaceFrame**, IOleInPlaceUIWindow**, RECT*, RECT*, tagOIFI*, int> GetWindowContext;

            [NativeTypeName("HRESULT (SIZE) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, SIZE, int> Scroll;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> OnUIDeactivate;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> OnInPlaceDeactivate;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> DiscardUndoState;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> DeactivateAndUndo;

            [NativeTypeName("HRESULT (LPCRECT) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, RECT*, int> OnPosRectChange;

            [NativeTypeName("HRESULT (BOOL *, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int*, uint, int> OnInPlaceActivateEx;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> OnInPlaceDeactivateEx;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> RequestUIActivate;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> CanWindowlessActivate;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> GetCapture;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> SetCapture;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> GetFocus;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> SetFocus;

            [NativeTypeName("HRESULT (LPCRECT, DWORD, HDC *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, RECT*, uint, nint**, int> GetDC;

            [NativeTypeName("HRESULT (HDC) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, nint*, int> ReleaseDC;

            [NativeTypeName("HRESULT (LPCRECT, BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, RECT*, int, int> InvalidateRect;

            [NativeTypeName("HRESULT (HRGN, BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, nint*, int, int> InvalidateRgn;

            [NativeTypeName("HRESULT (INT, INT, LPCRECT, LPCRECT) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int, RECT*, RECT*, int> ScrollRect;

            [NativeTypeName("HRESULT (LPRECT) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, RECT*, int> AdjustRect;

            [NativeTypeName("HRESULT (UINT, WPARAM, LPARAM, LRESULT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, ulong, nint, nint*, int> OnDefWindowMessage;
        }
    }

    public enum tagVIEWSTATUS
    {
        VIEWSTATUS_OPAQUE = 1,
        VIEWSTATUS_SOLIDBKGND = 2,
        VIEWSTATUS_DVASPECTOPAQUE = 4,
        VIEWSTATUS_DVASPECTTRANSPARENT = 8,
        VIEWSTATUS_SURFACE = 16,
        VIEWSTATUS_3DSURFACE = 32,
    }

    public enum tagHITRESULT
    {
        HITRESULT_OUTSIDE = 0,
        HITRESULT_TRANSPARENT = 1,
        HITRESULT_CLOSE = 2,
        HITRESULT_HIT = 3,
    }

    public enum tagDVASPECT2
    {
        DVASPECT_OPAQUE = 16,
        DVASPECT_TRANSPARENT = 32,
    }

    public partial struct tagExtentInfo
    {
        [NativeTypeName("ULONG")]
        public uint cb;

        [NativeTypeName("DWORD")]
        public uint dwExtentMode;

        [NativeTypeName("SIZEL")]
        public SIZE sizelProposed;
    }

    public enum tagExtentMode
    {
        DVEXTENT_CONTENT = 0,
        DVEXTENT_INTEGRAL = (DVEXTENT_CONTENT + 1),
    }

    public enum tagAspectInfoFlag
    {
        DVASPECTINFOFLAG_CANOPTIMIZE = 1,
    }

    public partial struct tagAspectInfo
    {
        [NativeTypeName("ULONG")]
        public uint cb;

        [NativeTypeName("DWORD")]
        public uint dwFlags;
    }

    [Guid("3AF24292-0C96-11CE-A0CF-00AA00600AB8")]
    [NativeTypeName("struct IViewObjectEx : IViewObject2")]
    [NativeInheritance("IViewObject2")]
    public unsafe partial struct IViewObjectEx : IViewObjectEx.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IViewObjectEx));

        public Vtbl<IViewObjectEx>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IViewObjectEx*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IViewObjectEx*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IViewObjectEx*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Draw([NativeTypeName("DWORD")] uint dwDrawAspect, [NativeTypeName("LONG")] int lindex, void* pvAspect, [NativeTypeName("DVTARGETDEVICE *")] tagDVTARGETDEVICE* ptd, [NativeTypeName("HDC")] nint* hdcTargetDev, [NativeTypeName("HDC")] nint* hdcDraw, [NativeTypeName("LPCRECTL")] RECTL* lprcBounds, [NativeTypeName("LPCRECTL")] RECTL* lprcWBounds, [NativeTypeName("BOOL (*)(ULONG_PTR) __attribute__((stdcall))")] delegate* unmanaged[Stdcall]<ulong, int> pfnContinue, [NativeTypeName("ULONG_PTR")] ulong dwContinue)
        {
            return lpVtbl->Draw((IViewObjectEx*)Unsafe.AsPointer(ref this), dwDrawAspect, lindex, pvAspect, ptd, hdcTargetDev, hdcDraw, lprcBounds, lprcWBounds, pfnContinue, dwContinue);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetColorSet([NativeTypeName("DWORD")] uint dwDrawAspect, [NativeTypeName("LONG")] int lindex, void* pvAspect, [NativeTypeName("DVTARGETDEVICE *")] tagDVTARGETDEVICE* ptd, [NativeTypeName("HDC")] nint* hicTargetDev, [NativeTypeName("LOGPALETTE **")] tagLOGPALETTE** ppColorSet)
        {
            return lpVtbl->GetColorSet((IViewObjectEx*)Unsafe.AsPointer(ref this), dwDrawAspect, lindex, pvAspect, ptd, hicTargetDev, ppColorSet);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Freeze([NativeTypeName("DWORD")] uint dwDrawAspect, [NativeTypeName("LONG")] int lindex, void* pvAspect, [NativeTypeName("DWORD *")] uint* pdwFreeze)
        {
            return lpVtbl->Freeze((IViewObjectEx*)Unsafe.AsPointer(ref this), dwDrawAspect, lindex, pvAspect, pdwFreeze);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Unfreeze([NativeTypeName("DWORD")] uint dwFreeze)
        {
            return lpVtbl->Unfreeze((IViewObjectEx*)Unsafe.AsPointer(ref this), dwFreeze);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetAdvise([NativeTypeName("DWORD")] uint aspects, [NativeTypeName("DWORD")] uint advf, IAdviseSink* pAdvSink)
        {
            return lpVtbl->SetAdvise((IViewObjectEx*)Unsafe.AsPointer(ref this), aspects, advf, pAdvSink);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetAdvise([NativeTypeName("DWORD *")] uint* pAspects, [NativeTypeName("DWORD *")] uint* pAdvf, IAdviseSink** ppAdvSink)
        {
            return lpVtbl->GetAdvise((IViewObjectEx*)Unsafe.AsPointer(ref this), pAspects, pAdvf, ppAdvSink);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetExtent([NativeTypeName("DWORD")] uint dwDrawAspect, [NativeTypeName("LONG")] int lindex, [NativeTypeName("DVTARGETDEVICE *")] tagDVTARGETDEVICE* ptd, [NativeTypeName("LPSIZEL")] SIZE* lpsizel)
        {
            return lpVtbl->GetExtent((IViewObjectEx*)Unsafe.AsPointer(ref this), dwDrawAspect, lindex, ptd, lpsizel);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetRect([NativeTypeName("DWORD")] uint dwAspect, [NativeTypeName("LPRECTL")] RECTL* pRect)
        {
            return lpVtbl->GetRect((IViewObjectEx*)Unsafe.AsPointer(ref this), dwAspect, pRect);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetViewStatus([NativeTypeName("DWORD *")] uint* pdwStatus)
        {
            return lpVtbl->GetViewStatus((IViewObjectEx*)Unsafe.AsPointer(ref this), pdwStatus);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryHitPoint([NativeTypeName("DWORD")] uint dwAspect, [NativeTypeName("LPCRECT")] RECT* pRectBounds, POINT ptlLoc, [NativeTypeName("LONG")] int lCloseHint, [NativeTypeName("DWORD *")] uint* pHitResult)
        {
            return lpVtbl->QueryHitPoint((IViewObjectEx*)Unsafe.AsPointer(ref this), dwAspect, pRectBounds, ptlLoc, lCloseHint, pHitResult);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryHitRect([NativeTypeName("DWORD")] uint dwAspect, [NativeTypeName("LPCRECT")] RECT* pRectBounds, [NativeTypeName("LPCRECT")] RECT* pRectLoc, [NativeTypeName("LONG")] int lCloseHint, [NativeTypeName("DWORD *")] uint* pHitResult)
        {
            return lpVtbl->QueryHitRect((IViewObjectEx*)Unsafe.AsPointer(ref this), dwAspect, pRectBounds, pRectLoc, lCloseHint, pHitResult);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetNaturalExtent([NativeTypeName("DWORD")] uint dwAspect, [NativeTypeName("LONG")] int lindex, [NativeTypeName("DVTARGETDEVICE *")] tagDVTARGETDEVICE* ptd, [NativeTypeName("HDC")] nint* hicTargetDev, [NativeTypeName("DVEXTENTINFO *")] tagExtentInfo* pExtentInfo, [NativeTypeName("LPSIZEL")] SIZE* pSizel)
        {
            return lpVtbl->GetNaturalExtent((IViewObjectEx*)Unsafe.AsPointer(ref this), dwAspect, lindex, ptd, hicTargetDev, pExtentInfo, pSizel);
        }

        public interface Interface : IViewObject2.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int GetRect([NativeTypeName("DWORD")] uint dwAspect, [NativeTypeName("LPRECTL")] RECTL* pRect);

            [return: NativeTypeName("HRESULT")]
            int GetViewStatus([NativeTypeName("DWORD *")] uint* pdwStatus);

            [return: NativeTypeName("HRESULT")]
            int QueryHitPoint([NativeTypeName("DWORD")] uint dwAspect, [NativeTypeName("LPCRECT")] RECT* pRectBounds, POINT ptlLoc, [NativeTypeName("LONG")] int lCloseHint, [NativeTypeName("DWORD *")] uint* pHitResult);

            [return: NativeTypeName("HRESULT")]
            int QueryHitRect([NativeTypeName("DWORD")] uint dwAspect, [NativeTypeName("LPCRECT")] RECT* pRectBounds, [NativeTypeName("LPCRECT")] RECT* pRectLoc, [NativeTypeName("LONG")] int lCloseHint, [NativeTypeName("DWORD *")] uint* pHitResult);

            [return: NativeTypeName("HRESULT")]
            int GetNaturalExtent([NativeTypeName("DWORD")] uint dwAspect, [NativeTypeName("LONG")] int lindex, [NativeTypeName("DVTARGETDEVICE *")] tagDVTARGETDEVICE* ptd, [NativeTypeName("HDC")] nint* hicTargetDev, [NativeTypeName("DVEXTENTINFO *")] tagExtentInfo* pExtentInfo, [NativeTypeName("LPSIZEL")] SIZE* pSizel);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (DWORD, LONG, void *, DVTARGETDEVICE *, HDC, HDC, LPCRECTL, LPCRECTL, BOOL (*)(ULONG_PTR) __attribute__((stdcall)), ULONG_PTR) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int, void*, tagDVTARGETDEVICE*, nint*, nint*, RECTL*, RECTL*, delegate* unmanaged[Stdcall]<ulong, int>, ulong, int> Draw;

            [NativeTypeName("HRESULT (DWORD, LONG, void *, DVTARGETDEVICE *, HDC, LOGPALETTE **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int, void*, tagDVTARGETDEVICE*, nint*, tagLOGPALETTE**, int> GetColorSet;

            [NativeTypeName("HRESULT (DWORD, LONG, void *, DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int, void*, uint*, int> Freeze;

            [NativeTypeName("HRESULT (DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> Unfreeze;

            [NativeTypeName("HRESULT (DWORD, DWORD, IAdviseSink *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint, IAdviseSink*, int> SetAdvise;

            [NativeTypeName("HRESULT (DWORD *, DWORD *, IAdviseSink **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, uint*, IAdviseSink**, int> GetAdvise;

            [NativeTypeName("HRESULT (DWORD, LONG, DVTARGETDEVICE *, LPSIZEL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int, tagDVTARGETDEVICE*, SIZE*, int> GetExtent;

            [NativeTypeName("HRESULT (DWORD, LPRECTL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, RECTL*, int> GetRect;

            [NativeTypeName("HRESULT (DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, int> GetViewStatus;

            [NativeTypeName("HRESULT (DWORD, LPCRECT, POINT, LONG, DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, RECT*, POINT, int, uint*, int> QueryHitPoint;

            [NativeTypeName("HRESULT (DWORD, LPCRECT, LPCRECT, LONG, DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, RECT*, RECT*, int, uint*, int> QueryHitRect;

            [NativeTypeName("HRESULT (DWORD, LONG, DVTARGETDEVICE *, HDC, DVEXTENTINFO *, LPSIZEL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int, tagDVTARGETDEVICE*, nint*, tagExtentInfo*, SIZE*, int> GetNaturalExtent;
        }
    }

    [Guid("894AD3B0-EF97-11CE-9BC9-00AA00608E01")]
    [NativeTypeName("struct IOleUndoUnit : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IOleUndoUnit : IOleUndoUnit.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IOleUndoUnit));

        public Vtbl<IOleUndoUnit>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IOleUndoUnit*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IOleUndoUnit*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IOleUndoUnit*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Do(IOleUndoManager* pUndoManager)
        {
            return lpVtbl->Do((IOleUndoUnit*)Unsafe.AsPointer(ref this), pUndoManager);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetDescription([NativeTypeName("BSTR *")] char** pBstr)
        {
            return lpVtbl->GetDescription((IOleUndoUnit*)Unsafe.AsPointer(ref this), pBstr);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetUnitType([NativeTypeName("CLSID *")] Guid* pClsid, [NativeTypeName("LONG *")] int* plID)
        {
            return lpVtbl->GetUnitType((IOleUndoUnit*)Unsafe.AsPointer(ref this), pClsid, plID);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnNextAdd()
        {
            return lpVtbl->OnNextAdd((IOleUndoUnit*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Do(IOleUndoManager* pUndoManager);

            [return: NativeTypeName("HRESULT")]
            int GetDescription([NativeTypeName("BSTR *")] char** pBstr);

            [return: NativeTypeName("HRESULT")]
            int GetUnitType([NativeTypeName("CLSID *")] Guid* pClsid, [NativeTypeName("LONG *")] int* plID);

            [return: NativeTypeName("HRESULT")]
            int OnNextAdd();
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (IOleUndoManager *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IOleUndoManager*, int> Do;

            [NativeTypeName("HRESULT (BSTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char**, int> GetDescription;

            [NativeTypeName("HRESULT (CLSID *, LONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, int*, int> GetUnitType;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> OnNextAdd;
        }
    }

    [Guid("A1FAF330-EF97-11CE-9BC9-00AA00608E01")]
    [NativeTypeName("struct IOleParentUndoUnit : IOleUndoUnit")]
    [NativeInheritance("IOleUndoUnit")]
    public unsafe partial struct IOleParentUndoUnit : IOleParentUndoUnit.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IOleParentUndoUnit));

        public Vtbl<IOleParentUndoUnit>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IOleParentUndoUnit*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IOleParentUndoUnit*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IOleParentUndoUnit*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Do(IOleUndoManager* pUndoManager)
        {
            return lpVtbl->Do((IOleParentUndoUnit*)Unsafe.AsPointer(ref this), pUndoManager);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetDescription([NativeTypeName("BSTR *")] char** pBstr)
        {
            return lpVtbl->GetDescription((IOleParentUndoUnit*)Unsafe.AsPointer(ref this), pBstr);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetUnitType([NativeTypeName("CLSID *")] Guid* pClsid, [NativeTypeName("LONG *")] int* plID)
        {
            return lpVtbl->GetUnitType((IOleParentUndoUnit*)Unsafe.AsPointer(ref this), pClsid, plID);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnNextAdd()
        {
            return lpVtbl->OnNextAdd((IOleParentUndoUnit*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Open(IOleParentUndoUnit* pPUU)
        {
            return lpVtbl->Open((IOleParentUndoUnit*)Unsafe.AsPointer(ref this), pPUU);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Close(IOleParentUndoUnit* pPUU, [NativeTypeName("BOOL")] int fCommit)
        {
            return lpVtbl->Close((IOleParentUndoUnit*)Unsafe.AsPointer(ref this), pPUU, fCommit);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Add(IOleUndoUnit* pUU)
        {
            return lpVtbl->Add((IOleParentUndoUnit*)Unsafe.AsPointer(ref this), pUU);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int FindUnit(IOleUndoUnit* pUU)
        {
            return lpVtbl->FindUnit((IOleParentUndoUnit*)Unsafe.AsPointer(ref this), pUU);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetParentState([NativeTypeName("DWORD *")] uint* pdwState)
        {
            return lpVtbl->GetParentState((IOleParentUndoUnit*)Unsafe.AsPointer(ref this), pdwState);
        }

        public interface Interface : IOleUndoUnit.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Open(IOleParentUndoUnit* pPUU);

            [return: NativeTypeName("HRESULT")]
            int Close(IOleParentUndoUnit* pPUU, [NativeTypeName("BOOL")] int fCommit);

            [return: NativeTypeName("HRESULT")]
            int Add(IOleUndoUnit* pUU);

            [return: NativeTypeName("HRESULT")]
            int FindUnit(IOleUndoUnit* pUU);

            [return: NativeTypeName("HRESULT")]
            int GetParentState([NativeTypeName("DWORD *")] uint* pdwState);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (IOleUndoManager *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IOleUndoManager*, int> Do;

            [NativeTypeName("HRESULT (BSTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char**, int> GetDescription;

            [NativeTypeName("HRESULT (CLSID *, LONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, int*, int> GetUnitType;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> OnNextAdd;

            [NativeTypeName("HRESULT (IOleParentUndoUnit *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IOleParentUndoUnit*, int> Open;

            [NativeTypeName("HRESULT (IOleParentUndoUnit *, BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IOleParentUndoUnit*, int, int> Close;

            [NativeTypeName("HRESULT (IOleUndoUnit *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IOleUndoUnit*, int> Add;

            [NativeTypeName("HRESULT (IOleUndoUnit *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IOleUndoUnit*, int> FindUnit;

            [NativeTypeName("HRESULT (DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, int> GetParentState;
        }
    }

    [Guid("B3E7C340-EF97-11CE-9BC9-00AA00608E01")]
    [NativeTypeName("struct IEnumOleUndoUnits : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IEnumOleUndoUnits : IEnumOleUndoUnits.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IEnumOleUndoUnits));

        public Vtbl<IEnumOleUndoUnits>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IEnumOleUndoUnits*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IEnumOleUndoUnits*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IEnumOleUndoUnits*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Next([NativeTypeName("ULONG")] uint cElt, IOleUndoUnit** rgElt, [NativeTypeName("ULONG *")] uint* pcEltFetched)
        {
            return lpVtbl->Next((IEnumOleUndoUnits*)Unsafe.AsPointer(ref this), cElt, rgElt, pcEltFetched);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Skip([NativeTypeName("ULONG")] uint cElt)
        {
            return lpVtbl->Skip((IEnumOleUndoUnits*)Unsafe.AsPointer(ref this), cElt);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Reset()
        {
            return lpVtbl->Reset((IEnumOleUndoUnits*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Clone(IEnumOleUndoUnits** ppEnum)
        {
            return lpVtbl->Clone((IEnumOleUndoUnits*)Unsafe.AsPointer(ref this), ppEnum);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Next([NativeTypeName("ULONG")] uint cElt, IOleUndoUnit** rgElt, [NativeTypeName("ULONG *")] uint* pcEltFetched);

            [return: NativeTypeName("HRESULT")]
            int Skip([NativeTypeName("ULONG")] uint cElt);

            [return: NativeTypeName("HRESULT")]
            int Reset();

            [return: NativeTypeName("HRESULT")]
            int Clone(IEnumOleUndoUnits** ppEnum);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (ULONG, IOleUndoUnit **, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, IOleUndoUnit**, uint*, int> Next;

            [NativeTypeName("HRESULT (ULONG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int> Skip;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> Reset;

            [NativeTypeName("HRESULT (IEnumOleUndoUnits **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IEnumOleUndoUnits**, int> Clone;
        }
    }

    [Guid("D001F200-EF97-11CE-9BC9-00AA00608E01")]
    [NativeTypeName("struct IOleUndoManager : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IOleUndoManager : IOleUndoManager.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IOleUndoManager));

        public Vtbl<IOleUndoManager>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IOleUndoManager*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IOleUndoManager*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IOleUndoManager*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Open(IOleParentUndoUnit* pPUU)
        {
            return lpVtbl->Open((IOleUndoManager*)Unsafe.AsPointer(ref this), pPUU);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Close(IOleParentUndoUnit* pPUU, [NativeTypeName("BOOL")] int fCommit)
        {
            return lpVtbl->Close((IOleUndoManager*)Unsafe.AsPointer(ref this), pPUU, fCommit);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Add(IOleUndoUnit* pUU)
        {
            return lpVtbl->Add((IOleUndoManager*)Unsafe.AsPointer(ref this), pUU);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetOpenParentState([NativeTypeName("DWORD *")] uint* pdwState)
        {
            return lpVtbl->GetOpenParentState((IOleUndoManager*)Unsafe.AsPointer(ref this), pdwState);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int DiscardFrom(IOleUndoUnit* pUU)
        {
            return lpVtbl->DiscardFrom((IOleUndoManager*)Unsafe.AsPointer(ref this), pUU);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int UndoTo(IOleUndoUnit* pUU)
        {
            return lpVtbl->UndoTo((IOleUndoManager*)Unsafe.AsPointer(ref this), pUU);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int RedoTo(IOleUndoUnit* pUU)
        {
            return lpVtbl->RedoTo((IOleUndoManager*)Unsafe.AsPointer(ref this), pUU);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int EnumUndoable(IEnumOleUndoUnits** ppEnum)
        {
            return lpVtbl->EnumUndoable((IOleUndoManager*)Unsafe.AsPointer(ref this), ppEnum);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int EnumRedoable(IEnumOleUndoUnits** ppEnum)
        {
            return lpVtbl->EnumRedoable((IOleUndoManager*)Unsafe.AsPointer(ref this), ppEnum);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetLastUndoDescription([NativeTypeName("BSTR *")] char** pBstr)
        {
            return lpVtbl->GetLastUndoDescription((IOleUndoManager*)Unsafe.AsPointer(ref this), pBstr);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetLastRedoDescription([NativeTypeName("BSTR *")] char** pBstr)
        {
            return lpVtbl->GetLastRedoDescription((IOleUndoManager*)Unsafe.AsPointer(ref this), pBstr);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Enable([NativeTypeName("BOOL")] int fEnable)
        {
            return lpVtbl->Enable((IOleUndoManager*)Unsafe.AsPointer(ref this), fEnable);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Open(IOleParentUndoUnit* pPUU);

            [return: NativeTypeName("HRESULT")]
            int Close(IOleParentUndoUnit* pPUU, [NativeTypeName("BOOL")] int fCommit);

            [return: NativeTypeName("HRESULT")]
            int Add(IOleUndoUnit* pUU);

            [return: NativeTypeName("HRESULT")]
            int GetOpenParentState([NativeTypeName("DWORD *")] uint* pdwState);

            [return: NativeTypeName("HRESULT")]
            int DiscardFrom(IOleUndoUnit* pUU);

            [return: NativeTypeName("HRESULT")]
            int UndoTo(IOleUndoUnit* pUU);

            [return: NativeTypeName("HRESULT")]
            int RedoTo(IOleUndoUnit* pUU);

            [return: NativeTypeName("HRESULT")]
            int EnumUndoable(IEnumOleUndoUnits** ppEnum);

            [return: NativeTypeName("HRESULT")]
            int EnumRedoable(IEnumOleUndoUnits** ppEnum);

            [return: NativeTypeName("HRESULT")]
            int GetLastUndoDescription([NativeTypeName("BSTR *")] char** pBstr);

            [return: NativeTypeName("HRESULT")]
            int GetLastRedoDescription([NativeTypeName("BSTR *")] char** pBstr);

            [return: NativeTypeName("HRESULT")]
            int Enable([NativeTypeName("BOOL")] int fEnable);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (IOleParentUndoUnit *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IOleParentUndoUnit*, int> Open;

            [NativeTypeName("HRESULT (IOleParentUndoUnit *, BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IOleParentUndoUnit*, int, int> Close;

            [NativeTypeName("HRESULT (IOleUndoUnit *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IOleUndoUnit*, int> Add;

            [NativeTypeName("HRESULT (DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, int> GetOpenParentState;

            [NativeTypeName("HRESULT (IOleUndoUnit *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IOleUndoUnit*, int> DiscardFrom;

            [NativeTypeName("HRESULT (IOleUndoUnit *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IOleUndoUnit*, int> UndoTo;

            [NativeTypeName("HRESULT (IOleUndoUnit *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IOleUndoUnit*, int> RedoTo;

            [NativeTypeName("HRESULT (IEnumOleUndoUnits **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IEnumOleUndoUnits**, int> EnumUndoable;

            [NativeTypeName("HRESULT (IEnumOleUndoUnits **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IEnumOleUndoUnits**, int> EnumRedoable;

            [NativeTypeName("HRESULT (BSTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char**, int> GetLastUndoDescription;

            [NativeTypeName("HRESULT (BSTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char**, int> GetLastRedoDescription;

            [NativeTypeName("HRESULT (BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, int> Enable;
        }
    }

    public enum tagPOINTERINACTIVE
    {
        POINTERINACTIVE_ACTIVATEONENTRY = 1,
        POINTERINACTIVE_DEACTIVATEONLEAVE = 2,
        POINTERINACTIVE_ACTIVATEONDRAG = 4,
    }

    [Guid("55980BA0-35AA-11CF-B671-00AA004CD6D8")]
    [NativeTypeName("struct IPointerInactive : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IPointerInactive : IPointerInactive.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IPointerInactive));

        public Vtbl<IPointerInactive>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IPointerInactive*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IPointerInactive*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IPointerInactive*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetActivationPolicy([NativeTypeName("DWORD *")] uint* pdwPolicy)
        {
            return lpVtbl->GetActivationPolicy((IPointerInactive*)Unsafe.AsPointer(ref this), pdwPolicy);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnInactiveMouseMove([NativeTypeName("LPCRECT")] RECT* pRectBounds, [NativeTypeName("LONG")] int x, [NativeTypeName("LONG")] int y, [NativeTypeName("DWORD")] uint grfKeyState)
        {
            return lpVtbl->OnInactiveMouseMove((IPointerInactive*)Unsafe.AsPointer(ref this), pRectBounds, x, y, grfKeyState);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int OnInactiveSetCursor([NativeTypeName("LPCRECT")] RECT* pRectBounds, [NativeTypeName("LONG")] int x, [NativeTypeName("LONG")] int y, [NativeTypeName("DWORD")] uint dwMouseMsg, [NativeTypeName("BOOL")] int fSetAlways)
        {
            return lpVtbl->OnInactiveSetCursor((IPointerInactive*)Unsafe.AsPointer(ref this), pRectBounds, x, y, dwMouseMsg, fSetAlways);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int GetActivationPolicy([NativeTypeName("DWORD *")] uint* pdwPolicy);

            [return: NativeTypeName("HRESULT")]
            int OnInactiveMouseMove([NativeTypeName("LPCRECT")] RECT* pRectBounds, [NativeTypeName("LONG")] int x, [NativeTypeName("LONG")] int y, [NativeTypeName("DWORD")] uint grfKeyState);

            [return: NativeTypeName("HRESULT")]
            int OnInactiveSetCursor([NativeTypeName("LPCRECT")] RECT* pRectBounds, [NativeTypeName("LONG")] int x, [NativeTypeName("LONG")] int y, [NativeTypeName("DWORD")] uint dwMouseMsg, [NativeTypeName("BOOL")] int fSetAlways);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (DWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, int> GetActivationPolicy;

            [NativeTypeName("HRESULT (LPCRECT, LONG, LONG, DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, RECT*, int, int, uint, int> OnInactiveMouseMove;

            [NativeTypeName("HRESULT (LPCRECT, LONG, LONG, DWORD, BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, RECT*, int, int, uint, int, int> OnInactiveSetCursor;
        }
    }

    [Guid("FC4801A3-2BA9-11CF-A229-00AA003D7352")]
    [NativeTypeName("struct IObjectWithSite : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IObjectWithSite : IObjectWithSite.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IObjectWithSite));

        public Vtbl<IObjectWithSite>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IObjectWithSite*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IObjectWithSite*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IObjectWithSite*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetSite(IUnknown* pUnkSite)
        {
            return lpVtbl->SetSite((IObjectWithSite*)Unsafe.AsPointer(ref this), pUnkSite);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetSite([NativeTypeName("const IID &")] Guid* riid, void** ppvSite)
        {
            return lpVtbl->GetSite((IObjectWithSite*)Unsafe.AsPointer(ref this), riid, ppvSite);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int SetSite(IUnknown* pUnkSite);

            [return: NativeTypeName("HRESULT")]
            int GetSite([NativeTypeName("const IID &")] Guid* riid, void** ppvSite);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (IUnknown *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IUnknown*, int> SetSite;

            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> GetSite;
        }
    }

    public unsafe partial struct tagCALPOLESTR
    {
        [NativeTypeName("ULONG")]
        public uint cElems;

        [NativeTypeName("LPOLESTR *")]
        public char** pElems;
    }

    public unsafe partial struct tagCADWORD
    {
        [NativeTypeName("ULONG")]
        public uint cElems;

        [NativeTypeName("DWORD *")]
        public uint* pElems;
    }

    [Guid("376BD3AA-3845-101B-84ED-08002B2EC713")]
    [NativeTypeName("struct IPerPropertyBrowsing : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IPerPropertyBrowsing : IPerPropertyBrowsing.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IPerPropertyBrowsing));

        public Vtbl<IPerPropertyBrowsing>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IPerPropertyBrowsing*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IPerPropertyBrowsing*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IPerPropertyBrowsing*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetDisplayString([NativeTypeName("DISPID")] int dispID, [NativeTypeName("BSTR *")] char** pBstr)
        {
            return lpVtbl->GetDisplayString((IPerPropertyBrowsing*)Unsafe.AsPointer(ref this), dispID, pBstr);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int MapPropertyToPage([NativeTypeName("DISPID")] int dispID, [NativeTypeName("CLSID *")] Guid* pClsid)
        {
            return lpVtbl->MapPropertyToPage((IPerPropertyBrowsing*)Unsafe.AsPointer(ref this), dispID, pClsid);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetPredefinedStrings([NativeTypeName("DISPID")] int dispID, [NativeTypeName("CALPOLESTR *")] tagCALPOLESTR* pCaStringsOut, [NativeTypeName("CADWORD *")] tagCADWORD* pCaCookiesOut)
        {
            return lpVtbl->GetPredefinedStrings((IPerPropertyBrowsing*)Unsafe.AsPointer(ref this), dispID, pCaStringsOut, pCaCookiesOut);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetPredefinedValue([NativeTypeName("DISPID")] int dispID, [NativeTypeName("DWORD")] uint dwCookie, VARIANT* pVarOut)
        {
            return lpVtbl->GetPredefinedValue((IPerPropertyBrowsing*)Unsafe.AsPointer(ref this), dispID, dwCookie, pVarOut);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int GetDisplayString([NativeTypeName("DISPID")] int dispID, [NativeTypeName("BSTR *")] char** pBstr);

            [return: NativeTypeName("HRESULT")]
            int MapPropertyToPage([NativeTypeName("DISPID")] int dispID, [NativeTypeName("CLSID *")] Guid* pClsid);

            [return: NativeTypeName("HRESULT")]
            int GetPredefinedStrings([NativeTypeName("DISPID")] int dispID, [NativeTypeName("CALPOLESTR *")] tagCALPOLESTR* pCaStringsOut, [NativeTypeName("CADWORD *")] tagCADWORD* pCaCookiesOut);

            [return: NativeTypeName("HRESULT")]
            int GetPredefinedValue([NativeTypeName("DISPID")] int dispID, [NativeTypeName("DWORD")] uint dwCookie, VARIANT* pVarOut);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (DISPID, BSTR *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, char**, int> GetDisplayString;

            [NativeTypeName("HRESULT (DISPID, CLSID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, Guid*, int> MapPropertyToPage;

            [NativeTypeName("HRESULT (DISPID, CALPOLESTR *, CADWORD *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, tagCALPOLESTR*, tagCADWORD*, int> GetPredefinedStrings;

            [NativeTypeName("HRESULT (DISPID, DWORD, VARIANT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int, uint, VARIANT*, int> GetPredefinedValue;
        }
    }

    public enum tagPROPBAG2_TYPE
    {
        PROPBAG2_TYPE_UNDEFINED = 0,
        PROPBAG2_TYPE_DATA = 1,
        PROPBAG2_TYPE_URL = 2,
        PROPBAG2_TYPE_OBJECT = 3,
        PROPBAG2_TYPE_STREAM = 4,
        PROPBAG2_TYPE_STORAGE = 5,
        PROPBAG2_TYPE_MONIKER = 6,
    }

    public unsafe partial struct tagPROPBAG2
    {
        [NativeTypeName("DWORD")]
        public uint dwType;

        [NativeTypeName("VARTYPE")]
        public ushort vt;

        [NativeTypeName("CLIPFORMAT")]
        public ushort cfType;

        [NativeTypeName("DWORD")]
        public uint dwHint;

        [NativeTypeName("LPOLESTR")]
        public char* pstrName;

        [NativeTypeName("CLSID")]
        public Guid clsid;
    }

    [Guid("22F55882-280B-11D0-A8A9-00A0C90C2004")]
    [NativeTypeName("struct IPropertyBag2 : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IPropertyBag2 : IPropertyBag2.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IPropertyBag2));

        public Vtbl<IPropertyBag2>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IPropertyBag2*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IPropertyBag2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IPropertyBag2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Read([NativeTypeName("ULONG")] uint cProperties, [NativeTypeName("PROPBAG2 *")] tagPROPBAG2* pPropBag, IErrorLog* pErrLog, VARIANT* pvarValue, [NativeTypeName("HRESULT *")] int* phrError)
        {
            return lpVtbl->Read((IPropertyBag2*)Unsafe.AsPointer(ref this), cProperties, pPropBag, pErrLog, pvarValue, phrError);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Write([NativeTypeName("ULONG")] uint cProperties, [NativeTypeName("PROPBAG2 *")] tagPROPBAG2* pPropBag, VARIANT* pvarValue)
        {
            return lpVtbl->Write((IPropertyBag2*)Unsafe.AsPointer(ref this), cProperties, pPropBag, pvarValue);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int CountProperties([NativeTypeName("ULONG *")] uint* pcProperties)
        {
            return lpVtbl->CountProperties((IPropertyBag2*)Unsafe.AsPointer(ref this), pcProperties);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetPropertyInfo([NativeTypeName("ULONG")] uint iProperty, [NativeTypeName("ULONG")] uint cProperties, [NativeTypeName("PROPBAG2 *")] tagPROPBAG2* pPropBag, [NativeTypeName("ULONG *")] uint* pcProperties)
        {
            return lpVtbl->GetPropertyInfo((IPropertyBag2*)Unsafe.AsPointer(ref this), iProperty, cProperties, pPropBag, pcProperties);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int LoadObject([NativeTypeName("LPCOLESTR")] char* pstrName, [NativeTypeName("DWORD")] uint dwHint, IUnknown* pUnkObject, IErrorLog* pErrLog)
        {
            return lpVtbl->LoadObject((IPropertyBag2*)Unsafe.AsPointer(ref this), pstrName, dwHint, pUnkObject, pErrLog);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int Read([NativeTypeName("ULONG")] uint cProperties, [NativeTypeName("PROPBAG2 *")] tagPROPBAG2* pPropBag, IErrorLog* pErrLog, VARIANT* pvarValue, [NativeTypeName("HRESULT *")] int* phrError);

            [return: NativeTypeName("HRESULT")]
            int Write([NativeTypeName("ULONG")] uint cProperties, [NativeTypeName("PROPBAG2 *")] tagPROPBAG2* pPropBag, VARIANT* pvarValue);

            [return: NativeTypeName("HRESULT")]
            int CountProperties([NativeTypeName("ULONG *")] uint* pcProperties);

            [return: NativeTypeName("HRESULT")]
            int GetPropertyInfo([NativeTypeName("ULONG")] uint iProperty, [NativeTypeName("ULONG")] uint cProperties, [NativeTypeName("PROPBAG2 *")] tagPROPBAG2* pPropBag, [NativeTypeName("ULONG *")] uint* pcProperties);

            [return: NativeTypeName("HRESULT")]
            int LoadObject([NativeTypeName("LPCOLESTR")] char* pstrName, [NativeTypeName("DWORD")] uint dwHint, IUnknown* pUnkObject, IErrorLog* pErrLog);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (ULONG, PROPBAG2 *, IErrorLog *, VARIANT *, HRESULT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, tagPROPBAG2*, IErrorLog*, VARIANT*, int*, int> Read;

            [NativeTypeName("HRESULT (ULONG, PROPBAG2 *, VARIANT *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, tagPROPBAG2*, VARIANT*, int> Write;

            [NativeTypeName("HRESULT (ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint*, int> CountProperties;

            [NativeTypeName("HRESULT (ULONG, ULONG, PROPBAG2 *, ULONG *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, uint, tagPROPBAG2*, uint*, int> GetPropertyInfo;

            [NativeTypeName("HRESULT (LPCOLESTR, DWORD, IUnknown *, IErrorLog *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, char*, uint, IUnknown*, IErrorLog*, int> LoadObject;
        }
    }

    [Guid("22F55881-280B-11D0-A8A9-00A0C90C2004")]
    [NativeTypeName("struct IPersistPropertyBag2 : IPersist")]
    [NativeInheritance("IPersist")]
    public unsafe partial struct IPersistPropertyBag2 : IPersistPropertyBag2.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IPersistPropertyBag2));

        public Vtbl<IPersistPropertyBag2>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IPersistPropertyBag2*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IPersistPropertyBag2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IPersistPropertyBag2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetClassID([NativeTypeName("CLSID *")] Guid* pClassID)
        {
            return lpVtbl->GetClassID((IPersistPropertyBag2*)Unsafe.AsPointer(ref this), pClassID);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int InitNew()
        {
            return lpVtbl->InitNew((IPersistPropertyBag2*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Load(IPropertyBag2* pPropBag, IErrorLog* pErrLog)
        {
            return lpVtbl->Load((IPersistPropertyBag2*)Unsafe.AsPointer(ref this), pPropBag, pErrLog);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int Save(IPropertyBag2* pPropBag, [NativeTypeName("BOOL")] int fClearDirty, [NativeTypeName("BOOL")] int fSaveAllProperties)
        {
            return lpVtbl->Save((IPersistPropertyBag2*)Unsafe.AsPointer(ref this), pPropBag, fClearDirty, fSaveAllProperties);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int IsDirty()
        {
            return lpVtbl->IsDirty((IPersistPropertyBag2*)Unsafe.AsPointer(ref this));
        }

        public interface Interface : IPersist.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int InitNew();

            [return: NativeTypeName("HRESULT")]
            int Load(IPropertyBag2* pPropBag, IErrorLog* pErrLog);

            [return: NativeTypeName("HRESULT")]
            int Save(IPropertyBag2* pPropBag, [NativeTypeName("BOOL")] int fClearDirty, [NativeTypeName("BOOL")] int fSaveAllProperties);

            [return: NativeTypeName("HRESULT")]
            int IsDirty();
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (CLSID *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, int> GetClassID;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> InitNew;

            [NativeTypeName("HRESULT (IPropertyBag2 *, IErrorLog *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IPropertyBag2*, IErrorLog*, int> Load;

            [NativeTypeName("HRESULT (IPropertyBag2 *, BOOL, BOOL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IPropertyBag2*, int, int, int> Save;

            [NativeTypeName("HRESULT () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, int> IsDirty;
        }
    }

    [Guid("3AF24290-0C96-11CE-A0CF-00AA00600AB8")]
    [NativeTypeName("struct IAdviseSinkEx : IAdviseSink")]
    [NativeInheritance("IAdviseSink")]
    public unsafe partial struct IAdviseSinkEx : IAdviseSinkEx.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IAdviseSinkEx));

        public Vtbl<IAdviseSinkEx>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IAdviseSinkEx*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IAdviseSinkEx*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IAdviseSinkEx*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void OnDataChange([NativeTypeName("FORMATETC *")] tagFORMATETC* pFormatetc, [NativeTypeName("STGMEDIUM *")] tagSTGMEDIUM* pStgmed)
        {
            lpVtbl->OnDataChange((IAdviseSinkEx*)Unsafe.AsPointer(ref this), pFormatetc, pStgmed);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void OnViewChange([NativeTypeName("DWORD")] uint dwAspect, [NativeTypeName("LONG")] int lindex)
        {
            lpVtbl->OnViewChange((IAdviseSinkEx*)Unsafe.AsPointer(ref this), dwAspect, lindex);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void OnRename(IMoniker* pmk)
        {
            lpVtbl->OnRename((IAdviseSinkEx*)Unsafe.AsPointer(ref this), pmk);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void OnSave()
        {
            lpVtbl->OnSave((IAdviseSinkEx*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void OnClose()
        {
            lpVtbl->OnClose((IAdviseSinkEx*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void OnViewStatusChange([NativeTypeName("DWORD")] uint dwViewStatus)
        {
            lpVtbl->OnViewStatusChange((IAdviseSinkEx*)Unsafe.AsPointer(ref this), dwViewStatus);
        }

        public interface Interface : IAdviseSink.Interface
        {
            void OnViewStatusChange([NativeTypeName("DWORD")] uint dwViewStatus);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("void (FORMATETC *, STGMEDIUM *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagFORMATETC*, tagSTGMEDIUM*, void> OnDataChange;

            [NativeTypeName("void (DWORD, LONG) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, int, void> OnViewChange;

            [NativeTypeName("void (IMoniker *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, IMoniker*, void> OnRename;

            [NativeTypeName("void () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void> OnSave;

            [NativeTypeName("void () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, void> OnClose;

            [NativeTypeName("void (DWORD) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint, void> OnViewStatusChange;
        }
    }

    public enum tagQACONTAINERFLAGS
    {
        QACONTAINER_SHOWHATCHING = 0x1,
        QACONTAINER_SHOWGRABHANDLES = 0x2,
        QACONTAINER_USERMODE = 0x4,
        QACONTAINER_DISPLAYASDEFAULT = 0x8,
        QACONTAINER_UIDEAD = 0x10,
        QACONTAINER_AUTOCLIP = 0x20,
        QACONTAINER_MESSAGEREFLECT = 0x40,
        QACONTAINER_SUPPORTSMNEMONICS = 0x80,
    }

    public unsafe partial struct tagQACONTAINER
    {
        [NativeTypeName("ULONG")]
        public uint cbSize;

        public IOleClientSite* pClientSite;

        public IAdviseSinkEx* pAdviseSink;

        public IPropertyNotifySink* pPropertyNotifySink;

        public IUnknown* pUnkEventSink;

        [NativeTypeName("DWORD")]
        public uint dwAmbientFlags;

        [NativeTypeName("OLE_COLOR")]
        public uint colorFore;

        [NativeTypeName("OLE_COLOR")]
        public uint colorBack;

        public IFont* pFont;

        public IOleUndoManager* pUndoMgr;

        [NativeTypeName("DWORD")]
        public uint dwAppearance;

        [NativeTypeName("LONG")]
        public int lcid;

        [NativeTypeName("HPALETTE")]
        public nint* hpal;

        public IBindHost* pBindHost;

        public IOleControlSite* pOleControlSite;

        public IServiceProvider* pServiceProvider;
    }

    public partial struct tagQACONTROL
    {
        [NativeTypeName("ULONG")]
        public uint cbSize;

        [NativeTypeName("DWORD")]
        public uint dwMiscStatus;

        [NativeTypeName("DWORD")]
        public uint dwViewStatus;

        [NativeTypeName("DWORD")]
        public uint dwEventCookie;

        [NativeTypeName("DWORD")]
        public uint dwPropNotifyCookie;

        [NativeTypeName("DWORD")]
        public uint dwPointerActivationPolicy;
    }

    [Guid("CF51ED10-62FE-11CF-BF86-00A0C9034836")]
    [NativeTypeName("struct IQuickActivate : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct IQuickActivate : IQuickActivate.Interface, INativeGuid
    {
        static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IQuickActivate));

        public Vtbl<IQuickActivate>* lpVtbl;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
        {
            return lpVtbl->QueryInterface((IQuickActivate*)Unsafe.AsPointer(ref this), riid, ppvObject);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            return lpVtbl->AddRef((IQuickActivate*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            return lpVtbl->Release((IQuickActivate*)Unsafe.AsPointer(ref this));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int QuickActivate([NativeTypeName("QACONTAINER *")] tagQACONTAINER* pQaContainer, [NativeTypeName("QACONTROL *")] tagQACONTROL* pQaControl)
        {
            return lpVtbl->QuickActivate((IQuickActivate*)Unsafe.AsPointer(ref this), pQaContainer, pQaControl);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int SetContentExtent([NativeTypeName("LPSIZEL")] SIZE* pSizel)
        {
            return lpVtbl->SetContentExtent((IQuickActivate*)Unsafe.AsPointer(ref this), pSizel);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [return: NativeTypeName("HRESULT")]
        public int GetContentExtent([NativeTypeName("LPSIZEL")] SIZE* pSizel)
        {
            return lpVtbl->GetContentExtent((IQuickActivate*)Unsafe.AsPointer(ref this), pSizel);
        }

        public interface Interface : IUnknown.Interface
        {
            [return: NativeTypeName("HRESULT")]
            int QuickActivate([NativeTypeName("QACONTAINER *")] tagQACONTAINER* pQaContainer, [NativeTypeName("QACONTROL *")] tagQACONTROL* pQaControl);

            [return: NativeTypeName("HRESULT")]
            int SetContentExtent([NativeTypeName("LPSIZEL")] SIZE* pSizel);

            [return: NativeTypeName("HRESULT")]
            int GetContentExtent([NativeTypeName("LPSIZEL")] SIZE* pSizel);
        }

        public partial struct Vtbl<TSelf>
            where TSelf : unmanaged, Interface
        {
            [NativeTypeName("HRESULT (const IID &, void **) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, Guid*, void**, int> QueryInterface;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> AddRef;

            [NativeTypeName("ULONG () __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, uint> Release;

            [NativeTypeName("HRESULT (QACONTAINER *, QACONTROL *) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, tagQACONTAINER*, tagQACONTROL*, int> QuickActivate;

            [NativeTypeName("HRESULT (LPSIZEL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, SIZE*, int> SetContentExtent;

            [NativeTypeName("HRESULT (LPSIZEL) __attribute__((stdcall))")]
            public delegate* unmanaged[MemberFunction]<TSelf*, SIZE*, int> GetContentExtent;
        }
    }

    public static unsafe partial class Methods
    {
        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoGetMalloc([NativeTypeName("DWORD")] uint dwMemContext, [NativeTypeName("LPMALLOC *")] IMalloc** ppMalloc);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CreateStreamOnHGlobal([NativeTypeName("HGLOBAL")] void* hGlobal, [NativeTypeName("BOOL")] int fDeleteOnRelease, [NativeTypeName("LPSTREAM *")] IStream** ppstm);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int GetHGlobalFromStream([NativeTypeName("LPSTREAM")] IStream* pstm, [NativeTypeName("HGLOBAL *")] void** phglobal);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        public static extern void CoUninitialize();

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("DWORD")]
        public static extern uint CoGetCurrentProcess();

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoInitializeEx([NativeTypeName("LPVOID")] void* pvReserved, [NativeTypeName("DWORD")] uint dwCoInit);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoGetCallerTID([NativeTypeName("LPDWORD")] uint* lpdwTID);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoGetCurrentLogicalThreadId(Guid* pguid);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoGetContextToken([NativeTypeName("ULONG_PTR *")] ulong* pToken);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoGetDefaultContext([NativeTypeName("APTTYPE")] _APTTYPE aptType, [NativeTypeName("const IID &")] Guid* riid, void** ppv);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoGetApartmentType([NativeTypeName("APTTYPE *")] _APTTYPE* pAptType, [NativeTypeName("APTTYPEQUALIFIER *")] _APTTYPEQUALIFIER* pAptQualifier);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoDecodeProxy([NativeTypeName("DWORD")] uint dwClientPid, [NativeTypeName("UINT64")] ulong ui64ProxyAddress, [NativeTypeName("PServerInformation")] tagServerInformation* pServerInformation);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoIncrementMTAUsage([NativeTypeName("CO_MTA_USAGE_COOKIE *")] nint** pCookie);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoDecrementMTAUsage([NativeTypeName("CO_MTA_USAGE_COOKIE")] nint* Cookie);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoAllowUnmarshalerCLSID([NativeTypeName("const IID &")] Guid* clsid);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoGetObjectContext([NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("LPVOID *")] void** ppv);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoGetClassObject([NativeTypeName("const IID &")] Guid* rclsid, [NativeTypeName("DWORD")] uint dwClsContext, [NativeTypeName("LPVOID")] void* pvReserved, [NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("LPVOID *")] void** ppv);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoRegisterClassObject([NativeTypeName("const IID &")] Guid* rclsid, [NativeTypeName("LPUNKNOWN")] IUnknown* pUnk, [NativeTypeName("DWORD")] uint dwClsContext, [NativeTypeName("DWORD")] uint flags, [NativeTypeName("LPDWORD")] uint* lpdwRegister);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoRevokeClassObject([NativeTypeName("DWORD")] uint dwRegister);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoResumeClassObjects();

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoSuspendClassObjects();

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("ULONG")]
        public static extern uint CoAddRefServerProcess();

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("ULONG")]
        public static extern uint CoReleaseServerProcess();

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoGetPSClsid([NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("CLSID *")] Guid* pClsid);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoRegisterPSClsid([NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("const IID &")] Guid* rclsid);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoRegisterSurrogate([NativeTypeName("LPSURROGATE")] ISurrogate* pSurrogate);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoGetMarshalSizeMax([NativeTypeName("ULONG *")] uint* pulSize, [NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("LPUNKNOWN")] IUnknown* pUnk, [NativeTypeName("DWORD")] uint dwDestContext, [NativeTypeName("LPVOID")] void* pvDestContext, [NativeTypeName("DWORD")] uint mshlflags);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoMarshalInterface([NativeTypeName("LPSTREAM")] IStream* pStm, [NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("LPUNKNOWN")] IUnknown* pUnk, [NativeTypeName("DWORD")] uint dwDestContext, [NativeTypeName("LPVOID")] void* pvDestContext, [NativeTypeName("DWORD")] uint mshlflags);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoUnmarshalInterface([NativeTypeName("LPSTREAM")] IStream* pStm, [NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("LPVOID *")] void** ppv);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoMarshalHresult([NativeTypeName("LPSTREAM")] IStream* pstm, [NativeTypeName("HRESULT")] int hresult);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoUnmarshalHresult([NativeTypeName("LPSTREAM")] IStream* pstm, [NativeTypeName("HRESULT *")] int* phresult);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoReleaseMarshalData([NativeTypeName("LPSTREAM")] IStream* pStm);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoDisconnectObject([NativeTypeName("LPUNKNOWN")] IUnknown* pUnk, [NativeTypeName("DWORD")] uint dwReserved);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoLockObjectExternal([NativeTypeName("LPUNKNOWN")] IUnknown* pUnk, [NativeTypeName("BOOL")] int fLock, [NativeTypeName("BOOL")] int fLastUnlockReleases);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoGetStandardMarshal([NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("LPUNKNOWN")] IUnknown* pUnk, [NativeTypeName("DWORD")] uint dwDestContext, [NativeTypeName("LPVOID")] void* pvDestContext, [NativeTypeName("DWORD")] uint mshlflags, [NativeTypeName("LPMARSHAL *")] IMarshal** ppMarshal);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoGetStdMarshalEx([NativeTypeName("LPUNKNOWN")] IUnknown* pUnkOuter, [NativeTypeName("DWORD")] uint smexflags, [NativeTypeName("LPUNKNOWN *")] IUnknown** ppUnkInner);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("BOOL")]
        public static extern int CoIsHandlerConnected([NativeTypeName("LPUNKNOWN")] IUnknown* pUnk);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoMarshalInterThreadInterfaceInStream([NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("LPUNKNOWN")] IUnknown* pUnk, [NativeTypeName("LPSTREAM *")] IStream** ppStm);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoGetInterfaceAndReleaseStream([NativeTypeName("LPSTREAM")] IStream* pStm, [NativeTypeName("const IID &")] Guid* iid, [NativeTypeName("LPVOID *")] void** ppv);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoCreateFreeThreadedMarshaler([NativeTypeName("LPUNKNOWN")] IUnknown* punkOuter, [NativeTypeName("LPUNKNOWN *")] IUnknown** ppunkMarshal);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        public static extern void CoFreeUnusedLibraries();

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        public static extern void CoFreeUnusedLibrariesEx([NativeTypeName("DWORD")] uint dwUnloadDelay, [NativeTypeName("DWORD")] uint dwReserved);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoDisconnectContext([NativeTypeName("DWORD")] uint dwTimeout);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoInitializeSecurity([NativeTypeName("PSECURITY_DESCRIPTOR")] void* pSecDesc, [NativeTypeName("LONG")] int cAuthSvc, [NativeTypeName("SOLE_AUTHENTICATION_SERVICE *")] tagSOLE_AUTHENTICATION_SERVICE* asAuthSvc, void* pReserved1, [NativeTypeName("DWORD")] uint dwAuthnLevel, [NativeTypeName("DWORD")] uint dwImpLevel, void* pAuthList, [NativeTypeName("DWORD")] uint dwCapabilities, void* pReserved3);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoGetCallContext([NativeTypeName("const IID &")] Guid* riid, void** ppInterface);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoQueryProxyBlanket(IUnknown* pProxy, [NativeTypeName("DWORD *")] uint* pwAuthnSvc, [NativeTypeName("DWORD *")] uint* pAuthzSvc, [NativeTypeName("LPOLESTR *")] char** pServerPrincName, [NativeTypeName("DWORD *")] uint* pAuthnLevel, [NativeTypeName("DWORD *")] uint* pImpLevel, [NativeTypeName("RPC_AUTH_IDENTITY_HANDLE *")] void** pAuthInfo, [NativeTypeName("DWORD *")] uint* pCapabilites);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoSetProxyBlanket(IUnknown* pProxy, [NativeTypeName("DWORD")] uint dwAuthnSvc, [NativeTypeName("DWORD")] uint dwAuthzSvc, [NativeTypeName("OLECHAR *")] char* pServerPrincName, [NativeTypeName("DWORD")] uint dwAuthnLevel, [NativeTypeName("DWORD")] uint dwImpLevel, [NativeTypeName("RPC_AUTH_IDENTITY_HANDLE")] void* pAuthInfo, [NativeTypeName("DWORD")] uint dwCapabilities);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoCopyProxy(IUnknown* pProxy, IUnknown** ppCopy);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoQueryClientBlanket([NativeTypeName("DWORD *")] uint* pAuthnSvc, [NativeTypeName("DWORD *")] uint* pAuthzSvc, [NativeTypeName("LPOLESTR *")] char** pServerPrincName, [NativeTypeName("DWORD *")] uint* pAuthnLevel, [NativeTypeName("DWORD *")] uint* pImpLevel, [NativeTypeName("RPC_AUTHZ_HANDLE *")] void** pPrivs, [NativeTypeName("DWORD *")] uint* pCapabilities);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoImpersonateClient();

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoRevertToSelf();

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoQueryAuthenticationServices([NativeTypeName("DWORD *")] uint* pcAuthSvc, [NativeTypeName("SOLE_AUTHENTICATION_SERVICE **")] tagSOLE_AUTHENTICATION_SERVICE** asAuthSvc);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoSwitchCallContext(IUnknown* pNewObject, IUnknown** ppOldObject);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoCreateInstance([NativeTypeName("const IID &")] Guid* rclsid, [NativeTypeName("LPUNKNOWN")] IUnknown* pUnkOuter, [NativeTypeName("DWORD")] uint dwClsContext, [NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("LPVOID *")] void** ppv);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoCreateInstanceEx([NativeTypeName("const IID &")] Guid* Clsid, IUnknown* punkOuter, [NativeTypeName("DWORD")] uint dwClsCtx, [NativeTypeName("COSERVERINFO *")] _COSERVERINFO* pServerInfo, [NativeTypeName("DWORD")] uint dwCount, [NativeTypeName("MULTI_QI *")] tagMULTI_QI* pResults);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoCreateInstanceFromApp([NativeTypeName("const IID &")] Guid* Clsid, IUnknown* punkOuter, [NativeTypeName("DWORD")] uint dwClsCtx, [NativeTypeName("PVOID")] void* reserved, [NativeTypeName("DWORD")] uint dwCount, [NativeTypeName("MULTI_QI *")] tagMULTI_QI* pResults);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoRegisterActivationFilter(IActivationFilter* pActivationFilter);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoGetCancelObject([NativeTypeName("DWORD")] uint dwThreadId, [NativeTypeName("const IID &")] Guid* iid, void** ppUnk);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoSetCancelObject(IUnknown* pUnk);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoCancelCall([NativeTypeName("DWORD")] uint dwThreadId, [NativeTypeName("ULONG")] uint ulTimeout);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoTestCancel();

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoEnableCallCancellation([NativeTypeName("LPVOID")] void* pReserved);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoDisableCallCancellation([NativeTypeName("LPVOID")] void* pReserved);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int StringFromCLSID([NativeTypeName("const IID &")] Guid* rclsid, [NativeTypeName("LPOLESTR *")] char** lplpsz);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CLSIDFromString([NativeTypeName("LPCOLESTR")] char* lpsz, [NativeTypeName("LPCLSID")] Guid* pclsid);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int StringFromIID([NativeTypeName("const IID &")] Guid* rclsid, [NativeTypeName("LPOLESTR *")] char** lplpsz);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int IIDFromString([NativeTypeName("LPCOLESTR")] char* lpsz, [NativeTypeName("LPIID")] Guid* lpiid);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int ProgIDFromCLSID([NativeTypeName("const IID &")] Guid* clsid, [NativeTypeName("LPOLESTR *")] char** lplpszProgID);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CLSIDFromProgID([NativeTypeName("LPCOLESTR")] char* lpszProgID, [NativeTypeName("LPCLSID")] Guid* lpclsid);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        public static extern int StringFromGUID2([NativeTypeName("const GUID &")] Guid* rguid, [NativeTypeName("LPOLESTR")] char* lpsz, int cchMax);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoCreateGuid(Guid* pguid);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int PropVariantCopy(PROPVARIANT* pvarDest, [NativeTypeName("const PROPVARIANT *")] PROPVARIANT* pvarSrc);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int PropVariantClear(PROPVARIANT* pvar);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int FreePropVariantArray([NativeTypeName("ULONG")] uint cVariants, PROPVARIANT* rgvars);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoWaitForMultipleHandles([NativeTypeName("DWORD")] uint dwFlags, [NativeTypeName("DWORD")] uint dwTimeout, [NativeTypeName("ULONG")] uint cHandles, [NativeTypeName("LPHANDLE")] void** pHandles, [NativeTypeName("LPDWORD")] uint* lpdwindex);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoWaitForMultipleObjects([NativeTypeName("DWORD")] uint dwFlags, [NativeTypeName("DWORD")] uint dwTimeout, [NativeTypeName("ULONG")] uint cHandles, [NativeTypeName("const HANDLE *")] void** pHandles, [NativeTypeName("LPDWORD")] uint* lpdwindex);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoGetTreatAsClass([NativeTypeName("const IID &")] Guid* clsidOld, [NativeTypeName("LPCLSID")] Guid* pClsidNew);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoInvalidateRemoteMachineBindings([NativeTypeName("LPOLESTR")] char* pszMachineName);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int RoGetAgileReference([NativeTypeName("enum AgileReferenceOptions")] AgileReferenceOptions options, [NativeTypeName("const IID &")] Guid* riid, IUnknown* pUnk, IAgileReference** ppAgileReference);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int DllGetClassObject([NativeTypeName("const IID &")] Guid* rclsid, [NativeTypeName("const IID &")] Guid* riid, [NativeTypeName("LPVOID *")] void** ppv);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("LPVOID")]
        public static extern void* CoTaskMemAlloc([NativeTypeName("SIZE_T")] ulong cb);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("LPVOID")]
        public static extern void* CoTaskMemRealloc([NativeTypeName("LPVOID")] void* pv, [NativeTypeName("SIZE_T")] ulong cb);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        public static extern void CoTaskMemFree([NativeTypeName("LPVOID")] void* pv);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CoFileTimeNow(FILETIME* lpFileTime);

        [DllImport("ole32", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int CLSIDFromProgIDEx([NativeTypeName("LPCOLESTR")] char* lpszProgID, [NativeTypeName("LPCLSID")] Guid* lpclsid);

        [NativeTypeName("#define CLSCTX_INPROC (CLSCTX_INPROC_SERVER|CLSCTX_INPROC_HANDLER)")]
        public const int CLSCTX_INPROC = ((int)(CLSCTX.CLSCTX_INPROC_SERVER) | (int)(CLSCTX.CLSCTX_INPROC_HANDLER));

        [NativeTypeName("#define CLSCTX_ALL (CLSCTX_INPROC_SERVER| \\\r\n                                 CLSCTX_INPROC_HANDLER| \\\r\n                                 CLSCTX_LOCAL_SERVER| \\\r\n                                 CLSCTX_REMOTE_SERVER)")]
        public const int CLSCTX_ALL = ((int)(CLSCTX.CLSCTX_INPROC_SERVER) | (int)(CLSCTX.CLSCTX_INPROC_HANDLER) | (int)(CLSCTX.CLSCTX_LOCAL_SERVER) | (int)(CLSCTX.CLSCTX_REMOTE_SERVER));

        [NativeTypeName("#define CLSCTX_SERVER (CLSCTX_INPROC_SERVER|CLSCTX_LOCAL_SERVER|CLSCTX_REMOTE_SERVER)")]
        public const int CLSCTX_SERVER = ((int)(CLSCTX.CLSCTX_INPROC_SERVER) | (int)(CLSCTX.CLSCTX_LOCAL_SERVER) | (int)(CLSCTX.CLSCTX_REMOTE_SERVER));

        [NativeTypeName("#define COLE_DEFAULT_PRINCIPAL ( ( OLECHAR * )( INT_PTR  )-1 )")]
        public static char* COLE_DEFAULT_PRINCIPAL => unchecked((char*)((nint)(-1)));

        [NativeTypeName("#define COLE_DEFAULT_AUTHINFO ( ( void * )( INT_PTR  )-1 )")]
        public static void* COLE_DEFAULT_AUTHINFO => unchecked((void*)((nint)(-1)));

        [NativeTypeName("#define _CRT_INTERNAL_COMBASE_SYMBOL_PREFIX \"\"")]
        public static ReadOnlySpan<byte> _CRT_INTERNAL_COMBASE_SYMBOL_PREFIX => ""u8;

        [NativeTypeName("#define COM_RIGHTS_EXECUTE 1")]
        public const int COM_RIGHTS_EXECUTE = 1;

        [NativeTypeName("#define COM_RIGHTS_EXECUTE_LOCAL 2")]
        public const int COM_RIGHTS_EXECUTE_LOCAL = 2;

        [NativeTypeName("#define COM_RIGHTS_EXECUTE_REMOTE 4")]
        public const int COM_RIGHTS_EXECUTE_REMOTE = 4;

        [NativeTypeName("#define COM_RIGHTS_ACTIVATE_LOCAL 8")]
        public const int COM_RIGHTS_ACTIVATE_LOCAL = 8;

        [NativeTypeName("#define COM_RIGHTS_ACTIVATE_REMOTE 16")]
        public const int COM_RIGHTS_ACTIVATE_REMOTE = 16;

        [NativeTypeName("#define COM_RIGHTS_RESERVED1 32")]
        public const int COM_RIGHTS_RESERVED1 = 32;

        [NativeTypeName("#define COM_RIGHTS_RESERVED2 64")]
        public const int COM_RIGHTS_RESERVED2 = 64;

        [NativeTypeName("#define CWMO_MAX_HANDLES 56")]
        public const int CWMO_MAX_HANDLES = 56;

        [NativeTypeName("#define FADF_AUTO ( 0x1 )")]
        public const int FADF_AUTO = (0x1);

        [NativeTypeName("#define FADF_STATIC ( 0x2 )")]
        public const int FADF_STATIC = (0x2);

        [NativeTypeName("#define FADF_EMBEDDED ( 0x4 )")]
        public const int FADF_EMBEDDED = (0x4);

        [NativeTypeName("#define FADF_FIXEDSIZE ( 0x10 )")]
        public const int FADF_FIXEDSIZE = (0x10);

        [NativeTypeName("#define FADF_RECORD ( 0x20 )")]
        public const int FADF_RECORD = (0x20);

        [NativeTypeName("#define FADF_HAVEIID ( 0x40 )")]
        public const int FADF_HAVEIID = (0x40);

        [NativeTypeName("#define FADF_HAVEVARTYPE ( 0x80 )")]
        public const int FADF_HAVEVARTYPE = (0x80);

        [NativeTypeName("#define FADF_BSTR ( 0x100 )")]
        public const int FADF_BSTR = (0x100);

        [NativeTypeName("#define FADF_UNKNOWN ( 0x200 )")]
        public const int FADF_UNKNOWN = (0x200);

        [NativeTypeName("#define FADF_DISPATCH ( 0x400 )")]
        public const int FADF_DISPATCH = (0x400);

        [NativeTypeName("#define FADF_VARIANT ( 0x800 )")]
        public const int FADF_VARIANT = (0x800);

        [NativeTypeName("#define FADF_RESERVED ( 0xf008 )")]
        public const int FADF_RESERVED = (0xf008);

        [NativeTypeName("#define PARAMFLAG_NONE ( 0 )")]
        public const int PARAMFLAG_NONE = (0);

        [NativeTypeName("#define PARAMFLAG_FIN ( 0x1 )")]
        public const int PARAMFLAG_FIN = (0x1);

        [NativeTypeName("#define PARAMFLAG_FOUT ( 0x2 )")]
        public const int PARAMFLAG_FOUT = (0x2);

        [NativeTypeName("#define PARAMFLAG_FLCID ( 0x4 )")]
        public const int PARAMFLAG_FLCID = (0x4);

        [NativeTypeName("#define PARAMFLAG_FRETVAL ( 0x8 )")]
        public const int PARAMFLAG_FRETVAL = (0x8);

        [NativeTypeName("#define PARAMFLAG_FOPT ( 0x10 )")]
        public const int PARAMFLAG_FOPT = (0x10);

        [NativeTypeName("#define PARAMFLAG_FHASDEFAULT ( 0x20 )")]
        public const int PARAMFLAG_FHASDEFAULT = (0x20);

        [NativeTypeName("#define PARAMFLAG_FHASCUSTDATA ( 0x40 )")]
        public const int PARAMFLAG_FHASCUSTDATA = (0x40);

        [NativeTypeName("#define IDLFLAG_NONE ( PARAMFLAG_NONE )")]
        public const int IDLFLAG_NONE = ((0));

        [NativeTypeName("#define IDLFLAG_FIN ( PARAMFLAG_FIN )")]
        public const int IDLFLAG_FIN = ((0x1));

        [NativeTypeName("#define IDLFLAG_FOUT ( PARAMFLAG_FOUT )")]
        public const int IDLFLAG_FOUT = ((0x2));

        [NativeTypeName("#define IDLFLAG_FLCID ( PARAMFLAG_FLCID )")]
        public const int IDLFLAG_FLCID = ((0x4));

        [NativeTypeName("#define IDLFLAG_FRETVAL ( PARAMFLAG_FRETVAL )")]
        public const int IDLFLAG_FRETVAL = ((0x8));

        [NativeTypeName("#define IMPLTYPEFLAG_FDEFAULT ( 0x1 )")]
        public const int IMPLTYPEFLAG_FDEFAULT = (0x1);

        [NativeTypeName("#define IMPLTYPEFLAG_FSOURCE ( 0x2 )")]
        public const int IMPLTYPEFLAG_FSOURCE = (0x2);

        [NativeTypeName("#define IMPLTYPEFLAG_FRESTRICTED ( 0x4 )")]
        public const int IMPLTYPEFLAG_FRESTRICTED = (0x4);

        [NativeTypeName("#define IMPLTYPEFLAG_FDEFAULTVTABLE ( 0x8 )")]
        public const int IMPLTYPEFLAG_FDEFAULTVTABLE = (0x8);

        [NativeTypeName("#define DISPID_UNKNOWN ( -1 )")]
        public const int DISPID_UNKNOWN = (-1);

        [NativeTypeName("#define DISPID_VALUE ( 0 )")]
        public const int DISPID_VALUE = (0);

        [NativeTypeName("#define DISPID_PROPERTYPUT ( -3 )")]
        public const int DISPID_PROPERTYPUT = (-3);

        [NativeTypeName("#define DISPID_NEWENUM ( -4 )")]
        public const int DISPID_NEWENUM = (-4);

        [NativeTypeName("#define DISPID_EVALUATE ( -5 )")]
        public const int DISPID_EVALUATE = (-5);

        [NativeTypeName("#define DISPID_CONSTRUCTOR ( -6 )")]
        public const int DISPID_CONSTRUCTOR = (-6);

        [NativeTypeName("#define DISPID_DESTRUCTOR ( -7 )")]
        public const int DISPID_DESTRUCTOR = (-7);

        [NativeTypeName("#define DISPID_COLLECT ( -8 )")]
        public const int DISPID_COLLECT = (-8);

        [NativeTypeName("#define PROPSETFLAG_DEFAULT ( 0 )")]
        public const int PROPSETFLAG_DEFAULT = (0);

        [NativeTypeName("#define PROPSETFLAG_NONSIMPLE ( 1 )")]
        public const int PROPSETFLAG_NONSIMPLE = (1);

        [NativeTypeName("#define PROPSETFLAG_ANSI ( 2 )")]
        public const int PROPSETFLAG_ANSI = (2);

        [NativeTypeName("#define PROPSETFLAG_UNBUFFERED ( 4 )")]
        public const int PROPSETFLAG_UNBUFFERED = (4);

        [NativeTypeName("#define PROPSETFLAG_CASE_SENSITIVE ( 8 )")]
        public const int PROPSETFLAG_CASE_SENSITIVE = (8);

        [NativeTypeName("#define PROPSET_BEHAVIOR_CASE_SENSITIVE ( 1 )")]
        public const int PROPSET_BEHAVIOR_CASE_SENSITIVE = (1);

        [NativeTypeName("#define PID_DICTIONARY ( 0 )")]
        public const int PID_DICTIONARY = (0);

        [NativeTypeName("#define PID_CODEPAGE ( 0x1 )")]
        public const int PID_CODEPAGE = (0x1);

        [NativeTypeName("#define PID_FIRST_USABLE ( 0x2 )")]
        public const int PID_FIRST_USABLE = (0x2);

        [NativeTypeName("#define PID_FIRST_NAME_DEFAULT ( 0xfff )")]
        public const int PID_FIRST_NAME_DEFAULT = (0xfff);

        [NativeTypeName("#define PID_LOCALE ( 0x80000000 )")]
        public const uint PID_LOCALE = (0x80000000);

        [NativeTypeName("#define PID_MODIFY_TIME ( 0x80000001 )")]
        public const uint PID_MODIFY_TIME = (0x80000001);

        [NativeTypeName("#define PID_SECURITY ( 0x80000002 )")]
        public const uint PID_SECURITY = (0x80000002);

        [NativeTypeName("#define PID_BEHAVIOR ( 0x80000003 )")]
        public const uint PID_BEHAVIOR = (0x80000003);

        [NativeTypeName("#define PID_ILLEGAL ( 0xffffffff )")]
        public const uint PID_ILLEGAL = (0xffffffff);

        [NativeTypeName("#define PID_MIN_READONLY ( 0x80000000 )")]
        public const uint PID_MIN_READONLY = (0x80000000);

        [NativeTypeName("#define PID_MAX_READONLY ( 0xbfffffff )")]
        public const uint PID_MAX_READONLY = (0xbfffffff);

        [NativeTypeName("#define PRSPEC_INVALID ( 0xffffffff )")]
        public const uint PRSPEC_INVALID = (0xffffffff);

        [NativeTypeName("#define PRSPEC_LPWSTR ( 0 )")]
        public const int PRSPEC_LPWSTR = (0);

        [NativeTypeName("#define PRSPEC_PROPID ( 1 )")]
        public const int PRSPEC_PROPID = (1);

        [NativeTypeName("#define PROPSETHDR_OSVERSION_UNKNOWN 0xFFFFFFFF")]
        public const uint PROPSETHDR_OSVERSION_UNKNOWN = 0xFFFFFFFF;

        [NativeTypeName("#define UPDFCACHE_NODATACACHE ( 0x1 )")]
        public const int UPDFCACHE_NODATACACHE = (0x1);

        [NativeTypeName("#define UPDFCACHE_ONSAVECACHE ( 0x2 )")]
        public const int UPDFCACHE_ONSAVECACHE = (0x2);

        [NativeTypeName("#define UPDFCACHE_ONSTOPCACHE ( 0x4 )")]
        public const int UPDFCACHE_ONSTOPCACHE = (0x4);

        [NativeTypeName("#define UPDFCACHE_NORMALCACHE ( 0x8 )")]
        public const int UPDFCACHE_NORMALCACHE = (0x8);

        [NativeTypeName("#define UPDFCACHE_IFBLANK ( 0x10 )")]
        public const int UPDFCACHE_IFBLANK = (0x10);

        [NativeTypeName("#define UPDFCACHE_ONLYIFBLANK ( 0x80000000 )")]
        public const uint UPDFCACHE_ONLYIFBLANK = (0x80000000);

        [NativeTypeName("#define UPDFCACHE_IFBLANKORONSAVECACHE ( ( UPDFCACHE_IFBLANK | UPDFCACHE_ONSAVECACHE )  )")]
        public const int UPDFCACHE_IFBLANKORONSAVECACHE = (((0x10) | (0x2)));

        [NativeTypeName("#define UPDFCACHE_ALL ( ( DWORD  )~UPDFCACHE_ONLYIFBLANK )")]
        public const uint UPDFCACHE_ALL = ((uint)(~(0x80000000)));

        [NativeTypeName("#define UPDFCACHE_ALLBUTNODATACACHE ( ( UPDFCACHE_ALL & ( DWORD  )~UPDFCACHE_NODATACACHE )  )")]
        public const uint UPDFCACHE_ALLBUTNODATACACHE = unchecked((((uint)(~(0x80000000))) & (uint)(~(0x1))));

        [NativeTypeName("#define MK_ALT ( 0x20 )")]
        public const int MK_ALT = (0x20);

        [NativeTypeName("#define DROPEFFECT_NONE ( 0 )")]
        public const int DROPEFFECT_NONE = (0);

        [NativeTypeName("#define DROPEFFECT_COPY ( 1 )")]
        public const int DROPEFFECT_COPY = (1);

        [NativeTypeName("#define DROPEFFECT_MOVE ( 2 )")]
        public const int DROPEFFECT_MOVE = (2);

        [NativeTypeName("#define DROPEFFECT_LINK ( 4 )")]
        public const int DROPEFFECT_LINK = (4);

        [NativeTypeName("#define DROPEFFECT_SCROLL ( 0x80000000 )")]
        public const uint DROPEFFECT_SCROLL = (0x80000000);

        [NativeTypeName("#define DD_DEFSCROLLINSET ( 11 )")]
        public const int DD_DEFSCROLLINSET = (11);

        [NativeTypeName("#define DD_DEFSCROLLDELAY ( 50 )")]
        public const int DD_DEFSCROLLDELAY = (50);

        [NativeTypeName("#define DD_DEFSCROLLINTERVAL ( 50 )")]
        public const int DD_DEFSCROLLINTERVAL = (50);

        [NativeTypeName("#define DD_DEFDRAGDELAY ( 200 )")]
        public const int DD_DEFDRAGDELAY = (200);

        [NativeTypeName("#define DD_DEFDRAGMINDIST ( 2 )")]
        public const int DD_DEFDRAGMINDIST = (2);

        [NativeTypeName("#define CFSTR_ENTERPRISE_ID (TEXT(\"EnterpriseDataProtectionId\"))")]
        public static ReadOnlySpan<byte> CFSTR_ENTERPRISE_ID => ("EnterpriseDataProtectionId"u8);

        [NativeTypeName("#define MULTICLASSINFO_GETTYPEINFO 0x00000001")]
        public const int MULTICLASSINFO_GETTYPEINFO = 0x00000001;

        [NativeTypeName("#define MULTICLASSINFO_GETNUMRESERVEDDISPIDS 0x00000002")]
        public const int MULTICLASSINFO_GETNUMRESERVEDDISPIDS = 0x00000002;

        [NativeTypeName("#define MULTICLASSINFO_GETIIDPRIMARY 0x00000004")]
        public const int MULTICLASSINFO_GETIIDPRIMARY = 0x00000004;

        [NativeTypeName("#define MULTICLASSINFO_GETIIDSOURCE 0x00000008")]
        public const int MULTICLASSINFO_GETIIDSOURCE = 0x00000008;

        [NativeTypeName("#define TIFLAGS_EXTENDDISPATCHONLY 0x00000001")]
        public const int TIFLAGS_EXTENDDISPATCHONLY = 0x00000001;

        [NativeTypeName("#define SID_SOleUndoManager IID_IOleUndoManager")]
        public static ref readonly Guid SID_SOleUndoManager => ref IID_IOleUndoManager;

        public static ref readonly Guid IID_IUnknown
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_AsyncIUnknown
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x00, 0x00, 0x0E, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IClassFactory
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x01, 0x00, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IMarshal
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x03, 0x00, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_INoMarshal
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x1B, 0x69, 0xC8, 0xEC,
                    0xDB, 0xC1,
                    0xC0, 0x4D,
                    0x85,
                    0x5E,
                    0x65,
                    0xF6,
                    0xC5,
                    0x51,
                    0xAF,
                    0x49
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IAgileObject
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x94, 0x2B, 0xEA, 0x94,
                    0xCC, 0xE9,
                    0xE0, 0x49,
                    0xC0,
                    0xFF,
                    0xEE,
                    0x64,
                    0xCA,
                    0x8F,
                    0x5B,
                    0x90
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IActivationFilter
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x17, 0x00, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IMarshal2
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0xCF, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IMalloc
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x02, 0x00, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IStdMarshalInfo
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x18, 0x00, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IExternalConnection
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x19, 0x00, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IMultiQI
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x20, 0x00, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_AsyncIMultiQI
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x20, 0x00, 0x0E, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IInternalUnknown
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x21, 0x00, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IEnumUnknown
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x00, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IEnumString
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x01, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_ISequentialStream
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x30, 0x3A, 0x73, 0x0C,
                    0x1C, 0x2A,
                    0xCE, 0x11,
                    0xAD,
                    0xE5,
                    0x00,
                    0xAA,
                    0x00,
                    0x44,
                    0x77,
                    0x3D
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IStream
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x0C, 0x00, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IRpcChannelBuffer
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x60, 0x6B, 0xF5, 0xD5,
                    0x3B, 0x59,
                    0x1A, 0x10,
                    0xB5,
                    0x69,
                    0x08,
                    0x00,
                    0x2B,
                    0x2D,
                    0xBF,
                    0x7A
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IRpcChannelBuffer2
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0xD0, 0x31, 0x4F, 0x59,
                    0x19, 0x7F,
                    0xD0, 0x11,
                    0xB1,
                    0x94,
                    0x00,
                    0xA0,
                    0xC9,
                    0x0D,
                    0xC8,
                    0xBF
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IAsyncRpcChannelBuffer
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0xB6, 0x9F, 0x02, 0xA5,
                    0x34, 0x3C,
                    0xD1, 0x11,
                    0x9C,
                    0x99,
                    0x00,
                    0xC0,
                    0x4F,
                    0xB9,
                    0x98,
                    0xAA
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IRpcChannelBuffer3
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x00, 0x56, 0xB1, 0x25,
                    0x15, 0x01,
                    0xD0, 0x11,
                    0xBF,
                    0x0D,
                    0x00,
                    0xAA,
                    0x00,
                    0xB8,
                    0xDF,
                    0xD2
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IRpcSyntaxNegotiate
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x19, 0x85, 0xA0, 0x58,
                    0xC8, 0x24,
                    0x35, 0x49,
                    0xB4,
                    0x82,
                    0x3F,
                    0xD8,
                    0x23,
                    0x33,
                    0x3A,
                    0x4F
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IRpcProxyBuffer
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x34, 0x6A, 0xF5, 0xD5,
                    0x3B, 0x59,
                    0x1A, 0x10,
                    0xB5,
                    0x69,
                    0x08,
                    0x00,
                    0x2B,
                    0x2D,
                    0xBF,
                    0x7A
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IRpcStubBuffer
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0xFC, 0x6A, 0xF5, 0xD5,
                    0x3B, 0x59,
                    0x1A, 0x10,
                    0xB5,
                    0x69,
                    0x08,
                    0x00,
                    0x2B,
                    0x2D,
                    0xBF,
                    0x7A
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IPSFactoryBuffer
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0xD0, 0x69, 0xF5, 0xD5,
                    0x3B, 0x59,
                    0x1A, 0x10,
                    0xB5,
                    0x69,
                    0x08,
                    0x00,
                    0x2B,
                    0x2D,
                    0xBF,
                    0x7A
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IChannelHook
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0xA0, 0xC4, 0x08, 0x10,
                    0x13, 0x76,
                    0xCF, 0x11,
                    0x9A,
                    0xF1,
                    0x00,
                    0x20,
                    0xAF,
                    0x6E,
                    0x72,
                    0xF4
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IClientSecurity
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x3D, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IServerSecurity
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x3E, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IRpcOptions
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x44, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IGlobalOptions
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x5B, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_ISurrogate
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x22, 0x00, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IGlobalInterfaceTable
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x46, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_ISynchronize
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x30, 0x00, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_ISynchronizeHandle
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x31, 0x00, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_ISynchronizeEvent
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x32, 0x00, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_ISynchronizeContainer
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x33, 0x00, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_ISynchronizeMutex
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x25, 0x00, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_ICancelMethodCalls
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x29, 0x00, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IAsyncManager
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x2A, 0x00, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_ICallFactory
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x30, 0x3A, 0x73, 0x1C,
                    0x1C, 0x2A,
                    0xCE, 0x11,
                    0xAD,
                    0xE5,
                    0x00,
                    0xAA,
                    0x00,
                    0x44,
                    0x77,
                    0x3D
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IRpcHelper
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x49, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IReleaseMarshalBuffers
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0xE8, 0xB9, 0x0C, 0xEB,
                    0x96, 0x79,
                    0xD2, 0x11,
                    0x87,
                    0x2E,
                    0x00,
                    0x00,
                    0xF8,
                    0x08,
                    0x08,
                    0x59
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IWaitMultiple
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x2B, 0x00, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IAddrTrackingControl
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x47, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IAddrExclusionControl
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x48, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IPipeByte
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0xCA, 0x3A, 0x2F, 0xDB,
                    0x86, 0x2F,
                    0xD1, 0x11,
                    0x8E,
                    0x04,
                    0x00,
                    0xC0,
                    0x4F,
                    0xB9,
                    0x98,
                    0x9A
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_AsyncIPipeByte
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0xCB, 0x3A, 0x2F, 0xDB,
                    0x86, 0x2F,
                    0xD1, 0x11,
                    0x8E,
                    0x04,
                    0x00,
                    0xC0,
                    0x4F,
                    0xB9,
                    0x98,
                    0x9A
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IPipeLong
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0xCC, 0x3A, 0x2F, 0xDB,
                    0x86, 0x2F,
                    0xD1, 0x11,
                    0x8E,
                    0x04,
                    0x00,
                    0xC0,
                    0x4F,
                    0xB9,
                    0x98,
                    0x9A
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_AsyncIPipeLong
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0xCD, 0x3A, 0x2F, 0xDB,
                    0x86, 0x2F,
                    0xD1, 0x11,
                    0x8E,
                    0x04,
                    0x00,
                    0xC0,
                    0x4F,
                    0xB9,
                    0x98,
                    0x9A
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IPipeDouble
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0xCE, 0x3A, 0x2F, 0xDB,
                    0x86, 0x2F,
                    0xD1, 0x11,
                    0x8E,
                    0x04,
                    0x00,
                    0xC0,
                    0x4F,
                    0xB9,
                    0x98,
                    0x9A
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_AsyncIPipeDouble
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0xCF, 0x3A, 0x2F, 0xDB,
                    0x86, 0x2F,
                    0xD1, 0x11,
                    0x8E,
                    0x04,
                    0x00,
                    0xC0,
                    0x4F,
                    0xB9,
                    0x98,
                    0x9A
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IComThreadingInfo
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0xCE, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IProcessInitControl
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x55, 0x0D, 0x38, 0x72,
                    0x2B, 0x8D,
                    0xA3, 0x43,
                    0x85,
                    0x13,
                    0x2B,
                    0x6E,
                    0xF3,
                    0x14,
                    0x34,
                    0xE9
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IFastRundown
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x40, 0x00, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IMarshalingStream
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0xE6, 0xF5, 0xF2, 0xD8,
                    0x02, 0x61,
                    0x63, 0x48,
                    0x9F,
                    0x26,
                    0x38,
                    0x9A,
                    0x46,
                    0x76,
                    0xEF,
                    0xDE
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IAgileReference
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x43, 0x6A, 0x3F, 0xC0,
                    0xA4, 0x65,
                    0x18, 0x98,
                    0x98,
                    0x7E,
                    0xE0,
                    0xB8,
                    0x10,
                    0xD2,
                    0xA6,
                    0xF2
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IMachineGlobalObjectTable
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0xAC, 0x09, 0xD7, 0x26,
                    0x0B, 0xF7,
                    0x21, 0x44,
                    0xA9,
                    0x6F,
                    0xD2,
                    0x87,
                    0x8F,
                    0xAF,
                    0xB0,
                    0x0D
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_ISupportAllowLowerTrustActivation
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0xF2, 0x6E, 0x95, 0xE9,
                    0x28, 0x38,
                    0x4B, 0x4B,
                    0x8F,
                    0xA9,
                    0x7D,
                    0xB6,
                    0x1D,
                    0xEE,
                    0x49,
                    0x54
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IMallocSpy
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x1D, 0x00, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IBindCtx
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x0E, 0x00, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IEnumMoniker
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x02, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IRunnableObject
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x26, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IRunningObjectTable
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x10, 0x00, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IPersist
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x0C, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IPersistStream
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x09, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IMoniker
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x0F, 0x00, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IROTData
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0xC0, 0x6B, 0x9F, 0xF2,
                    0x21, 0x50,
                    0xCE, 0x11,
                    0xAA,
                    0x15,
                    0x00,
                    0x00,
                    0x69,
                    0x01,
                    0x29,
                    0x3F
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IEnumSTATSTG
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x0D, 0x00, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IStorage
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x0B, 0x00, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IPersistFile
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x0B, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IPersistStorage
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x0A, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_ILockBytes
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x0A, 0x00, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IEnumFORMATETC
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x03, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IEnumSTATDATA
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x05, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IRootStorage
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x12, 0x00, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IAdviseSink
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x0F, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_AsyncIAdviseSink
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x50, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IAdviseSink2
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x25, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_AsyncIAdviseSink2
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x51, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IDataObject
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x0E, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IDataAdviseHolder
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x10, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IMessageFilter
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x16, 0x00, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IClassActivator
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x40, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IFillLockBytes
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x10, 0xF0, 0xCA, 0x99,
                    0x5E, 0x41,
                    0xCF, 0x11,
                    0x88,
                    0x14,
                    0x00,
                    0xAA,
                    0x00,
                    0xB5,
                    0x69,
                    0xF5
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IProgressNotify
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0xA0, 0x58, 0xD7, 0xA9,
                    0x17, 0x46,
                    0xCF, 0x11,
                    0x95,
                    0xFC,
                    0x00,
                    0xAA,
                    0x00,
                    0x68,
                    0x0D,
                    0xB4
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_ILayoutStorage
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x90, 0x4D, 0x6D, 0x0E,
                    0x38, 0x67,
                    0xCF, 0x11,
                    0x96,
                    0x08,
                    0x00,
                    0xAA,
                    0x00,
                    0x68,
                    0x0D,
                    0xB4
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IBlockingLock
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x7A, 0xD4, 0xF3, 0x30,
                    0x47, 0x64,
                    0xD1, 0x11,
                    0x8E,
                    0x3C,
                    0x00,
                    0xC0,
                    0x4F,
                    0xB9,
                    0x38,
                    0x6D
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_ITimeAndNoticeControl
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0xAE, 0xF6, 0x0B, 0xBC,
                    0x78, 0x88,
                    0xD1, 0x11,
                    0x83,
                    0xE9,
                    0x00,
                    0xC0,
                    0x4F,
                    0xC2,
                    0xC6,
                    0xD4
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IOplockStorage
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x34, 0xC8, 0x19, 0x8D,
                    0x79, 0x88,
                    0xD1, 0x11,
                    0x83,
                    0xE9,
                    0x00,
                    0xC0,
                    0x4F,
                    0xC2,
                    0xC6,
                    0xD4
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IDirectWriterLock
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x92, 0x4D, 0x6D, 0x0E,
                    0x38, 0x67,
                    0xCF, 0x11,
                    0x96,
                    0x08,
                    0x00,
                    0xAA,
                    0x00,
                    0x68,
                    0x0D,
                    0xB4
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IUrlMon
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x26, 0x00, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IForegroundTransfer
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x45, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IThumbnailExtractor
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x08, 0xC7, 0x9D, 0x96,
                    0x76, 0x5C,
                    0xD1, 0x11,
                    0x8D,
                    0x86,
                    0x00,
                    0x00,
                    0xF8,
                    0x04,
                    0xB0,
                    0x57
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IDummyHICONIncluder
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0xDE, 0x90, 0x79, 0x94,
                    0x28, 0xCC,
                    0xD2, 0x11,
                    0xA0,
                    0xF7,
                    0x00,
                    0x80,
                    0x5F,
                    0x85,
                    0x8F,
                    0xB1
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IProcessLock
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0xD5, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_ISurrogateService
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0xD4, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IInitializeSpy
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x34, 0x00, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IApartmentShutdown
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x09, 0x5A, 0xF0, 0xA2,
                    0xA2, 0x27,
                    0xB5, 0x42,
                    0xBC,
                    0x0E,
                    0xAC,
                    0x16,
                    0x3E,
                    0xF4,
                    0x9D,
                    0x9B
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_ICreateTypeInfo
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x05, 0x04, 0x02, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_ICreateTypeInfo2
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x0E, 0x04, 0x02, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_ICreateTypeLib
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x06, 0x04, 0x02, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_ICreateTypeLib2
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x0F, 0x04, 0x02, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IDispatch
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x00, 0x04, 0x02, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IEnumVARIANT
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x04, 0x04, 0x02, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_ITypeComp
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x03, 0x04, 0x02, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_ITypeInfo
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x01, 0x04, 0x02, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_ITypeInfo2
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x12, 0x04, 0x02, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_ITypeLib
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x02, 0x04, 0x02, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_ITypeLib2
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x11, 0x04, 0x02, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_ITypeChangeEvents
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x10, 0x04, 0x02, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IErrorInfo
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x20, 0xB1, 0xF2, 0x1C,
                    0x7D, 0x54,
                    0x1B, 0x10,
                    0x8E,
                    0x65,
                    0x08,
                    0x00,
                    0x2B,
                    0x2B,
                    0xD1,
                    0x19
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_ICreateErrorInfo
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x40, 0x33, 0xF0, 0x22,
                    0x7D, 0x54,
                    0x1B, 0x10,
                    0x8E,
                    0x65,
                    0x08,
                    0x00,
                    0x2B,
                    0x2B,
                    0xD1,
                    0x19
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_ISupportErrorInfo
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x60, 0x3D, 0x0B, 0xDF,
                    0x8F, 0x54,
                    0x1B, 0x10,
                    0x8E,
                    0x65,
                    0x08,
                    0x00,
                    0x2B,
                    0x2B,
                    0xD1,
                    0x19
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_ITypeFactory
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x2E, 0x00, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_ITypeMarshal
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x2D, 0x00, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IRecordInfo
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x2F, 0x00, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IErrorLog
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x40, 0xCA, 0x27, 0x31,
                    0x6E, 0x44,
                    0xCE, 0x11,
                    0x81,
                    0x35,
                    0x00,
                    0xAA,
                    0x00,
                    0x4B,
                    0xB8,
                    0x51
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IPropertyBag
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x00, 0x2A, 0x27, 0x55,
                    0xCB, 0x42,
                    0xCE, 0x11,
                    0x81,
                    0x35,
                    0x00,
                    0xAA,
                    0x00,
                    0x4B,
                    0xB8,
                    0x51
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_ITypeLibRegistrationReader
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x2A, 0x8A, 0x6A, 0xED,
                    0x60, 0xB1,
                    0x77, 0x4E,
                    0x8F,
                    0x73,
                    0xAA,
                    0x74,
                    0x35,
                    0xCD,
                    0x5C,
                    0x27
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_ITypeLibRegistration
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x35, 0xE7, 0xA3, 0x76,
                    0xDF, 0x02,
                    0x12, 0x4A,
                    0x98,
                    0xEB,
                    0x04,
                    0x3A,
                    0xD3,
                    0x60,
                    0x0A,
                    0xF3
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IPropertyStorage
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x38, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IPropertySetStorage
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x3A, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IEnumSTATPROPSTG
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x39, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IEnumSTATPROPSETSTG
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x3B, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IOleAdviseHolder
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x11, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IOleCache
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x1E, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IOleCache2
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x28, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IOleCacheControl
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x29, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IParseDisplayName
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x1A, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IOleContainer
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x1B, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IOleClientSite
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x18, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IOleObject
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x12, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IOleWindow
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x14, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IOleLink
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x1D, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IOleItemContainer
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x1C, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IOleInPlaceUIWindow
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x15, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IOleInPlaceActiveObject
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x17, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IOleInPlaceFrame
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x16, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IOleInPlaceObject
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x13, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IOleInPlaceSite
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x19, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IContinue
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x2A, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IViewObject
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x0D, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IViewObject2
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x27, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IDropSource
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x21, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IDropTarget
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x22, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IDropSourceNotify
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x2B, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IEnterpriseDropTarget
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x78, 0x38, 0x0E, 0x39,
                    0x55, 0xFD,
                    0x18, 0x4E,
                    0x81,
                    0x9D,
                    0x46,
                    0x82,
                    0x08,
                    0x1C,
                    0x0C,
                    0xFD
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IEnumOLEVERB
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x04, 0x01, 0x00, 0x00,
                    0x00, 0x00,
                    0x00, 0x00,
                    0xC0,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x46
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IEnumConnections
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x87, 0xB2, 0x96, 0xB1,
                    0xB4, 0xBA,
                    0x1A, 0x10,
                    0xB6,
                    0x9C,
                    0x00,
                    0xAA,
                    0x00,
                    0x34,
                    0x1D,
                    0x07
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IConnectionPoint
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x86, 0xB2, 0x96, 0xB1,
                    0xB4, 0xBA,
                    0x1A, 0x10,
                    0xB6,
                    0x9C,
                    0x00,
                    0xAA,
                    0x00,
                    0x34,
                    0x1D,
                    0x07
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IEnumConnectionPoints
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x85, 0xB2, 0x96, 0xB1,
                    0xB4, 0xBA,
                    0x1A, 0x10,
                    0xB6,
                    0x9C,
                    0x00,
                    0xAA,
                    0x00,
                    0x34,
                    0x1D,
                    0x07
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IConnectionPointContainer
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x84, 0xB2, 0x96, 0xB1,
                    0xB4, 0xBA,
                    0x1A, 0x10,
                    0xB6,
                    0x9C,
                    0x00,
                    0xAA,
                    0x00,
                    0x34,
                    0x1D,
                    0x07
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IClassFactory2
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x8F, 0xB2, 0x96, 0xB1,
                    0xB4, 0xBA,
                    0x1A, 0x10,
                    0xB6,
                    0x9C,
                    0x00,
                    0xAA,
                    0x00,
                    0x34,
                    0x1D,
                    0x07
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IProvideClassInfo
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x83, 0xB2, 0x96, 0xB1,
                    0xB4, 0xBA,
                    0x1A, 0x10,
                    0xB6,
                    0x9C,
                    0x00,
                    0xAA,
                    0x00,
                    0x34,
                    0x1D,
                    0x07
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IProvideClassInfo2
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0xC0, 0x3A, 0xBC, 0xA6,
                    0xAA, 0xDB,
                    0xCE, 0x11,
                    0x9D,
                    0xE3,
                    0x00,
                    0xAA,
                    0x00,
                    0x4B,
                    0xB8,
                    0x51
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IProvideMultipleClassInfo
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0xC1, 0xA9, 0xAB, 0xA7,
                    0x83, 0x89,
                    0xCF, 0x11,
                    0x8F,
                    0x20,
                    0x00,
                    0x80,
                    0x5F,
                    0x2C,
                    0xD0,
                    0x64
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IOleControl
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x88, 0xB2, 0x96, 0xB1,
                    0xB4, 0xBA,
                    0x1A, 0x10,
                    0xB6,
                    0x9C,
                    0x00,
                    0xAA,
                    0x00,
                    0x34,
                    0x1D,
                    0x07
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IOleControlSite
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x89, 0xB2, 0x96, 0xB1,
                    0xB4, 0xBA,
                    0x1A, 0x10,
                    0xB6,
                    0x9C,
                    0x00,
                    0xAA,
                    0x00,
                    0x34,
                    0x1D,
                    0x07
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IPropertyPage
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x8D, 0xB2, 0x96, 0xB1,
                    0xB4, 0xBA,
                    0x1A, 0x10,
                    0xB6,
                    0x9C,
                    0x00,
                    0xAA,
                    0x00,
                    0x34,
                    0x1D,
                    0x07
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IPropertyPage2
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x65, 0x46, 0xE4, 0x01,
                    0xAC, 0x24,
                    0x1B, 0x10,
                    0x84,
                    0xED,
                    0x08,
                    0x00,
                    0x2B,
                    0x2E,
                    0xC7,
                    0x13
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IPropertyPageSite
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x8C, 0xB2, 0x96, 0xB1,
                    0xB4, 0xBA,
                    0x1A, 0x10,
                    0xB6,
                    0x9C,
                    0x00,
                    0xAA,
                    0x00,
                    0x34,
                    0x1D,
                    0x07
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IPropertyNotifySink
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x02, 0xBC, 0xFB, 0x9B,
                    0xF1, 0xEF,
                    0x1A, 0x10,
                    0x84,
                    0xED,
                    0x00,
                    0xAA,
                    0x00,
                    0x34,
                    0x1D,
                    0x07
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_ISpecifyPropertyPages
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x8B, 0xB2, 0x96, 0xB1,
                    0xB4, 0xBA,
                    0x1A, 0x10,
                    0xB6,
                    0x9C,
                    0x00,
                    0xAA,
                    0x00,
                    0x34,
                    0x1D,
                    0x07
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IPersistMemory
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0xE0, 0xE5, 0x1A, 0xBD,
                    0xAE, 0xA6,
                    0xCE, 0x11,
                    0xBD,
                    0x37,
                    0x50,
                    0x42,
                    0x00,
                    0xC1,
                    0x00,
                    0x00
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IPersistStreamInit
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x80, 0x23, 0xD5, 0x7F,
                    0x07, 0x4E,
                    0x1B, 0x10,
                    0xAE,
                    0x2D,
                    0x08,
                    0x00,
                    0x2B,
                    0x2E,
                    0xC7,
                    0x13
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IPersistPropertyBag
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x60, 0x4F, 0xD8, 0x37,
                    0xCB, 0x42,
                    0xCE, 0x11,
                    0x81,
                    0x35,
                    0x00,
                    0xAA,
                    0x00,
                    0x4B,
                    0xB8,
                    0x51
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_ISimpleFrameSite
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x01, 0x0E, 0x2B, 0x74,
                    0xE6, 0x14,
                    0x1B, 0x10,
                    0x91,
                    0x4E,
                    0x00,
                    0xAA,
                    0x00,
                    0x30,
                    0x0C,
                    0xAB
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IFont
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x02, 0xE0, 0xF6, 0xBE,
                    0x74, 0xA8,
                    0x1A, 0x10,
                    0x8B,
                    0xBA,
                    0x00,
                    0xAA,
                    0x00,
                    0x30,
                    0x0C,
                    0xAB
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IPicture
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x80, 0x09, 0xF8, 0x7B,
                    0x32, 0xBF,
                    0x1A, 0x10,
                    0x8B,
                    0xBB,
                    0x00,
                    0xAA,
                    0x00,
                    0x30,
                    0x0C,
                    0xAB
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IPicture2
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0xD8, 0x5D, 0x18, 0xF5,
                    0x12, 0x20,
                    0x0B, 0x4B,
                    0xAA,
                    0xD9,
                    0xF0,
                    0x52,
                    0xC6,
                    0xBD,
                    0x48,
                    0x2B
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IFontEventsDisp
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x0A, 0x10, 0xF6, 0x4E,
                    0x88, 0xAF,
                    0xD0, 0x11,
                    0x98,
                    0x46,
                    0x00,
                    0xC0,
                    0x4F,
                    0xC2,
                    0x99,
                    0x93
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IFontDisp
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x03, 0xE0, 0xF6, 0xBE,
                    0x74, 0xA8,
                    0x1A, 0x10,
                    0x8B,
                    0xBA,
                    0x00,
                    0xAA,
                    0x00,
                    0x30,
                    0x0C,
                    0xAB
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IPictureDisp
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x81, 0x09, 0xF8, 0x7B,
                    0x32, 0xBF,
                    0x1A, 0x10,
                    0x8B,
                    0xBB,
                    0x00,
                    0xAA,
                    0x00,
                    0x30,
                    0x0C,
                    0xAB
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IOleInPlaceObjectWindowless
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0xCC, 0x56, 0x20, 0x1C,
                    0xF4, 0x5E,
                    0x1B, 0x10,
                    0x8B,
                    0xC8,
                    0x00,
                    0xAA,
                    0x00,
                    0x3E,
                    0x3B,
                    0x29
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IOleInPlaceSiteEx
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x80, 0xAD, 0x2C, 0x9C,
                    0x24, 0x34,
                    0xCF, 0x11,
                    0xB6,
                    0x70,
                    0x00,
                    0xAA,
                    0x00,
                    0x4C,
                    0xD6,
                    0xD8
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IOleInPlaceSiteWindowless
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0xA0, 0xAD, 0x2E, 0x92,
                    0x24, 0x34,
                    0xCF, 0x11,
                    0xB6,
                    0x70,
                    0x00,
                    0xAA,
                    0x00,
                    0x4C,
                    0xD6,
                    0xD8
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IViewObjectEx
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x92, 0x42, 0xF2, 0x3A,
                    0x96, 0x0C,
                    0xCE, 0x11,
                    0xA0,
                    0xCF,
                    0x00,
                    0xAA,
                    0x00,
                    0x60,
                    0x0A,
                    0xB8
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IOleUndoUnit
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0xB0, 0xD3, 0x4A, 0x89,
                    0x97, 0xEF,
                    0xCE, 0x11,
                    0x9B,
                    0xC9,
                    0x00,
                    0xAA,
                    0x00,
                    0x60,
                    0x8E,
                    0x01
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IOleParentUndoUnit
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x30, 0xF3, 0xFA, 0xA1,
                    0x97, 0xEF,
                    0xCE, 0x11,
                    0x9B,
                    0xC9,
                    0x00,
                    0xAA,
                    0x00,
                    0x60,
                    0x8E,
                    0x01
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IEnumOleUndoUnits
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x40, 0xC3, 0xE7, 0xB3,
                    0x97, 0xEF,
                    0xCE, 0x11,
                    0x9B,
                    0xC9,
                    0x00,
                    0xAA,
                    0x00,
                    0x60,
                    0x8E,
                    0x01
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IOleUndoManager
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x00, 0xF2, 0x01, 0xD0,
                    0x97, 0xEF,
                    0xCE, 0x11,
                    0x9B,
                    0xC9,
                    0x00,
                    0xAA,
                    0x00,
                    0x60,
                    0x8E,
                    0x01
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IPointerInactive
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0xA0, 0x0B, 0x98, 0x55,
                    0xAA, 0x35,
                    0xCF, 0x11,
                    0xB6,
                    0x71,
                    0x00,
                    0xAA,
                    0x00,
                    0x4C,
                    0xD6,
                    0xD8
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IObjectWithSite
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0xA3, 0x01, 0x48, 0xFC,
                    0xA9, 0x2B,
                    0xCF, 0x11,
                    0xA2,
                    0x29,
                    0x00,
                    0xAA,
                    0x00,
                    0x3D,
                    0x73,
                    0x52
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IPerPropertyBrowsing
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0xAA, 0xD3, 0x6B, 0x37,
                    0x45, 0x38,
                    0x1B, 0x10,
                    0x84,
                    0xED,
                    0x08,
                    0x00,
                    0x2B,
                    0x2E,
                    0xC7,
                    0x13
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IPropertyBag2
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x82, 0x58, 0xF5, 0x22,
                    0x0B, 0x28,
                    0xD0, 0x11,
                    0xA8,
                    0xA9,
                    0x00,
                    0xA0,
                    0xC9,
                    0x0C,
                    0x20,
                    0x04
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IPersistPropertyBag2
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x81, 0x58, 0xF5, 0x22,
                    0x0B, 0x28,
                    0xD0, 0x11,
                    0xA8,
                    0xA9,
                    0x00,
                    0xA0,
                    0xC9,
                    0x0C,
                    0x20,
                    0x04
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IAdviseSinkEx
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x90, 0x42, 0xF2, 0x3A,
                    0x96, 0x0C,
                    0xCE, 0x11,
                    0xA0,
                    0xCF,
                    0x00,
                    0xAA,
                    0x00,
                    0x60,
                    0x0A,
                    0xB8
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }

        public static ref readonly Guid IID_IQuickActivate
        {
            get
            {
                ReadOnlySpan<byte> data = [
                    0x10, 0xED, 0x51, 0xCF,
                    0xFE, 0x62,
                    0xCF, 0x11,
                    0xBF,
                    0x86,
                    0x00,
                    0xA0,
                    0xC9,
                    0x03,
                    0x48,
                    0x36
                ];

                Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }
    }
}
